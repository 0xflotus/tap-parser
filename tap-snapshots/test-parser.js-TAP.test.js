/* IMPORTANT
 * This snapshot file is auto-generated, but designed for humans.
 * It should be checked into source control and tracked carefully.
 * Re-generate by setting TAP_SNAPSHOT=1 and running tests.
 * Make sure to inspect the output below.  Do not ignore changes!
 */
'use strict'
exports[`test/parser.js TAP bailout-no-raison.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP bailout-no-raison.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP bailout.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'Bail out! GERONIMMMOOOOOO!!!\\n' ],
  [ 'bailout', 'GERONIMMMOOOOOO!!!' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: 'GERONIMMMOOOOOO!!!',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP bailout.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'Bail out! GERONIMMMOOOOOO!!!\\n' ],
  [ 'bailout', 'GERONIMMMOOOOOO!!!' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: 'GERONIMMMOOOOOO!!!',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP basic.tap > output bail=true 1`] = `
[ [ 'line', '1..6\\n' ],
  [ 'plan', { start: 1, end: 6 } ],
  [ 'line', 'not ok\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 6, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 1 } ] } ] ]
`

exports[`test/parser.js TAP basic.tap > output bail=false 1`] = `
[ [ 'line', '1..6\\n' ],
  [ 'plan', { start: 1, end: 6 } ],
  [ 'line', 'not ok\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'not ok\\n' ],
  [ 'assert', Result { ok: false, id: 3 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', '# test count(5) != plan(6)\\n' ],
  [ 'comment', '# test count(5) != plan(6)\\n' ],
  [ 'line', '# failed 2 of 5 tests\\n' ],
  [ 'comment', '# failed 2 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 3,
      fail: 2,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 6, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 1 }, Result { ok: false, id: 3 } ] } ] ]
`

exports[`test/parser.js TAP big-last.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 6\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 6,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 5 } } ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 6,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 5 } } ] } ] ]
`

exports[`test/parser.js TAP big-last.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 6\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 6,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 5 } } ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 6,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 5 } } ] } ] ]
`

exports[`test/parser.js TAP bignum_many.tap > output bail=true 1`] = `
[ [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 99997\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 99997,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 99998\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 99998,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 99999\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 99999,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100000\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100000,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100001\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100001,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100002\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100002,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100003\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100003,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100004\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100004,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100005\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100005,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', '# test count(11) != plan(2)\\n' ],
  [ 'comment', '# test count(11) != plan(2)\\n' ],
  [ 'line', '# failed 9 of 11 tests\\n' ],
  [ 'comment', '# failed 9 of 11 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 11,
      pass: 11,
      fail: 9,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 99997,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 99998,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 99999,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100000,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100001,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100002,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100003,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100004,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100005,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } } ] } ] ]
`

exports[`test/parser.js TAP bignum_many.tap > output bail=false 1`] = `
[ [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 99997\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 99997,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 99998\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 99998,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 99999\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 99999,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100000\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100000,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100001\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100001,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100002\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100002,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100003\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100003,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100004\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100004,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 100005\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 100005,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', '# test count(11) != plan(2)\\n' ],
  [ 'comment', '# test count(11) != plan(2)\\n' ],
  [ 'line', '# failed 9 of 11 tests\\n' ],
  [ 'comment', '# failed 9 of 11 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 11,
      pass: 11,
      fail: 9,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 99997,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 99998,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 99999,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100000,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100001,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100002,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100003,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100004,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 100005,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } } ] } ] ]
`

exports[`test/parser.js TAP bignum.tap > output bail=true 1`] = `
[ [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 136211425\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 136211425,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 136211426\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 136211426,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', '# test count(4) != plan(2)\\n' ],
  [ 'comment', '# test count(4) != plan(2)\\n' ],
  [ 'line', '# failed 2 of 4 tests\\n' ],
  [ 'comment', '# failed 2 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 2,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 136211425,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 136211426,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } } ] } ] ]
`

exports[`test/parser.js TAP bignum.tap > output bail=false 1`] = `
[ [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 136211425\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 136211425,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', 'ok 136211426\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 136211426,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 2 } } ],
  [ 'line', '# test count(4) != plan(2)\\n' ],
  [ 'comment', '# test count(4) != plan(2)\\n' ],
  [ 'line', '# failed 2 of 4 tests\\n' ],
  [ 'comment', '# failed 2 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 2,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 136211425,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } },
         Result {
           ok: true,
           id: 136211426,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 2 } } ] } ] ]
`

exports[`test/parser.js TAP broken-yamlish-looks-like-child.tap > output bail=true 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1 -  callback happened\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'callback happened' } ],
  [ 'line', '  ok:\\n' ],
  [ 'extra', '  ok:\\n' ],
  [ 'line', '    - I wished for a bailout!\\n' ],
  [ 'extra', '    - I wished for a bailout!\\n' ],
  [ 'line',
    '    - lots of other shapes here can look like valid tap\\n' ],
  [ 'extra',
    '    - lots of other shapes here can look like valid tap\\n' ],
  [ 'line', ' ...\\n' ],
  [ 'extra', ' ...\\n' ],
  [ 'line', 'ok 2 -  child test\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'child test' } ],
  [ 'line', 'ok 3 -  should come last\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should come last' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP broken-yamlish-looks-like-child.tap > output bail=false 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1 -  callback happened\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'callback happened' } ],
  [ 'line', '  ok:\\n' ],
  [ 'extra', '  ok:\\n' ],
  [ 'line', '    - I wished for a bailout!\\n' ],
  [ 'extra', '    - I wished for a bailout!\\n' ],
  [ 'line',
    '    - lots of other shapes here can look like valid tap\\n' ],
  [ 'extra',
    '    - lots of other shapes here can look like valid tap\\n' ],
  [ 'line', ' ...\\n' ],
  [ 'extra', ' ...\\n' ],
  [ 'line', 'ok 2 -  child test\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'child test' } ],
  [ 'line', 'ok 3 -  should come last\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should come last' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP broken-yamlish-with-nonbroken-yamlish.tap > output bail=true 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1 -  callback happened\\n' ],
  [ 'line', '    # comment here too, why not?\\n' ],
  [ 'line', ' ---\\n' ],
  [ 'line', ' # also this is a comment\\n' ],
  [ 'line', ' ok: this time I mean it\\n' ],
  [ 'line', ' ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      name: 'callback happened',
      diag: { ok: 'this time I mean it' } } ],
  [ 'line', '  ok:\\n' ],
  [ 'extra', '  ok:\\n' ],
  [ 'line', '    # comment here too, why not?\\n' ],
  [ 'comment', '    # comment here too, why not?\\n' ],
  [ 'line', '    - I wished for a bailout!\\n' ],
  [ 'extra', '    - I wished for a bailout!\\n' ],
  [ 'line',
    '    - lots of other shapes here can look like valid tap\\n' ],
  [ 'extra',
    '    - lots of other shapes here can look like valid tap\\n' ],
  [ 'line', ' ...\\n' ],
  [ 'extra', ' ...\\n' ],
  [ 'line', 'ok 2 -  child test\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'child test' } ],
  [ 'line', 'ok 3 -  should come last\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should come last' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP broken-yamlish-with-nonbroken-yamlish.tap > output bail=false 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1 -  callback happened\\n' ],
  [ 'line', '    # comment here too, why not?\\n' ],
  [ 'line', ' ---\\n' ],
  [ 'line', ' # also this is a comment\\n' ],
  [ 'line', ' ok: this time I mean it\\n' ],
  [ 'line', ' ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      name: 'callback happened',
      diag: { ok: 'this time I mean it' } } ],
  [ 'line', '  ok:\\n' ],
  [ 'extra', '  ok:\\n' ],
  [ 'line', '    # comment here too, why not?\\n' ],
  [ 'comment', '    # comment here too, why not?\\n' ],
  [ 'line', '    - I wished for a bailout!\\n' ],
  [ 'extra', '    - I wished for a bailout!\\n' ],
  [ 'line',
    '    - lots of other shapes here can look like valid tap\\n' ],
  [ 'extra',
    '    - lots of other shapes here can look like valid tap\\n' ],
  [ 'line', ' ...\\n' ],
  [ 'extra', ' ...\\n' ],
  [ 'line', 'ok 2 -  child test\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'child test' } ],
  [ 'line', 'ok 3 -  should come last\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should come last' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP buffered-nested-failure-top-ok-diag.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 - my kids are fine\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  some: diag\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'line', '{\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my kids are fine\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', "not ok - no they aren't\\n" ],
      [ 'assert',
        Result { ok: false, id: 1, name: "no they aren't" } ],
      [ 'line', "Bail out! # no they aren't\\n" ],
      [ 'bailout', "# no they aren't" ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: "# no they aren't",
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [ Result { ok: false, id: 1, name: "no they aren't" } ] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', "    not ok - no they aren't\\n" ],
  [ 'line', "    Bail out! # no they aren't\\n" ],
  [ 'bailout', "# no they aren't" ],
  [ 'line', '}\\n' ],
  [ 'line', "Bail out! # no they aren't\\n" ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: "# no they aren't",
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP buffered-nested-failure-top-ok-diag.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 - my kids are fine\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  some: diag\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'line', '{\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my kids are fine\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', "not ok - no they aren't\\n" ],
      [ 'assert',
        Result { ok: false, id: 1, name: "no they aren't" } ],
      [ 'line', '# failed 1 test\\n' ],
      [ 'comment', '# failed 1 test\\n' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [ Result { ok: false, id: 1, name: "no they aren't" } ] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', "    not ok - no they aren't\\n" ],
  [ 'line', '    # failed 1 test\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      name: 'my kids are fine',
      diag: { some: 'diag' },
      buffered: true } ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP buffered-nested-failure-top-ok-no-msg.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 - my kids are fine {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my kids are fine\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'not ok\\n' ],
      [ 'assert', Result { ok: false, id: 1 } ],
      [ 'line', 'Bail out!\\n' ],
      [ 'bailout', '' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: true,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [ Result { ok: false, id: 1 } ] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    not ok\\n' ],
  [ 'line', '    Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'line', '}\\n' ],
  [ 'line', 'Bail out!\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP buffered-nested-failure-top-ok-no-msg.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 - my kids are fine {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my kids are fine\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'not ok\\n' ],
      [ 'assert', Result { ok: false, id: 1 } ],
      [ 'line', '# failed 1 test\\n' ],
      [ 'comment', '# failed 1 test\\n' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [ Result { ok: false, id: 1 } ] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    not ok\\n' ],
  [ 'line', '    # failed 1 test\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'my kids are fine' } ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP buffered-nested-failure-top-ok.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 - my kids are fine {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my kids are fine\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', "not ok - no they aren't\\n" ],
      [ 'assert',
        Result { ok: false, id: 1, name: "no they aren't" } ],
      [ 'line', "Bail out! # no they aren't\\n" ],
      [ 'bailout', "# no they aren't" ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: "# no they aren't",
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [ Result { ok: false, id: 1, name: "no they aren't" } ] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', "    not ok - no they aren't\\n" ],
  [ 'line', "    Bail out! # no they aren't\\n" ],
  [ 'bailout', "# no they aren't" ],
  [ 'line', '}\\n' ],
  [ 'line', "Bail out! # no they aren't\\n" ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: "# no they aren't",
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP buffered-nested-failure-top-ok.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 - my kids are fine {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my kids are fine\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', "not ok - no they aren't\\n" ],
      [ 'assert',
        Result { ok: false, id: 1, name: "no they aren't" } ],
      [ 'line', '# failed 1 test\\n' ],
      [ 'comment', '# failed 1 test\\n' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [ Result { ok: false, id: 1, name: "no they aren't" } ] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', "    not ok - no they aren't\\n" ],
  [ 'line', '    # failed 1 test\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'my kids are fine' } ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP buffered-nested-ok-top-failure-diag.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'not ok 1 - please sir, my son, he is sick\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  some: diag\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'line', '{\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: please sir, my son, he is sick\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok - i got better\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'i got better' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok - i got better\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      name: 'please sir, my son, he is sick',
      diag: { some: 'diag' },
      buffered: true } ],
  [ 'line', 'Bail out! # please sir, my son, he is sick\\n' ],
  [ 'bailout', '# please sir, my son, he is sick' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# please sir, my son, he is sick',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           name: 'please sir, my son, he is sick',
           diag: { some: 'diag' },
           buffered: true } ] } ] ]
`

exports[`test/parser.js TAP buffered-nested-ok-top-failure-diag.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'not ok 1 - please sir, my son, he is sick\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  some: diag\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'line', '{\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: please sir, my son, he is sick\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok - i got better\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'i got better' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok - i got better\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      name: 'please sir, my son, he is sick',
      diag: { some: 'diag' },
      buffered: true } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           name: 'please sir, my son, he is sick',
           diag: { some: 'diag' },
           buffered: true } ] } ] ]
`

exports[`test/parser.js TAP buffered-nested-ok-top-failure.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'not ok 1 - please sir, my son, he is sick {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: please sir, my son, he is sick\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok - i got better\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'i got better' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok - i got better\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      buffered: true,
      name: 'please sir, my son, he is sick' } ],
  [ 'line', 'Bail out! # please sir, my son, he is sick\\n' ],
  [ 'bailout', '# please sir, my son, he is sick' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# please sir, my son, he is sick',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           buffered: true,
           name: 'please sir, my son, he is sick' } ] } ] ]
`

exports[`test/parser.js TAP buffered-nested-ok-top-failure.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'not ok 1 - please sir, my son, he is sick {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: please sir, my son, he is sick\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok - i got better\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'i got better' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok - i got better\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      buffered: true,
      name: 'please sir, my son, he is sick' } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           buffered: true,
           name: 'please sir, my son, he is sick' } ] } ] ]
`

exports[`test/parser.js TAP buffered-with-diag-not-ok.tap > output bail=true 1`] = `
[ [ 'line', 'not ok 1 - child\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  some: diagnostics\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'line', '{\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child\\n' ],
      [ 'line', 'ok 1\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      name: 'child',
      diag: { some: 'diagnostics' },
      buffered: true } ],
  [ 'line', 'Bail out! # child\\n' ],
  [ 'bailout', '# child' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# child',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           name: 'child',
           diag: { some: 'diagnostics' },
           buffered: true } ] } ] ]
`

exports[`test/parser.js TAP buffered-with-diag-not-ok.tap > output bail=false 1`] = `
[ [ 'line', 'not ok 1 - child\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  some: diagnostics\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'line', '{\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child\\n' ],
      [ 'line', 'ok 1\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      name: 'child',
      diag: { some: 'diagnostics' },
      buffered: true } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           name: 'child',
           diag: { some: 'diagnostics' },
           buffered: true } ] } ] ]
`

exports[`test/parser.js TAP buffered-with-diag-ok.tap > output bail=true 1`] = `
[ [ 'line', 'ok 1 - child\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  some: diagnostics\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'line', '{\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child\\n' ],
      [ 'line', 'ok 1\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      name: 'child',
      diag: { some: 'diagnostics' },
      buffered: true } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP buffered-with-diag-ok.tap > output bail=false 1`] = `
[ [ 'line', 'ok 1 - child\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  some: diagnostics\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'line', '{\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child\\n' ],
      [ 'line', 'ok 1\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      name: 'child',
      diag: { some: 'diagnostics' },
      buffered: true } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP child-after-failure.tap > output bail=true 1`] = `
[ [ 'line', 'not ok - 1\\n' ],
  [ 'assert', Result { ok: false, id: 1, name: '1' } ],
  [ 'line', 'Bail out! # 1\\n' ],
  [ 'bailout', '# 1' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# 1',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ Result { ok: false, id: 1, name: '1' } ] } ] ]
`

exports[`test/parser.js TAP child-after-failure.tap > output bail=false 1`] = `
[ [ 'line', 'not ok - 1\\n' ],
  [ 'assert', Result { ok: false, id: 1, name: '1' } ],
  [ 'line', '# Subtest: child\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child\\n' ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 2 - child\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'child' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# failed 1 of 2 tests\\n' ],
  [ 'comment', '# failed 1 of 2 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 1, name: '1' } ] } ] ]
`

exports[`test/parser.js TAP child-extra.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: test/debug-test.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: test/debug-test.js\\n' ],
      [ 'line', '# debug test\\n' ],
      [ 'comment', '# debug test\\n' ],
      [ 'line', 'ok 1 Should output debugger message\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, name: 'Should output debugger message' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', '# tests 1\\n' ],
      [ 'comment', '# tests 1\\n' ],
      [ 'line', '# pass  1\\n' ],
      [ 'comment', '# pass  1\\n' ],
      [ 'line', '# ok\\n' ],
      [ 'comment', '# ok\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', 'debug test\\n' ],
  [ 'extra', 'debug test\\n' ],
  [ 'line', 't.plan=1\\n' ],
  [ 'extra', 't.plan=1\\n' ],
  [ 'line', "'Debugger listening on port 5858\\\\n'\\n" ],
  [ 'extra', "'Debugger listening on port 5858\\\\n'\\n" ],
  [ 'line', '    # debug test\\n' ],
  [ 'line', '    ok 1 Should output debugger message\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    # tests 1\\n' ],
  [ 'line', '    # pass  1\\n' ],
  [ 'line', '    # ok\\n' ],
  [ 'line', 'ok 1 - test/debug-test.js # time=537.383ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 537.383, name: 'test/debug-test.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# time=543.783ms\\n' ],
  [ 'comment', '# time=543.783ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP child-extra.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: test/debug-test.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: test/debug-test.js\\n' ],
      [ 'line', '# debug test\\n' ],
      [ 'comment', '# debug test\\n' ],
      [ 'line', 'ok 1 Should output debugger message\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, name: 'Should output debugger message' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', '# tests 1\\n' ],
      [ 'comment', '# tests 1\\n' ],
      [ 'line', '# pass  1\\n' ],
      [ 'comment', '# pass  1\\n' ],
      [ 'line', '# ok\\n' ],
      [ 'comment', '# ok\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', 'debug test\\n' ],
  [ 'extra', 'debug test\\n' ],
  [ 'line', 't.plan=1\\n' ],
  [ 'extra', 't.plan=1\\n' ],
  [ 'line', "'Debugger listening on port 5858\\\\n'\\n" ],
  [ 'extra', "'Debugger listening on port 5858\\\\n'\\n" ],
  [ 'line', '    # debug test\\n' ],
  [ 'line', '    ok 1 Should output debugger message\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    # tests 1\\n' ],
  [ 'line', '    # pass  1\\n' ],
  [ 'line', '    # ok\\n' ],
  [ 'line', 'ok 1 - test/debug-test.js # time=537.383ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 537.383, name: 'test/debug-test.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# time=543.783ms\\n' ],
  [ 'comment', '# time=543.783ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP combined_compat.tap > output bail=true 1`] = `
[ [ 'line', '1..10 todo 4 10\\n' ],
  [ 'extra', '1..10 todo 4 10\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2 basset hounds got long ears\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'basset hounds got long ears' } ],
  [ 'line', 'not ok 3        all hell broke lose\\n' ],
  [ 'assert',
    Result { ok: false, id: 3, name: 'all hell broke lose' } ],
  [ 'line', 'Bail out! # all hell broke lose\\n' ],
  [ 'bailout', '# all hell broke lose' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 2,
      fail: 1,
      bailout: '# all hell broke lose',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ Result { ok: false, id: 3, name: 'all hell broke lose' } ] } ] ]
`

exports[`test/parser.js TAP combined_compat.tap > output bail=false 1`] = `
[ [ 'line', '1..10 todo 4 10\\n' ],
  [ 'extra', '1..10 todo 4 10\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2 basset hounds got long ears\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'basset hounds got long ears' } ],
  [ 'line', 'not ok 3        all hell broke lose\\n' ],
  [ 'assert',
    Result { ok: false, id: 3, name: 'all hell broke lose' } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', 'ok 6\\n' ],
  [ 'assert', Result { ok: true, id: 6 } ],
  [ 'line', 'ok 7            # Skip contract negociations\\n' ],
  [ 'assert',
    Result { ok: true, id: 7, skip: 'contract negociations', name: '' } ],
  [ 'line', 'ok 8\\n' ],
  [ 'assert', Result { ok: true, id: 8 } ],
  [ 'line', 'not ok 9\\n' ],
  [ 'assert', Result { ok: false, id: 9 } ],
  [ 'line', 'not ok 10\\n' ],
  [ 'assert', Result { ok: false, id: 10 } ],
  [ 'line', '# test count(10) != plan(null)\\n' ],
  [ 'comment', '# test count(10) != plan(null)\\n' ],
  [ 'line', '# failed 4 of 10 tests\\n' ],
  [ 'comment', '# failed 4 of 10 tests\\n' ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 10,
      pass: 7,
      fail: 4,
      bailout: false,
      todo: 0,
      skip: 1,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result { ok: false, id: 3, name: 'all hell broke lose' },
         Result { ok: false, id: 9 },
         Result { ok: false, id: 10 },
         { tapError: 'no plan' } ] } ] ]
`

exports[`test/parser.js TAP combined.tap > output bail=true 1`] = `
[ [ 'line', '1..10\\n' ],
  [ 'plan', { start: 1, end: 10 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2 basset hounds got long ears\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'basset hounds got long ears' } ],
  [ 'line', 'not ok 3        all hell broke loose\\n' ],
  [ 'assert',
    Result { ok: false, id: 3, name: 'all hell broke loose' } ],
  [ 'line', 'Bail out! # all hell broke loose\\n' ],
  [ 'bailout', '# all hell broke loose' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 2,
      fail: 1,
      bailout: '# all hell broke loose',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 10, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result { ok: false, id: 3, name: 'all hell broke loose' } ] } ] ]
`

exports[`test/parser.js TAP combined.tap > output bail=false 1`] = `
[ [ 'line', '1..10\\n' ],
  [ 'plan', { start: 1, end: 10 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2 basset hounds got long ears\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'basset hounds got long ears' } ],
  [ 'line', 'not ok 3        all hell broke loose\\n' ],
  [ 'assert',
    Result { ok: false, id: 3, name: 'all hell broke loose' } ],
  [ 'line',
    'not ok 4  # TODO if I heard a voice from heaven ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 4,
      todo: 'if I heard a voice from heaven ...',
      name: '' } ],
  [ 'line', 'ok say "live without loving",\\n' ],
  [ 'assert',
    Result { ok: true, id: 5, name: 'say "live without loving",' } ],
  [ 'line', "ok 6 I'd beg off.\\n" ],
  [ 'assert', Result { ok: true, id: 6, name: "I'd beg off." } ],
  [ 'line', 'ok 7            # Skip contract negotiations\\n' ],
  [ 'assert',
    Result { ok: true, id: 7, skip: 'contract negotiations', name: '' } ],
  [ 'line', 'ok 8 Girls are such exquisite hell\\n' ],
  [ 'assert',
    Result { ok: true, id: 8, name: 'Girls are such exquisite hell' } ],
  [ 'line', 'ok 9 Elegy 9B           # TOdO\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, todo: true, name: 'Elegy 9B' } ],
  [ 'line', 'not ok 10\\n' ],
  [ 'assert', Result { ok: false, id: 10 } ],
  [ 'line', '# failed 3 of 10 tests\\n' ],
  [ 'comment', '# failed 3 of 10 tests\\n' ],
  [ 'line', '# todo: 2\\n' ],
  [ 'comment', '# todo: 2\\n' ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 10,
      pass: 7,
      fail: 3,
      bailout: false,
      todo: 2,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 10, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result { ok: false, id: 3, name: 'all hell broke loose' },
         Result { ok: false, id: 10 } ] } ] ]
`

exports[`test/parser.js TAP comment-mid-diag-postplan.tap > output bail=true 1`] = `
[ [ 'line', '# before version\\n' ],
  [ 'comment', '# before version\\n' ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# after version, before result\\n' ],
  [ 'comment', '# after version, before result\\n' ],
  [ 'line', 'not ok 1 - please keep my diags\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  # mid diag indent\\n' ],
  [ 'line', '  after: comment\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      name: 'please keep my diags',
      diag: { after: 'comment' } } ],
  [ 'line', '  # before diag\\n' ],
  [ 'comment', '  # before diag\\n' ],
  [ 'line', '# mid diag\\n' ],
  [ 'comment', '# mid diag\\n' ],
  [ 'line', '  # after diag\\n' ],
  [ 'comment', '  # after diag\\n' ],
  [ 'line', 'Bail out! # please keep my diags\\n' ],
  [ 'bailout', '# please keep my diags' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# please keep my diags',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           name: 'please keep my diags',
           diag: { after: 'comment' } } ] } ] ]
`

exports[`test/parser.js TAP comment-mid-diag-postplan.tap > output bail=false 1`] = `
[ [ 'line', '# before version\\n' ],
  [ 'comment', '# before version\\n' ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# after version, before result\\n' ],
  [ 'comment', '# after version, before result\\n' ],
  [ 'line', 'not ok 1 - please keep my diags\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  # mid diag indent\\n' ],
  [ 'line', '  after: comment\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      name: 'please keep my diags',
      diag: { after: 'comment' } } ],
  [ 'line', '  # before diag\\n' ],
  [ 'comment', '  # before diag\\n' ],
  [ 'line', '# mid diag\\n' ],
  [ 'comment', '# mid diag\\n' ],
  [ 'line', '  # after diag\\n' ],
  [ 'comment', '  # after diag\\n' ],
  [ 'line', '# Subtest: child\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# before 1\\n' ],
      [ 'comment', '# before 1\\n' ],
      [ 'line', 'ok 1\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'line', '# before 2\\n' ],
      [ 'comment', '# before 2\\n' ],
      [ 'line', 'ok 2\\n' ],
      [ 'assert', Result { ok: true, id: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # before 1\\n' ],
  [ 'line', '    ok 1\\n' ],
  [ 'line', '    # before 2\\n' ],
  [ 'line', '    ok 2\\n' ],
  [ 'line', '# before 2\\n' ],
  [ 'comment', '# before 2\\n' ],
  [ 'line', 'ok 2 - child\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'child' } ],
  [ 'line', '# after 2, brefore plan\\n' ],
  [ 'comment', '# after 2, brefore plan\\n' ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# after plan\\n' ],
  [ 'comment', '# after plan\\n' ],
  [ 'line', '# failed 1 of 2 tests\\n' ],
  [ 'comment', '# failed 1 of 2 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           name: 'please keep my diags',
           diag: { after: 'comment' } } ] } ] ]
`

exports[`test/parser.js TAP comment-mid-diag.tap > output bail=true 1`] = `
[ [ 'line', '# before version\\n' ],
  [ 'comment', '# before version\\n' ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# after version, before plan\\n' ],
  [ 'comment', '# after version, before plan\\n' ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# before result\\n' ],
  [ 'comment', '# before result\\n' ],
  [ 'line', 'not ok 1 - please keep my diags\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  # mid diag indent\\n' ],
  [ 'line', '  after: comment\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      name: 'please keep my diags',
      diag: { after: 'comment' } } ],
  [ 'line', '  # before diag\\n' ],
  [ 'comment', '  # before diag\\n' ],
  [ 'line', '# mid diag\\n' ],
  [ 'comment', '# mid diag\\n' ],
  [ 'line', '  # after diag\\n' ],
  [ 'comment', '  # after diag\\n' ],
  [ 'line', '# before 2\\n' ],
  [ 'comment', '# before 2\\n' ],
  [ 'line', 'Bail out! # please keep my diags\\n' ],
  [ 'bailout', '# please keep my diags' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# please keep my diags',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           name: 'please keep my diags',
           diag: { after: 'comment' } } ] } ] ]
`

exports[`test/parser.js TAP comment-mid-diag.tap > output bail=false 1`] = `
[ [ 'line', '# before version\\n' ],
  [ 'comment', '# before version\\n' ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# after version, before plan\\n' ],
  [ 'comment', '# after version, before plan\\n' ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# before result\\n' ],
  [ 'comment', '# before result\\n' ],
  [ 'line', 'not ok 1 - please keep my diags\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  # mid diag indent\\n' ],
  [ 'line', '  after: comment\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      name: 'please keep my diags',
      diag: { after: 'comment' } } ],
  [ 'line', '  # before diag\\n' ],
  [ 'comment', '  # before diag\\n' ],
  [ 'line', '# mid diag\\n' ],
  [ 'comment', '# mid diag\\n' ],
  [ 'line', '  # after diag\\n' ],
  [ 'comment', '  # after diag\\n' ],
  [ 'line', '# before 2\\n' ],
  [ 'comment', '# before 2\\n' ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', '# after 2\\n' ],
  [ 'comment', '# after 2\\n' ],
  [ 'line', '# failed 1 of 2 tests\\n' ],
  [ 'comment', '# failed 1 of 2 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           name: 'please keep my diags',
           diag: { after: 'comment' } } ] } ] ]
`

exports[`test/parser.js TAP common-with-explanation.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..6\\n' ],
  [ 'plan', { start: 1, end: 6 } ],
  [ 'line', '#\\n' ],
  [ 'comment', '#\\n' ],
  [ 'line', '# Create a new Board and Tile, then place\\n' ],
  [ 'comment', '# Create a new Board and Tile, then place\\n' ],
  [ 'line', '# the Tile onto the board.\\n' ],
  [ 'comment', '# the Tile onto the board.\\n' ],
  [ 'line', '#\\n' ],
  [ 'comment', '#\\n' ],
  [ 'line', 'ok 1 - The object isa Board\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'The object isa Board' } ],
  [ 'line', 'ok 2 - Board size is zero\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Board size is zero' } ],
  [ 'line', 'ok 3 - The object isa Tile\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'The object isa Tile' } ],
  [ 'line', 'ok 4 - Get possible places to put the Tile\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'Get possible places to put the Tile' } ],
  [ 'line', 'ok 5 - Placing the tile produces no error\\n' ],
  [ 'assert',
    Result { ok: true, id: 5, name: 'Placing the tile produces no error' } ],
  [ 'line', 'ok 6 - Board size is 1\\n' ],
  [ 'assert',
    Result { ok: true, id: 6, name: 'Board size is 1' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 6,
      pass: 6,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 6, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP common-with-explanation.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..6\\n' ],
  [ 'plan', { start: 1, end: 6 } ],
  [ 'line', '#\\n' ],
  [ 'comment', '#\\n' ],
  [ 'line', '# Create a new Board and Tile, then place\\n' ],
  [ 'comment', '# Create a new Board and Tile, then place\\n' ],
  [ 'line', '# the Tile onto the board.\\n' ],
  [ 'comment', '# the Tile onto the board.\\n' ],
  [ 'line', '#\\n' ],
  [ 'comment', '#\\n' ],
  [ 'line', 'ok 1 - The object isa Board\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'The object isa Board' } ],
  [ 'line', 'ok 2 - Board size is zero\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Board size is zero' } ],
  [ 'line', 'ok 3 - The object isa Tile\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'The object isa Tile' } ],
  [ 'line', 'ok 4 - Get possible places to put the Tile\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'Get possible places to put the Tile' } ],
  [ 'line', 'ok 5 - Placing the tile produces no error\\n' ],
  [ 'assert',
    Result { ok: true, id: 5, name: 'Placing the tile produces no error' } ],
  [ 'line', 'ok 6 - Board size is 1\\n' ],
  [ 'assert',
    Result { ok: true, id: 6, name: 'Board size is 1' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 6,
      pass: 6,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 6, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP creative-liberties.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok - created Board\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'created Board' } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 6 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 7 } ],
  [ 'line', 'ok\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  message: "Board layout"\\n' ],
  [ 'line', '  severity: comment\\n' ],
  [ 'line', '  dump:\\n' ],
  [ 'line', '     board:\\n' ],
  [ 'line', "       - '      16G         05C        '\\n" ],
  [ 'line', "       - '      G N C       C C G      '\\n" ],
  [ 'line', "       - '        G           C  +     '\\n" ],
  [ 'line', "       - '10C   01G         03C        '\\n" ],
  [ 'line', "       - 'R N G G A G       C C C      '\\n" ],
  [ 'line', "       - '  R     G           C  +     '\\n" ],
  [ 'line', "       - '      01G   17C   00C        '\\n" ],
  [ 'line', "       - '      G A G G N R R N R      '\\n" ],
  [ 'line', "       - '        G     R     G        '\\n" ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 8,
      diag:
       { message: 'Board layout',
         severity: 'comment',
         dump:
          { board:
             [ '      16G         05C        ',
               '      G N C       C C G      ',
               '        G           C  +     ',
               '10C   01G         03C        ',
               'R N G G A G       C C C      ',
               '  R     G           C  +     ',
               '      01G   17C   00C        ',
               '      G A G G N R R N R      ',
               '        G     R     G        ' ] } } } ],
  [ 'line', 'ok - board has 7 tiles + starter tile\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'board has 7 tiles + starter tile' } ],
  [ 'line', '1..9\\n' ],
  [ 'plan', { start: 1, end: 9 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 9,
      pass: 9,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 9, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP creative-liberties.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok - created Board\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'created Board' } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 6 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 7 } ],
  [ 'line', 'ok\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  message: "Board layout"\\n' ],
  [ 'line', '  severity: comment\\n' ],
  [ 'line', '  dump:\\n' ],
  [ 'line', '     board:\\n' ],
  [ 'line', "       - '      16G         05C        '\\n" ],
  [ 'line', "       - '      G N C       C C G      '\\n" ],
  [ 'line', "       - '        G           C  +     '\\n" ],
  [ 'line', "       - '10C   01G         03C        '\\n" ],
  [ 'line', "       - 'R N G G A G       C C C      '\\n" ],
  [ 'line', "       - '  R     G           C  +     '\\n" ],
  [ 'line', "       - '      01G   17C   00C        '\\n" ],
  [ 'line', "       - '      G A G G N R R N R      '\\n" ],
  [ 'line', "       - '        G     R     G        '\\n" ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 8,
      diag:
       { message: 'Board layout',
         severity: 'comment',
         dump:
          { board:
             [ '      16G         05C        ',
               '      G N C       C C G      ',
               '        G           C  +     ',
               '10C   01G         03C        ',
               'R N G G A G       C C C      ',
               '  R     G           C  +     ',
               '      01G   17C   00C        ',
               '      G A G G N R R N R      ',
               '        G     R     G        ' ] } } } ],
  [ 'line', 'ok - board has 7 tiles + starter tile\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'board has 7 tiles + starter tile' } ],
  [ 'line', '1..9\\n' ],
  [ 'plan', { start: 1, end: 9 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 9,
      pass: 9,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 9, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP delayed.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1 00000\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: '00000' } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'not ok 3\\n' ],
  [ 'assert', Result { ok: false, id: 3 } ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 2,
      fail: 1,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 3 } ] } ] ]
`

exports[`test/parser.js TAP delayed.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1 00000\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: '00000' } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'not ok 3\\n' ],
  [ 'assert', Result { ok: false, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5 00000\\n' ],
  [ 'assert', Result { ok: true, id: 5, name: '00000' } ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 3 } ] } ] ]
`

exports[`test/parser.js TAP descriptive_trailing.tap > output bail=true 1`] = `
[ [ 'line', 'ok 1    Interlock activated\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'Interlock activated' } ],
  [ 'line', 'ok 2    Megathrusters are go\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Megathrusters are go' } ],
  [ 'line', 'ok 3    Head formed\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'Head formed' } ],
  [ 'line', 'ok 4    Blazing sword formed\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'Blazing sword formed' } ],
  [ 'line', 'ok 5    Robeast destroyed\\n' ],
  [ 'assert',
    Result { ok: true, id: 5, name: 'Robeast destroyed' } ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP descriptive_trailing.tap > output bail=false 1`] = `
[ [ 'line', 'ok 1    Interlock activated\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'Interlock activated' } ],
  [ 'line', 'ok 2    Megathrusters are go\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Megathrusters are go' } ],
  [ 'line', 'ok 3    Head formed\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'Head formed' } ],
  [ 'line', 'ok 4    Blazing sword formed\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'Blazing sword formed' } ],
  [ 'line', 'ok 5    Robeast destroyed\\n' ],
  [ 'assert',
    Result { ok: true, id: 5, name: 'Robeast destroyed' } ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP descriptive.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1    Interlock activated\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'Interlock activated' } ],
  [ 'line', 'ok 2    Megathrusters are go\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Megathrusters are go' } ],
  [ 'line', 'ok 3    Head formed\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'Head formed' } ],
  [ 'line', 'ok 4    Blazing sword formed\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'Blazing sword formed' } ],
  [ 'line', 'ok 5    Robeast destroyed\\n' ],
  [ 'assert',
    Result { ok: true, id: 5, name: 'Robeast destroyed' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP descriptive.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1    Interlock activated\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'Interlock activated' } ],
  [ 'line', 'ok 2    Megathrusters are go\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Megathrusters are go' } ],
  [ 'line', 'ok 3    Head formed\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'Head formed' } ],
  [ 'line', 'ok 4    Blazing sword formed\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'Blazing sword formed' } ],
  [ 'line', 'ok 5    Robeast destroyed\\n' ],
  [ 'assert',
    Result { ok: true, id: 5, name: 'Robeast destroyed' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP diag-looks-like-comment.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: -t 0.2\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: -t 0.2\\n' ],
      [ 'line', 'not ok 1 - should match pattern provided\\n' ],
      [ 'line', '  ---\\n' ],
      [ 'line', '  found: >\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '    # Subtest: nope\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '        not ok 1 - nope\\n' ],
      [ 'line', '          ---\\n' ],
      [ 'line', '          still: the string\\n' ],
      [ 'line', '          ...\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '        1..1 # nope\\n' ],
      [ 'line', '    not ok 1 - nope #\\n' ],
      [ 'line', '    time=123\\n' ],
      [ 'line', '      ---\\n' ],
      [ 'line', '      this: is fine\\n' ],
      [ 'line', '      ...\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', "  pattern: '/SIGTERM/'\\n" ],
      [ 'line', '  ...\\n' ],
      [ 'assert',
        Result {
          ok: false,
          id: 1,
          name: 'should match pattern provided',
          diag:
           { found:
              '\\n# Subtest: nope\\n\\n    not ok 1 - nope\\n      ---\\n      still: the string\\n      ...\\n\\n    1..1 # nope\\nnot ok 1 - nope # time=123\\n  ---\\n  this: is fine\\n  ...\\n\\n1..1\\n',
             pattern: '/SIGTERM/' } } ],
      [ 'line', 'Bail out! # should match pattern provided\\n' ],
      [ 'bailout', '# should match pattern provided' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: '# should match pattern provided',
          todo: 0,
          skip: 0,
          plan:
           FinalPlan {
             start: null,
             end: null,
             skipAll: false,
             skipReason: '',
             comment: '' },
          failures:
           [ Result {
               ok: false,
               id: 1,
               name: 'should match pattern provided',
               diag:
                { found:
                   '\\n# Subtest: nope\\n\\n    not ok 1 - nope\\n      ---\\n      still: the string\\n      ...\\n\\n    1..1 # nope\\nnot ok 1 - nope # time=123\\n  ---\\n  this: is fine\\n  ...\\n\\n1..1\\n',
                  pattern: '/SIGTERM/' } } ] } ] ] ],
  [ 'line', '    not ok 1 - should match pattern provided\\n' ],
  [ 'line', '      ---\\n' ],
  [ 'line', '      found: >\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '        # Subtest: nope\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '            not ok 1 - nope\\n' ],
  [ 'line', '              ---\\n' ],
  [ 'line', '              still: the string\\n' ],
  [ 'line', '              ...\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '            1..1 # nope\\n' ],
  [ 'line', '        not ok 1 - nope #\\n' ],
  [ 'line', '        time=123\\n' ],
  [ 'line', '          ---\\n' ],
  [ 'line', '          this: is fine\\n' ],
  [ 'line', '          ...\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', "      pattern: '/SIGTERM/'\\n" ],
  [ 'line', '      ...\\n' ],
  [ 'line', '    Bail out! # should match pattern provided\\n' ],
  [ 'bailout', '# should match pattern provided' ],
  [ 'line', 'Bail out! # should match pattern provided\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: '# should match pattern provided',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP diag-looks-like-comment.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: -t 0.2\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: -t 0.2\\n' ],
      [ 'line', 'not ok 1 - should match pattern provided\\n' ],
      [ 'line', '  ---\\n' ],
      [ 'line', '  found: >\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '    # Subtest: nope\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '        not ok 1 - nope\\n' ],
      [ 'line', '          ---\\n' ],
      [ 'line', '          still: the string\\n' ],
      [ 'line', '          ...\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '        1..1 # nope\\n' ],
      [ 'line', '    not ok 1 - nope #\\n' ],
      [ 'line', '    time=123\\n' ],
      [ 'line', '      ---\\n' ],
      [ 'line', '      this: is fine\\n' ],
      [ 'line', '      ...\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', "  pattern: '/SIGTERM/'\\n" ],
      [ 'line', '  ...\\n' ],
      [ 'assert',
        Result {
          ok: false,
          id: 1,
          name: 'should match pattern provided',
          diag:
           { found:
              '\\n# Subtest: nope\\n\\n    not ok 1 - nope\\n      ---\\n      still: the string\\n      ...\\n\\n    1..1 # nope\\nnot ok 1 - nope # time=123\\n  ---\\n  this: is fine\\n  ...\\n\\n1..1\\n',
             pattern: '/SIGTERM/' } } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', '# failed 1 test\\n' ],
      [ 'comment', '# failed 1 test\\n' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures:
           [ Result {
               ok: false,
               id: 1,
               name: 'should match pattern provided',
               diag:
                { found:
                   '\\n# Subtest: nope\\n\\n    not ok 1 - nope\\n      ---\\n      still: the string\\n      ...\\n\\n    1..1 # nope\\nnot ok 1 - nope # time=123\\n  ---\\n  this: is fine\\n  ...\\n\\n1..1\\n',
                  pattern: '/SIGTERM/' } } ] } ] ] ],
  [ 'line', '    not ok 1 - should match pattern provided\\n' ],
  [ 'line', '      ---\\n' ],
  [ 'line', '      found: >\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '        # Subtest: nope\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '            not ok 1 - nope\\n' ],
  [ 'line', '              ---\\n' ],
  [ 'line', '              still: the string\\n' ],
  [ 'line', '              ...\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '            1..1 # nope\\n' ],
  [ 'line', '        not ok 1 - nope #\\n' ],
  [ 'line', '        time=123\\n' ],
  [ 'line', '          ---\\n' ],
  [ 'line', '          this: is fine\\n' ],
  [ 'line', '          ...\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', "      pattern: '/SIGTERM/'\\n" ],
  [ 'line', '      ...\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    # failed 1 test\\n' ],
  [ 'line', 'not ok 1 - -t 0.2\\n' ],
  [ 'assert', Result { ok: false, id: 1, name: '-t 0.2' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 1, name: '-t 0.2' } ] } ] ]
`

exports[`test/parser.js TAP die_head_end.tap > output bail=true 1`] = `
[ [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '# test count(4) != plan(null)\\n' ],
  [ 'comment', '# test count(4) != plan(null)\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ { tapError: 'no plan' } ] } ] ]
`

exports[`test/parser.js TAP die_head_end.tap > output bail=false 1`] = `
[ [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '# test count(4) != plan(null)\\n' ],
  [ 'comment', '# test count(4) != plan(null)\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ { tapError: 'no plan' } ] } ] ]
`

exports[`test/parser.js TAP die_last_minute.tap > output bail=true 1`] = `
[ [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP die_last_minute.tap > output bail=false 1`] = `
[ [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP die_unfinished.tap > output bail=true 1`] = `
[ [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', '# test count(3) != plan(4)\\n' ],
  [ 'comment', '# test count(3) != plan(4)\\n' ],
  [ 'line', '# failed 1 of 3 tests\\n' ],
  [ 'comment', '# failed 1 of 3 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 3,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP die_unfinished.tap > output bail=false 1`] = `
[ [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', '# test count(3) != plan(4)\\n' ],
  [ 'comment', '# test count(3) != plan(4)\\n' ],
  [ 'line', '# failed 1 of 3 tests\\n' ],
  [ 'comment', '# failed 1 of 3 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 3,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP die.tap > output bail=true 1`] = `
[ [ 'line', '1..0 # no tests found\\n' ],
  [ 'plan', { start: 1, end: 0, comment: 'no tests found' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'no tests found',
         comment: 'no tests found' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP die.tap > output bail=false 1`] = `
[ [ 'line', '1..0 # no tests found\\n' ],
  [ 'plan', { start: 1, end: 0, comment: 'no tests found' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'no tests found',
         comment: 'no tests found' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP duplicates.tap > output bail=true 1`] = `
[ [ 'line', '1..10\\n' ],
  [ 'plan', { start: 1, end: 10 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', 'ok 6\\n' ],
  [ 'assert', Result { ok: true, id: 6 } ],
  [ 'line', 'ok 7\\n' ],
  [ 'assert', Result { ok: true, id: 7 } ],
  [ 'line', 'ok 8\\n' ],
  [ 'assert', Result { ok: true, id: 8 } ],
  [ 'line', 'ok 9\\n' ],
  [ 'assert', Result { ok: true, id: 9 } ],
  [ 'line', 'ok 10\\n' ],
  [ 'assert', Result { ok: true, id: 10 } ],
  [ 'line', '# test count(11) != plan(10)\\n' ],
  [ 'comment', '# test count(11) != plan(10)\\n' ],
  [ 'line', '# failed 1 of 11 tests\\n' ],
  [ 'comment', '# failed 1 of 11 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 11,
      pass: 11,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 10, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP duplicates.tap > output bail=false 1`] = `
[ [ 'line', '1..10\\n' ],
  [ 'plan', { start: 1, end: 10 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', 'ok 6\\n' ],
  [ 'assert', Result { ok: true, id: 6 } ],
  [ 'line', 'ok 7\\n' ],
  [ 'assert', Result { ok: true, id: 7 } ],
  [ 'line', 'ok 8\\n' ],
  [ 'assert', Result { ok: true, id: 8 } ],
  [ 'line', 'ok 9\\n' ],
  [ 'assert', Result { ok: true, id: 9 } ],
  [ 'line', 'ok 10\\n' ],
  [ 'assert', Result { ok: true, id: 10 } ],
  [ 'line', '# test count(11) != plan(10)\\n' ],
  [ 'comment', '# test count(11) != plan(10)\\n' ],
  [ 'line', '# failed 1 of 11 tests\\n' ],
  [ 'comment', '# failed 1 of 11 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 11,
      pass: 11,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 10, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP echo.tap > output bail=true 1`] = `
[ [ 'line', '1..0\\n' ],
  [ 'plan', { start: 1, end: 0 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 0, skipAll: true, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP echo.tap > output bail=false 1`] = `
[ [ 'line', '1..0\\n' ],
  [ 'plan', { start: 1, end: 0 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 0, skipAll: true, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP empty-buffered-child.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok child {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 0,
          pass: 0,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 0, skipAll: true, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'child' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP empty-buffered-child.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok child {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 0,
          pass: 0,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 0, skipAll: true, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'child' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP empty-failures.tap > output bail=true 1`] = `
[ [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP empty-failures.tap > output bail=false 1`] = `
[ [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP empty.tap > output bail=true 1`] = `
[ [ 'line', '1..0 # no tests found\\n' ],
  [ 'plan', { start: 1, end: 0, comment: 'no tests found' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'no tests found',
         comment: 'no tests found' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP empty.tap > output bail=false 1`] = `
[ [ 'line', '1..0 # no tests found\\n' ],
  [ 'plan', { start: 1, end: 0, comment: 'no tests found' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'no tests found',
         comment: 'no tests found' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP escape_eol.tap > output bail=true 1`] = `
[ [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', 'ok 1    Should parse as literal backslash --> \\\\\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      name: 'Should parse as literal backslash --> \\\\' } ],
  [ 'line', 'ok 2    Not a continuation line\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Not a continuation line' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP escape_eol.tap > output bail=false 1`] = `
[ [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', 'ok 1    Should parse as literal backslash --> \\\\\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      name: 'Should parse as literal backslash --> \\\\' } ],
  [ 'line', 'ok 2    Not a continuation line\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Not a continuation line' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP escape_hash.tap > output bail=true 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1    Not a \\\\# TODO\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'Not a \\\\# TODO' } ],
  [ 'line', 'ok 2    Not a \\\\# SKIP\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'Not a \\\\# SKIP' } ],
  [ 'line', 'ok 3    Escaped \\\\\\\\\\\\#\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'Escaped \\\\\\\\\\\\#' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP escape_hash.tap > output bail=false 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1    Not a \\\\# TODO\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'Not a \\\\# TODO' } ],
  [ 'line', 'ok 2    Not a \\\\# SKIP\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'Not a \\\\# SKIP' } ],
  [ 'line', 'ok 3    Escaped \\\\\\\\\\\\#\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'Escaped \\\\\\\\\\\\#' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP extra-in-child.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: test/01c-user-updates.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: test/01c-user-updates.js\\n' ],
      [ 'line', '# Subtest: update profile\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: update profile\\n' ],
          [ 'line', 'ok 1 - should be equivalent\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, name: 'should be equivalent' } ],
          [ 'line', 'ok 2 - should be equivalent\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'should be equivalent' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - should be equivalent\\n' ],
      [ 'line', '    ok 2 - should be equivalent\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - update profile # time=43.094ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 43.094, name: 'update profile' } ],
      [ 'line', '# Subtest: update email\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: update email\\n' ],
          [ 'line', 'ok 1 - should be equivalent\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, name: 'should be equivalent' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', "null { _id: 'org.couchdb.user:user',\\n" ],
      [ 'extra', "null { _id: 'org.couchdb.user:user',\\n" ],
      [ 'line', "  _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n" ],
      [ 'extra', "  _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n" ],
      [ 'line', "  password_scheme: 'pbkdf2',\\n" ],
      [ 'extra', "  password_scheme: 'pbkdf2',\\n" ],
      [ 'line', '  iterations: 10,\\n' ],
      [ 'extra', '  iterations: 10,\\n' ],
      [ 'line', "  name: 'user',\\n" ],
      [ 'extra', "  name: 'user',\\n" ],
      [ 'line', "  email: 'new@email.com',\\n" ],
      [ 'extra', "  email: 'new@email.com',\\n" ],
      [ 'line', "  type: 'user',\\n" ],
      [ 'extra', "  type: 'user',\\n" ],
      [ 'line', '  roles: [],\\n' ],
      [ 'extra', '  roles: [],\\n' ],
      [ 'line', "  date: '2015-05-07T18:04:07.589Z',\\n" ],
      [ 'extra', "  date: '2015-05-07T18:04:07.589Z',\\n" ],
      [ 'line',
        "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
      [ 'extra',
        "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
      [ 'line', "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
      [ 'extra', "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
      [ 'line', "  github: 'user',\\n" ],
      [ 'extra', "  github: 'user',\\n" ],
      [ 'line', "  homepage: 'http://www.user.com' }\\n" ],
      [ 'extra', "  homepage: 'http://www.user.com' }\\n" ],
      [ 'line', "{ _id: 'org.couchdb.user:user',\\n" ],
      [ 'extra', "{ _id: 'org.couchdb.user:user',\\n" ],
      [ 'line', "  _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n" ],
      [ 'extra', "  _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n" ],
      [ 'line', "  password_scheme: 'pbkdf2',\\n" ],
      [ 'extra', "  password_scheme: 'pbkdf2',\\n" ],
      [ 'line', '  iterations: 10,\\n' ],
      [ 'extra', '  iterations: 10,\\n' ],
      [ 'line', "  name: 'user',\\n" ],
      [ 'extra', "  name: 'user',\\n" ],
      [ 'line', "  email: 'new@email.com',\\n" ],
      [ 'extra', "  email: 'new@email.com',\\n" ],
      [ 'line', "  type: 'user',\\n" ],
      [ 'extra', "  type: 'user',\\n" ],
      [ 'line', '  roles: [],\\n' ],
      [ 'extra', '  roles: [],\\n' ],
      [ 'line', "  date: '2015-05-07T18:04:07.589Z',\\n" ],
      [ 'extra', "  date: '2015-05-07T18:04:07.589Z',\\n" ],
      [ 'line',
        "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
      [ 'extra',
        "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
      [ 'line', "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
      [ 'extra', "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
      [ 'line', "  github: 'user',\\n" ],
      [ 'extra', "  github: 'user',\\n" ],
      [ 'line', "  homepage: 'http://www.user.com' }\\n" ],
      [ 'extra', "  homepage: 'http://www.user.com' }\\n" ],
      [ 'line', '    ok 1 - should be equivalent\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 2 - update email # time=24.16ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 24.16, name: 'update email' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# time=174.236ms\\n' ],
      [ 'comment', '# time=174.236ms\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: update profile\\n' ],
  [ 'line', '        ok 1 - should be equivalent\\n' ],
  [ 'line', '        ok 2 - should be equivalent\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - update profile # time=43.094ms\\n' ],
  [ 'line', '    # Subtest: update email\\n' ],
  [ 'line', "    null { _id: 'org.couchdb.user:user',\\n" ],
  [ 'line',
    "      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n" ],
  [ 'line', "      password_scheme: 'pbkdf2',\\n" ],
  [ 'line', '      iterations: 10,\\n' ],
  [ 'line', "      name: 'user',\\n" ],
  [ 'line', "      email: 'new@email.com',\\n" ],
  [ 'line', "      type: 'user',\\n" ],
  [ 'line', '      roles: [],\\n' ],
  [ 'line', "      date: '2015-05-07T18:04:07.589Z',\\n" ],
  [ 'line',
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
  [ 'line', "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
  [ 'line', "      github: 'user',\\n" ],
  [ 'line', "      homepage: 'http://www.user.com' }\\n" ],
  [ 'line', "    { _id: 'org.couchdb.user:user',\\n" ],
  [ 'line',
    "      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n" ],
  [ 'line', "      password_scheme: 'pbkdf2',\\n" ],
  [ 'line', '      iterations: 10,\\n' ],
  [ 'line', "      name: 'user',\\n" ],
  [ 'line', "      email: 'new@email.com',\\n" ],
  [ 'line', "      type: 'user',\\n" ],
  [ 'line', '      roles: [],\\n' ],
  [ 'line', "      date: '2015-05-07T18:04:07.589Z',\\n" ],
  [ 'line',
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
  [ 'line', "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
  [ 'line', "      github: 'user',\\n" ],
  [ 'line', "      homepage: 'http://www.user.com' }\\n" ],
  [ 'line', '        ok 1 - should be equivalent\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 2 - update email # time=24.16ms\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # time=174.236ms\\n' ],
  [ 'line', 'ok 1 - test/01c-user-updates.js # time=339.14ms\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      time: 339.14,
      name: 'test/01c-user-updates.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# time=343.487ms\\n' ],
  [ 'comment', '# time=343.487ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP extra-in-child.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: test/01c-user-updates.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: test/01c-user-updates.js\\n' ],
      [ 'line', '# Subtest: update profile\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: update profile\\n' ],
          [ 'line', 'ok 1 - should be equivalent\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, name: 'should be equivalent' } ],
          [ 'line', 'ok 2 - should be equivalent\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'should be equivalent' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - should be equivalent\\n' ],
      [ 'line', '    ok 2 - should be equivalent\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - update profile # time=43.094ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 43.094, name: 'update profile' } ],
      [ 'line', '# Subtest: update email\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: update email\\n' ],
          [ 'line', 'ok 1 - should be equivalent\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, name: 'should be equivalent' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', "null { _id: 'org.couchdb.user:user',\\n" ],
      [ 'extra', "null { _id: 'org.couchdb.user:user',\\n" ],
      [ 'line', "  _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n" ],
      [ 'extra', "  _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n" ],
      [ 'line', "  password_scheme: 'pbkdf2',\\n" ],
      [ 'extra', "  password_scheme: 'pbkdf2',\\n" ],
      [ 'line', '  iterations: 10,\\n' ],
      [ 'extra', '  iterations: 10,\\n' ],
      [ 'line', "  name: 'user',\\n" ],
      [ 'extra', "  name: 'user',\\n" ],
      [ 'line', "  email: 'new@email.com',\\n" ],
      [ 'extra', "  email: 'new@email.com',\\n" ],
      [ 'line', "  type: 'user',\\n" ],
      [ 'extra', "  type: 'user',\\n" ],
      [ 'line', '  roles: [],\\n' ],
      [ 'extra', '  roles: [],\\n' ],
      [ 'line', "  date: '2015-05-07T18:04:07.589Z',\\n" ],
      [ 'extra', "  date: '2015-05-07T18:04:07.589Z',\\n" ],
      [ 'line',
        "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
      [ 'extra',
        "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
      [ 'line', "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
      [ 'extra', "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
      [ 'line', "  github: 'user',\\n" ],
      [ 'extra', "  github: 'user',\\n" ],
      [ 'line', "  homepage: 'http://www.user.com' }\\n" ],
      [ 'extra', "  homepage: 'http://www.user.com' }\\n" ],
      [ 'line', "{ _id: 'org.couchdb.user:user',\\n" ],
      [ 'extra', "{ _id: 'org.couchdb.user:user',\\n" ],
      [ 'line', "  _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n" ],
      [ 'extra', "  _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n" ],
      [ 'line', "  password_scheme: 'pbkdf2',\\n" ],
      [ 'extra', "  password_scheme: 'pbkdf2',\\n" ],
      [ 'line', '  iterations: 10,\\n' ],
      [ 'extra', '  iterations: 10,\\n' ],
      [ 'line', "  name: 'user',\\n" ],
      [ 'extra', "  name: 'user',\\n" ],
      [ 'line', "  email: 'new@email.com',\\n" ],
      [ 'extra', "  email: 'new@email.com',\\n" ],
      [ 'line', "  type: 'user',\\n" ],
      [ 'extra', "  type: 'user',\\n" ],
      [ 'line', '  roles: [],\\n' ],
      [ 'extra', '  roles: [],\\n' ],
      [ 'line', "  date: '2015-05-07T18:04:07.589Z',\\n" ],
      [ 'extra', "  date: '2015-05-07T18:04:07.589Z',\\n" ],
      [ 'line',
        "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
      [ 'extra',
        "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
      [ 'line', "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
      [ 'extra', "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
      [ 'line', "  github: 'user',\\n" ],
      [ 'extra', "  github: 'user',\\n" ],
      [ 'line', "  homepage: 'http://www.user.com' }\\n" ],
      [ 'extra', "  homepage: 'http://www.user.com' }\\n" ],
      [ 'line', '    ok 1 - should be equivalent\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 2 - update email # time=24.16ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 24.16, name: 'update email' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# time=174.236ms\\n' ],
      [ 'comment', '# time=174.236ms\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: update profile\\n' ],
  [ 'line', '        ok 1 - should be equivalent\\n' ],
  [ 'line', '        ok 2 - should be equivalent\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - update profile # time=43.094ms\\n' ],
  [ 'line', '    # Subtest: update email\\n' ],
  [ 'line', "    null { _id: 'org.couchdb.user:user',\\n" ],
  [ 'line',
    "      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n" ],
  [ 'line', "      password_scheme: 'pbkdf2',\\n" ],
  [ 'line', '      iterations: 10,\\n' ],
  [ 'line', "      name: 'user',\\n" ],
  [ 'line', "      email: 'new@email.com',\\n" ],
  [ 'line', "      type: 'user',\\n" ],
  [ 'line', '      roles: [],\\n' ],
  [ 'line', "      date: '2015-05-07T18:04:07.589Z',\\n" ],
  [ 'line',
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
  [ 'line', "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
  [ 'line', "      github: 'user',\\n" ],
  [ 'line', "      homepage: 'http://www.user.com' }\\n" ],
  [ 'line', "    { _id: 'org.couchdb.user:user',\\n" ],
  [ 'line',
    "      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n" ],
  [ 'line', "      password_scheme: 'pbkdf2',\\n" ],
  [ 'line', '      iterations: 10,\\n' ],
  [ 'line', "      name: 'user',\\n" ],
  [ 'line', "      email: 'new@email.com',\\n" ],
  [ 'line', "      type: 'user',\\n" ],
  [ 'line', '      roles: [],\\n' ],
  [ 'line', "      date: '2015-05-07T18:04:07.589Z',\\n" ],
  [ 'line',
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n" ],
  [ 'line', "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n" ],
  [ 'line', "      github: 'user',\\n" ],
  [ 'line', "      homepage: 'http://www.user.com' }\\n" ],
  [ 'line', '        ok 1 - should be equivalent\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 2 - update email # time=24.16ms\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # time=174.236ms\\n' ],
  [ 'line', 'ok 1 - test/01c-user-updates.js # time=339.14ms\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      time: 339.14,
      name: 'test/01c-user-updates.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# time=343.487ms\\n' ],
  [ 'comment', '# time=343.487ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP fail-right-before-indented-child-diag.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', '  ...\\n' ],
  [ 'extra', '  ...\\n' ],
  [ 'line', '  some: diags\\n' ],
  [ 'extra', '  some: diags\\n' ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ Result { ok: false, id: 1 } ] } ] ]
`

exports[`test/parser.js TAP fail-right-before-indented-child-diag.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', '  ...\\n' ],
  [ 'extra', '  ...\\n' ],
  [ 'line', '  some: diags\\n' ],
  [ 'extra', '  some: diags\\n' ],
  [ 'extra', '  ---\\n' ],
  [ 'line', '# Subtest: maybe a child\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: maybe a child\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'line', 'ok maybe a child\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'maybe a child' } ],
  [ 'line', '# test count(2) != plan(null)\\n' ],
  [ 'comment', '# test count(2) != plan(null)\\n' ],
  [ 'line', '# failed 2 of 2 tests\\n' ],
  [ 'comment', '# failed 2 of 2 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 2,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ Result { ok: false, id: 1 }, { tapError: 'no plan' } ] } ] ]
`

exports[`test/parser.js TAP fail-right-before-indented-child.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ Result { ok: false, id: 1 } ] } ] ]
`

exports[`test/parser.js TAP fail-right-before-indented-child.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', '# Subtest: maybe a child\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: maybe a child\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'line', 'ok maybe a child\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'maybe a child' } ],
  [ 'line', '# test count(2) != plan(null)\\n' ],
  [ 'comment', '# test count(2) != plan(null)\\n' ],
  [ 'line', '# failed 2 of 2 tests\\n' ],
  [ 'comment', '# failed 2 of 2 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 2,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ Result { ok: false, id: 1 }, { tapError: 'no plan' } ] } ] ]
`

exports[`test/parser.js TAP garbage-yamlish.tap > output bail=true 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok 1 de-indenting the yamlish wrongly.\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line',
    \`  message: "Failed with error 'hostname peebles.example.com not found'"\\n\` ],
  [ 'line', '  severity: fail\\n' ],
  [ 'assert',
    Result { ok: false, id: 1, name: 'de-indenting the yamlish wrongly.' } ],
  [ 'line', 'Bail out! # de-indenting the yamlish wrongly.\\n' ],
  [ 'bailout', '# de-indenting the yamlish wrongly.' ],
  [ 'line', ' this is not valid yamlish\\n' ],
  [ 'extra', ' this is not valid yamlish\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# de-indenting the yamlish wrongly.',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result { ok: false, id: 1, name: 'de-indenting the yamlish wrongly.' } ] } ] ]
`

exports[`test/parser.js TAP garbage-yamlish.tap > output bail=false 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok 1 de-indenting the yamlish wrongly.\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line',
    \`  message: "Failed with error 'hostname peebles.example.com not found'"\\n\` ],
  [ 'line', '  severity: fail\\n' ],
  [ 'assert',
    Result { ok: false, id: 1, name: 'de-indenting the yamlish wrongly.' } ],
  [ 'extra',
    \`  ---\\n  message: "Failed with error 'hostname peebles.example.com not found'"\\n  severity: fail\\n\` ],
  [ 'line', ' this is not valid yamlish\\n' ],
  [ 'extra', ' this is not valid yamlish\\n' ],
  [ 'line', 'ok 2 But this is not garbage\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'But this is not garbage' } ],
  [ 'line', 'not ok 3 truncating the yamlish\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  here: is some yaml\\n' ],
  [ 'line', '  i: guess\\n' ],
  [ 'assert',
    Result { ok: false, id: 3, name: 'truncating the yamlish' } ],
  [ 'extra', '  ---\\n  here: is some yaml\\n  i: guess\\n' ],
  [ 'line', 'not ok 4 this is truncated weirdly\\n' ],
  [ 'assert',
    Result { ok: false, id: 4, name: 'this is truncated weirdly' } ],
  [ 'line', '     not ok 99 this is not a child test\\n' ],
  [ 'extra', '     not ok 99 this is not a child test\\n' ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# failed 3 of 4 tests\\n' ],
  [ 'comment', '# failed 3 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 1,
      fail: 3,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result { ok: false, id: 1, name: 'de-indenting the yamlish wrongly.' },
         Result { ok: false, id: 3, name: 'truncating the yamlish' },
         Result { ok: false, id: 4, name: 'this is truncated weirdly' } ] } ] ]
`

exports[`test/parser.js TAP giving-up.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..573\\n' ],
  [ 'plan', { start: 1, end: 573 } ],
  [ 'line', 'not ok 1 - database handle\\n' ],
  [ 'assert',
    Result { ok: false, id: 1, name: 'database handle' } ],
  [ 'line', "Bail out! Couldn't connect to database.\\n" ],
  [ 'bailout', "Couldn't connect to database." ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: "Couldn't connect to database.",
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 573, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 1, name: 'database handle' } ] } ] ]
`

exports[`test/parser.js TAP giving-up.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..573\\n' ],
  [ 'plan', { start: 1, end: 573 } ],
  [ 'line', 'not ok 1 - database handle\\n' ],
  [ 'assert',
    Result { ok: false, id: 1, name: 'database handle' } ],
  [ 'line', "Bail out! Couldn't connect to database.\\n" ],
  [ 'bailout', "Couldn't connect to database." ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: "Couldn't connect to database.",
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 573, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 1, name: 'database handle' } ] } ] ]
`

exports[`test/parser.js TAP got-spare-tuits.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', 'ok 1 - Creating test program\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'Creating test program' } ],
  [ 'line', 'ok 2 - Test program runs, no error\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Test program runs, no error' } ],
  [ 'line',
    'not ok 3 - infinite loop # TODO halting problem unsolved\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 3,
      todo: 'halting problem unsolved',
      name: 'infinite loop' } ],
  [ 'line',
    'not ok 4 - infinite loop 2 # TODO halting problem unsolved\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 4,
      todo: 'halting problem unsolved',
      name: 'infinite loop 2' } ],
  [ 'line', '# todo: 2\\n' ],
  [ 'comment', '# todo: 2\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 2,
      fail: 2,
      bailout: false,
      todo: 2,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP got-spare-tuits.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', 'ok 1 - Creating test program\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'Creating test program' } ],
  [ 'line', 'ok 2 - Test program runs, no error\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Test program runs, no error' } ],
  [ 'line',
    'not ok 3 - infinite loop # TODO halting problem unsolved\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 3,
      todo: 'halting problem unsolved',
      name: 'infinite loop' } ],
  [ 'line',
    'not ok 4 - infinite loop 2 # TODO halting problem unsolved\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 4,
      todo: 'halting problem unsolved',
      name: 'infinite loop 2' } ],
  [ 'line', '# todo: 2\\n' ],
  [ 'comment', '# todo: 2\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 2,
      fail: 2,
      bailout: false,
      todo: 2,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP head_end.tap > output bail=true 1`] = `
[ [ 'line', '# comments\\n' ],
  [ 'comment', '# comments\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '# comment\\n' ],
  [ 'comment', '# comment\\n' ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# more ignored stuff\\n' ],
  [ 'comment', '# more ignored stuff\\n' ],
  [ 'line', '# and yet more\\n' ],
  [ 'comment', '# and yet more\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP head_end.tap > output bail=false 1`] = `
[ [ 'line', '# comments\\n' ],
  [ 'comment', '# comments\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '# comment\\n' ],
  [ 'comment', '# comment\\n' ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# more ignored stuff\\n' ],
  [ 'comment', '# more ignored stuff\\n' ],
  [ 'line', '# and yet more\\n' ],
  [ 'comment', '# and yet more\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP head_fail.tap > output bail=true 1`] = `
[ [ 'line', '# comments\\n' ],
  [ 'comment', '# comments\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'not ok 2\\n' ],
  [ 'assert', Result { ok: false, id: 2 } ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 1,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ Result { ok: false, id: 2 } ] } ] ]
`

exports[`test/parser.js TAP head_fail.tap > output bail=false 1`] = `
[ [ 'line', '# comments\\n' ],
  [ 'comment', '# comments\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'not ok 2\\n' ],
  [ 'assert', Result { ok: false, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '# comment\\n' ],
  [ 'comment', '# comment\\n' ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# more ignored stuff\\n' ],
  [ 'comment', '# more ignored stuff\\n' ],
  [ 'line', '# and yet more\\n' ],
  [ 'comment', '# and yet more\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 3,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 2 } ] } ] ]
`

exports[`test/parser.js TAP implicit-counter.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# before 1\\n' ],
  [ 'comment', '# before 1\\n' ],
  [ 'line', 'ok one\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'one' } ],
  [ 'line', 'ok two\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'two' } ],
  [ 'line', '# before 3\\n' ],
  [ 'comment', '# before 3\\n' ],
  [ 'line', 'ok three\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'three' } ],
  [ 'line', 'ok four\\n' ],
  [ 'assert', Result { ok: true, id: 4, name: 'four' } ],
  [ 'line', '# after 4\\n' ],
  [ 'comment', '# after 4\\n' ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP implicit-counter.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# before 1\\n' ],
  [ 'comment', '# before 1\\n' ],
  [ 'line', 'ok one\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'one' } ],
  [ 'line', 'ok two\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'two' } ],
  [ 'line', '# before 3\\n' ],
  [ 'comment', '# before 3\\n' ],
  [ 'line', 'ok three\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'three' } ],
  [ 'line', 'ok four\\n' ],
  [ 'assert', Result { ok: true, id: 4, name: 'four' } ],
  [ 'line', '# after 4\\n' ],
  [ 'comment', '# after 4\\n' ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP indent.tap > output bail=true 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# nesting\\n' ],
  [ 'comment', '# nesting\\n' ],
  [ 'line', '# Subtest: first\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: first\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', 'ok 1 - true is ok # time=1.234ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 1.234, name: 'true is ok' } ],
      [ 'line', 'ok 2 - doag is also okay # time=1.234ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 1.234, name: 'doag is also okay' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    ok 1 - true is ok # time=1.234ms\\n' ],
  [ 'line', '    ok 2 - doag is also okay # time=1.234ms\\n' ],
  [ 'line', 'ok 1 - first # time=2.589ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 2.589, name: 'first' } ],
  [ 'line', '# Subtest: second\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: second\\n' ],
      [ 'line', 'ok 1 - no plan # time=1.001ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 1.001, name: 'no plan' } ],
      [ 'line', '# Subtest: this passes\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: this passes\\n' ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'line', 'not ok granddaughter # SKIP for no raisin\\n' ],
          [ 'assert',
            Result { ok: false, id: 1, skip: 'for no raisin', name: 'granddaughter' } ],
          [ 'line', 'ok grandson # time=1.001s\\n' ],
          [ 'line', '  ---\\n' ],
          [ 'line', '  ok: 1\\n' ],
          [ 'line', '  this: is not tap\\n' ],
          [ 'line', '  it: is yaml\\n' ],
          [ 'line', '  ...\\n' ],
          [ 'assert',
            Result {
              ok: true,
              id: 2,
              time: 1001,
              name: 'grandson',
              diag: { ok: 1, this: 'is not tap', it: 'is yaml' } } ],
          [ 'line', 'not ok grandchild # TODO\\n' ],
          [ 'line', '  ---\\n' ],
          [ 'line', '  ok: 1\\n' ],
          [ 'line', '  this: is not tap or yaml\\n' ],
          [ 'line', '  it: is garbage\\n' ],
          [ 'assert',
            Result { ok: false, id: 3, todo: true, name: 'grandchild' } ],
          [ 'extra',
            '  ---\\n  ok: 1\\n  this: is not tap or yaml\\n  it: is garbage\\n' ],
          [ 'line', '# todo: 1\\n' ],
          [ 'comment', '# todo: 1\\n' ],
          [ 'line', '# skip: 1\\n' ],
          [ 'comment', '# skip: 1\\n' ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 1,
              fail: 2,
              bailout: false,
              todo: 1,
              skip: 1,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..3\\n' ],
      [ 'line', '    not ok granddaughter # SKIP for no raisin\\n' ],
      [ 'line', '    ok grandson # time=1.001s\\n' ],
      [ 'line', '      ---\\n' ],
      [ 'line', '      ok: 1\\n' ],
      [ 'line', '      this: is not tap\\n' ],
      [ 'line', '      it: is yaml\\n' ],
      [ 'line', '      ...\\n' ],
      [ 'line', '    not ok grandchild # TODO\\n' ],
      [ 'line', '      ---\\n' ],
      [ 'line', '      ok: 1\\n' ],
      [ 'line', '      this: is not tap or yaml\\n' ],
      [ 'line', '      it: is garbage\\n' ],
      [ 'line', '    # todo: 1\\n' ],
      [ 'line', '    # skip: 1\\n' ],
      [ 'line', 'ok 2 - this passes # time=1.200s\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 1200, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - no plan # time=1.001ms\\n' ],
  [ 'line', '    # Subtest: this passes\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line',
    '        not ok granddaughter # SKIP for no raisin\\n' ],
  [ 'line', '        ok grandson # time=1.001s\\n' ],
  [ 'line', '          ---\\n' ],
  [ 'line', '          ok: 1\\n' ],
  [ 'line', '          this: is not tap\\n' ],
  [ 'line', '          it: is yaml\\n' ],
  [ 'line', '          ...\\n' ],
  [ 'line', '        not ok grandchild # TODO\\n' ],
  [ 'line', '          ---\\n' ],
  [ 'line', '          ok: 1\\n' ],
  [ 'line', '          this: is not tap or yaml\\n' ],
  [ 'line', '          it: is garbage\\n' ],
  [ 'line', '        # todo: 1\\n' ],
  [ 'line', '        # skip: 1\\n' ],
  [ 'line', '    ok 2 - this passes # time=1.200s\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 2 - second # time=1.200ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, time: 1.2, name: 'second' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP indent.tap > output bail=false 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# nesting\\n' ],
  [ 'comment', '# nesting\\n' ],
  [ 'line', '# Subtest: first\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: first\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', 'ok 1 - true is ok # time=1.234ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 1.234, name: 'true is ok' } ],
      [ 'line', 'ok 2 - doag is also okay # time=1.234ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 1.234, name: 'doag is also okay' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    ok 1 - true is ok # time=1.234ms\\n' ],
  [ 'line', '    ok 2 - doag is also okay # time=1.234ms\\n' ],
  [ 'line', 'ok 1 - first # time=2.589ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 2.589, name: 'first' } ],
  [ 'line', '# Subtest: second\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: second\\n' ],
      [ 'line', 'ok 1 - no plan # time=1.001ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 1.001, name: 'no plan' } ],
      [ 'line', '# Subtest: this passes\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: this passes\\n' ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'line', 'not ok granddaughter # SKIP for no raisin\\n' ],
          [ 'assert',
            Result { ok: false, id: 1, skip: 'for no raisin', name: 'granddaughter' } ],
          [ 'line', 'ok grandson # time=1.001s\\n' ],
          [ 'line', '  ---\\n' ],
          [ 'line', '  ok: 1\\n' ],
          [ 'line', '  this: is not tap\\n' ],
          [ 'line', '  it: is yaml\\n' ],
          [ 'line', '  ...\\n' ],
          [ 'assert',
            Result {
              ok: true,
              id: 2,
              time: 1001,
              name: 'grandson',
              diag: { ok: 1, this: 'is not tap', it: 'is yaml' } } ],
          [ 'line', 'not ok grandchild # TODO\\n' ],
          [ 'line', '  ---\\n' ],
          [ 'line', '  ok: 1\\n' ],
          [ 'line', '  this: is not tap or yaml\\n' ],
          [ 'line', '  it: is garbage\\n' ],
          [ 'assert',
            Result { ok: false, id: 3, todo: true, name: 'grandchild' } ],
          [ 'extra',
            '  ---\\n  ok: 1\\n  this: is not tap or yaml\\n  it: is garbage\\n' ],
          [ 'line', '# todo: 1\\n' ],
          [ 'comment', '# todo: 1\\n' ],
          [ 'line', '# skip: 1\\n' ],
          [ 'comment', '# skip: 1\\n' ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 1,
              fail: 2,
              bailout: false,
              todo: 1,
              skip: 1,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..3\\n' ],
      [ 'line', '    not ok granddaughter # SKIP for no raisin\\n' ],
      [ 'line', '    ok grandson # time=1.001s\\n' ],
      [ 'line', '      ---\\n' ],
      [ 'line', '      ok: 1\\n' ],
      [ 'line', '      this: is not tap\\n' ],
      [ 'line', '      it: is yaml\\n' ],
      [ 'line', '      ...\\n' ],
      [ 'line', '    not ok grandchild # TODO\\n' ],
      [ 'line', '      ---\\n' ],
      [ 'line', '      ok: 1\\n' ],
      [ 'line', '      this: is not tap or yaml\\n' ],
      [ 'line', '      it: is garbage\\n' ],
      [ 'line', '    # todo: 1\\n' ],
      [ 'line', '    # skip: 1\\n' ],
      [ 'line', 'ok 2 - this passes # time=1.200s\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 1200, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - no plan # time=1.001ms\\n' ],
  [ 'line', '    # Subtest: this passes\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line',
    '        not ok granddaughter # SKIP for no raisin\\n' ],
  [ 'line', '        ok grandson # time=1.001s\\n' ],
  [ 'line', '          ---\\n' ],
  [ 'line', '          ok: 1\\n' ],
  [ 'line', '          this: is not tap\\n' ],
  [ 'line', '          it: is yaml\\n' ],
  [ 'line', '          ...\\n' ],
  [ 'line', '        not ok grandchild # TODO\\n' ],
  [ 'line', '          ---\\n' ],
  [ 'line', '          ok: 1\\n' ],
  [ 'line', '          this: is not tap or yaml\\n' ],
  [ 'line', '          it: is garbage\\n' ],
  [ 'line', '        # todo: 1\\n' ],
  [ 'line', '        # skip: 1\\n' ],
  [ 'line', '    ok 2 - this passes # time=1.200s\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 2 - second # time=1.200ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, time: 1.2, name: 'second' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP indented-stdout-noise.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: index.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: index.js\\n' ],
      [ 'line', '# Subtest: boom\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: boom\\n' ],
          [ 'line', '# Subtest: npm install package line\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: npm install package line\\n' ],
              [ 'line', '$ npm install package\\n' ],
              [ 'extra', '$ npm install package\\n' ],
              [ 'line',
                "var package = require('package')(); // contains package.json data.\\n" ],
              [ 'extra',
                "var package = require('package')(); // contains package.json data.\\n" ],
              [ 'line', 'var yourAwesomeModule = {};\\n' ],
              [ 'extra', 'var yourAwesomeModule = {};\\n' ],
              [ 'line', 'yourAwesomeModule.version = package.version;\\n' ],
              [ 'extra', 'yourAwesomeModule.version = package.version;\\n' ],
              [ 'line', '1..0 # no tests found\\n' ],
              [ 'plan', { start: 1, end: 0, comment: 'no tests found' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 0,
                  pass: 0,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan {
                     start: 1,
                     end: 0,
                     skipAll: true,
                     skipReason: 'no tests found',
                     comment: 'no tests found' },
                  failures: [] } ] ] ],
          [ 'line', '    $ npm install package\\n' ],
          [ 'line',
            "    var package = require('package')(); // contains package.json data.\\n" ],
          [ 'line', '    var yourAwesomeModule = {};\\n' ],
          [ 'line', '    yourAwesomeModule.version = package.version;\\n' ],
          [ 'line', '1..0\\n' ],
          [ 'extra', '1..0\\n' ],
          [ 'line', '    1..0 # no tests found\\n' ],
          [ 'line', '1..0 # no tests found\\n' ],
          [ 'plan', { start: 1, end: 0, comment: 'no tests found' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 0,
              pass: 0,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan {
                 start: 1,
                 end: 0,
                 skipAll: true,
                 skipReason: 'no tests found',
                 comment: 'no tests found' },
              failures: [] } ] ] ],
      [ 'line', '# package - Easy package.json exports.\\n' ],
      [ 'comment', '# package - Easy package.json exports.\\n' ],
      [ 'line', '## Intro\\n' ],
      [ 'comment', '## Intro\\n' ],
      [ 'line',
        'This module provides an easy way to export package.json data.\\n' ],
      [ 'extra',
        'This module provides an easy way to export package.json data.\\n' ],
      [ 'line',
        'It contains auto-discovery functionality, which means that it will\\n' ],
      [ 'extra',
        'It contains auto-discovery functionality, which means that it will\\n' ],
      [ 'line',
        'find your package.json file automatically. Cool, ugh?\\n' ],
      [ 'extra',
        'find your package.json file automatically. Cool, ugh?\\n' ],
      [ 'line', '## Installation\\n' ],
      [ 'comment', '## Installation\\n' ],
      [ 'line', '    # Subtest: npm install package line\\n' ],
      [ 'line', '        $ npm install package\\n' ],
      [ 'line', '## Usage\\n' ],
      [ 'comment', '## Usage\\n' ],
      [ 'line',
        "        var package = require('package')(); // contains package.json data.\\n" ],
      [ 'line', '        var yourAwesomeModule = {};\\n' ],
      [ 'line',
        '        yourAwesomeModule.version = package.version;\\n' ],
      [ 'line', '## Contribution\\n' ],
      [ 'comment', '## Contribution\\n' ],
      [ 'line', 'Bug fixes and features are welcomed.\\n' ],
      [ 'extra', 'Bug fixes and features are welcomed.\\n' ],
      [ 'line', '## Other similar modules\\n' ],
      [ 'comment', '## Other similar modules\\n' ],
      [ 'line',
        '- pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n' ],
      [ 'extra',
        '- pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n' ],
      [ 'line', '- JSON.parse + fs.readFile\\n' ],
      [ 'extra', '- JSON.parse + fs.readFile\\n' ],
      [ 'line', '## License\\n' ],
      [ 'comment', '## License\\n' ],
      [ 'line', 'MIT License\\n' ],
      [ 'extra', 'MIT License\\n' ],
      [ 'line', 'Copyright (C) 2011 Veselin Todorov\\n' ],
      [ 'extra', 'Copyright (C) 2011 Veselin Todorov\\n' ],
      [ 'line',
        'Permission is hereby granted, free of charge, to any person obtaining a copy of\\n' ],
      [ 'extra',
        'Permission is hereby granted, free of charge, to any person obtaining a copy of\\n' ],
      [ 'line',
        'this software and associated documentation files (the "Software"), to deal in\\n' ],
      [ 'extra',
        'this software and associated documentation files (the "Software"), to deal in\\n' ],
      [ 'line',
        'the Software without restriction, including without limitation the rights to\\n' ],
      [ 'extra',
        'the Software without restriction, including without limitation the rights to\\n' ],
      [ 'line',
        'use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n' ],
      [ 'extra',
        'use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n' ],
      [ 'line',
        'of the Software, and to permit persons to whom the Software is furnished to do\\n' ],
      [ 'extra',
        'of the Software, and to permit persons to whom the Software is furnished to do\\n' ],
      [ 'line', 'so, subject to the following conditions:\\n' ],
      [ 'extra', 'so, subject to the following conditions:\\n' ],
      [ 'line',
        'The above copyright notice and this permission notice shall be included in all\\n' ],
      [ 'extra',
        'The above copyright notice and this permission notice shall be included in all\\n' ],
      [ 'line', 'copies or substantial portions of the Software.\\n' ],
      [ 'extra', 'copies or substantial portions of the Software.\\n' ],
      [ 'line',
        'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n' ],
      [ 'extra',
        'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n' ],
      [ 'line',
        'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n' ],
      [ 'extra',
        'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n' ],
      [ 'line',
        'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n' ],
      [ 'extra',
        'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n' ],
      [ 'line',
        'AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n' ],
      [ 'extra',
        'AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n' ],
      [ 'line',
        'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n' ],
      [ 'extra',
        'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n' ],
      [ 'line',
        'OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n' ],
      [ 'extra',
        'OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n' ],
      [ 'line', 'SOFTWARE.\\n' ],
      [ 'extra', 'SOFTWARE.\\n' ],
      [ 'line', '    1..0\\n' ],
      [ 'line', '        1..0 # no tests found\\n' ],
      [ 'line', '    1..0 # no tests found\\n' ],
      [ 'line', 'ok 1 - boom # time=5.26ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 5.26, name: 'boom' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', '# time=12.555ms\\n' ],
      [ 'comment', '# time=12.555ms\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: boom\\n' ],
  [ 'line', '    # package - Easy package.json exports.\\n' ],
  [ 'line', '    ## Intro\\n' ],
  [ 'line',
    '    This module provides an easy way to export package.json data.\\n' ],
  [ 'line',
    '    It contains auto-discovery functionality, which means that it will\\n' ],
  [ 'line',
    '    find your package.json file automatically. Cool, ugh?\\n' ],
  [ 'line', '    ## Installation\\n' ],
  [ 'line', '        # Subtest: npm install package line\\n' ],
  [ 'line', '            $ npm install package\\n' ],
  [ 'line', '    ## Usage\\n' ],
  [ 'line',
    "            var package = require('package')(); // contains package.json data.\\n" ],
  [ 'line', '            var yourAwesomeModule = {};\\n' ],
  [ 'line',
    '            yourAwesomeModule.version = package.version;\\n' ],
  [ 'line', '    ## Contribution\\n' ],
  [ 'line', '    Bug fixes and features are welcomed.\\n' ],
  [ 'line', '    ## Other similar modules\\n' ],
  [ 'line',
    '    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n' ],
  [ 'line', '    - JSON.parse + fs.readFile\\n' ],
  [ 'line', '    ## License\\n' ],
  [ 'line', '    MIT License\\n' ],
  [ 'line', '    Copyright (C) 2011 Veselin Todorov\\n' ],
  [ 'line',
    '    Permission is hereby granted, free of charge, to any person obtaining a copy of\\n' ],
  [ 'line',
    '    this software and associated documentation files (the "Software"), to deal in\\n' ],
  [ 'line',
    '    the Software without restriction, including without limitation the rights to\\n' ],
  [ 'line',
    '    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n' ],
  [ 'line',
    '    of the Software, and to permit persons to whom the Software is furnished to do\\n' ],
  [ 'line', '    so, subject to the following conditions:\\n' ],
  [ 'line',
    '    The above copyright notice and this permission notice shall be included in all\\n' ],
  [ 'line',
    '    copies or substantial portions of the Software.\\n' ],
  [ 'line',
    '    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n' ],
  [ 'line',
    '    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n' ],
  [ 'line',
    '    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n' ],
  [ 'line',
    '    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n' ],
  [ 'line',
    '    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n' ],
  [ 'line',
    '    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n' ],
  [ 'line', '    SOFTWARE.\\n' ],
  [ 'line', '        1..0\\n' ],
  [ 'line', '            1..0 # no tests found\\n' ],
  [ 'line', '        1..0 # no tests found\\n' ],
  [ 'line', '    ok 1 - boom # time=5.26ms\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    # time=12.555ms\\n' ],
  [ 'line', 'not ok 1 - index.js # time=201.609ms\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  arguments:\\n' ],
  [ 'line', '    - index.js\\n' ],
  [ 'line', '  timeout: 30000\\n' ],
  [ 'line', '  results:\\n' ],
  [ 'line', '    ok: false\\n' ],
  [ 'line', '    count: 1\\n' ],
  [ 'line', '    pass: 1\\n' ],
  [ 'line', '    plan:\\n' ],
  [ 'line', '      start: 1\\n' ],
  [ 'line', '      end: 1\\n' ],
  [ 'line', '  command: /usr/local/bin/iojs\\n' ],
  [ 'line', '  file: index.js\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      time: 201.609,
      name: 'index.js',
      diag:
       { arguments: [ 'index.js' ],
         timeout: 30000,
         results: { ok: false, count: 1, pass: 1, plan: { start: 1, end: 1 } },
         command: '/usr/local/bin/iojs',
         file: 'index.js' } } ],
  [ 'line', 'Bail out! # index.js\\n' ],
  [ 'bailout', '# index.js' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# index.js',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           time: 201.609,
           name: 'index.js',
           diag:
            { arguments: [ 'index.js' ],
              timeout: 30000,
              results: { ok: false, count: 1, pass: 1, plan: { start: 1, end: 1 } },
              command: '/usr/local/bin/iojs',
              file: 'index.js' } } ] } ] ]
`

exports[`test/parser.js TAP indented-stdout-noise.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: index.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: index.js\\n' ],
      [ 'line', '# Subtest: boom\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: boom\\n' ],
          [ 'line', '# Subtest: npm install package line\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: npm install package line\\n' ],
              [ 'line', '$ npm install package\\n' ],
              [ 'extra', '$ npm install package\\n' ],
              [ 'line',
                "var package = require('package')(); // contains package.json data.\\n" ],
              [ 'extra',
                "var package = require('package')(); // contains package.json data.\\n" ],
              [ 'line', 'var yourAwesomeModule = {};\\n' ],
              [ 'extra', 'var yourAwesomeModule = {};\\n' ],
              [ 'line', 'yourAwesomeModule.version = package.version;\\n' ],
              [ 'extra', 'yourAwesomeModule.version = package.version;\\n' ],
              [ 'line', '1..0 # no tests found\\n' ],
              [ 'plan', { start: 1, end: 0, comment: 'no tests found' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 0,
                  pass: 0,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan {
                     start: 1,
                     end: 0,
                     skipAll: true,
                     skipReason: 'no tests found',
                     comment: 'no tests found' },
                  failures: [] } ] ] ],
          [ 'line', '    $ npm install package\\n' ],
          [ 'line',
            "    var package = require('package')(); // contains package.json data.\\n" ],
          [ 'line', '    var yourAwesomeModule = {};\\n' ],
          [ 'line', '    yourAwesomeModule.version = package.version;\\n' ],
          [ 'line', '1..0\\n' ],
          [ 'extra', '1..0\\n' ],
          [ 'line', '    1..0 # no tests found\\n' ],
          [ 'line', '1..0 # no tests found\\n' ],
          [ 'plan', { start: 1, end: 0, comment: 'no tests found' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 0,
              pass: 0,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan {
                 start: 1,
                 end: 0,
                 skipAll: true,
                 skipReason: 'no tests found',
                 comment: 'no tests found' },
              failures: [] } ] ] ],
      [ 'line', '# package - Easy package.json exports.\\n' ],
      [ 'comment', '# package - Easy package.json exports.\\n' ],
      [ 'line', '## Intro\\n' ],
      [ 'comment', '## Intro\\n' ],
      [ 'line',
        'This module provides an easy way to export package.json data.\\n' ],
      [ 'extra',
        'This module provides an easy way to export package.json data.\\n' ],
      [ 'line',
        'It contains auto-discovery functionality, which means that it will\\n' ],
      [ 'extra',
        'It contains auto-discovery functionality, which means that it will\\n' ],
      [ 'line',
        'find your package.json file automatically. Cool, ugh?\\n' ],
      [ 'extra',
        'find your package.json file automatically. Cool, ugh?\\n' ],
      [ 'line', '## Installation\\n' ],
      [ 'comment', '## Installation\\n' ],
      [ 'line', '    # Subtest: npm install package line\\n' ],
      [ 'line', '        $ npm install package\\n' ],
      [ 'line', '## Usage\\n' ],
      [ 'comment', '## Usage\\n' ],
      [ 'line',
        "        var package = require('package')(); // contains package.json data.\\n" ],
      [ 'line', '        var yourAwesomeModule = {};\\n' ],
      [ 'line',
        '        yourAwesomeModule.version = package.version;\\n' ],
      [ 'line', '## Contribution\\n' ],
      [ 'comment', '## Contribution\\n' ],
      [ 'line', 'Bug fixes and features are welcomed.\\n' ],
      [ 'extra', 'Bug fixes and features are welcomed.\\n' ],
      [ 'line', '## Other similar modules\\n' ],
      [ 'comment', '## Other similar modules\\n' ],
      [ 'line',
        '- pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n' ],
      [ 'extra',
        '- pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n' ],
      [ 'line', '- JSON.parse + fs.readFile\\n' ],
      [ 'extra', '- JSON.parse + fs.readFile\\n' ],
      [ 'line', '## License\\n' ],
      [ 'comment', '## License\\n' ],
      [ 'line', 'MIT License\\n' ],
      [ 'extra', 'MIT License\\n' ],
      [ 'line', 'Copyright (C) 2011 Veselin Todorov\\n' ],
      [ 'extra', 'Copyright (C) 2011 Veselin Todorov\\n' ],
      [ 'line',
        'Permission is hereby granted, free of charge, to any person obtaining a copy of\\n' ],
      [ 'extra',
        'Permission is hereby granted, free of charge, to any person obtaining a copy of\\n' ],
      [ 'line',
        'this software and associated documentation files (the "Software"), to deal in\\n' ],
      [ 'extra',
        'this software and associated documentation files (the "Software"), to deal in\\n' ],
      [ 'line',
        'the Software without restriction, including without limitation the rights to\\n' ],
      [ 'extra',
        'the Software without restriction, including without limitation the rights to\\n' ],
      [ 'line',
        'use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n' ],
      [ 'extra',
        'use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n' ],
      [ 'line',
        'of the Software, and to permit persons to whom the Software is furnished to do\\n' ],
      [ 'extra',
        'of the Software, and to permit persons to whom the Software is furnished to do\\n' ],
      [ 'line', 'so, subject to the following conditions:\\n' ],
      [ 'extra', 'so, subject to the following conditions:\\n' ],
      [ 'line',
        'The above copyright notice and this permission notice shall be included in all\\n' ],
      [ 'extra',
        'The above copyright notice and this permission notice shall be included in all\\n' ],
      [ 'line', 'copies or substantial portions of the Software.\\n' ],
      [ 'extra', 'copies or substantial portions of the Software.\\n' ],
      [ 'line',
        'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n' ],
      [ 'extra',
        'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n' ],
      [ 'line',
        'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n' ],
      [ 'extra',
        'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n' ],
      [ 'line',
        'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n' ],
      [ 'extra',
        'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n' ],
      [ 'line',
        'AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n' ],
      [ 'extra',
        'AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n' ],
      [ 'line',
        'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n' ],
      [ 'extra',
        'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n' ],
      [ 'line',
        'OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n' ],
      [ 'extra',
        'OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n' ],
      [ 'line', 'SOFTWARE.\\n' ],
      [ 'extra', 'SOFTWARE.\\n' ],
      [ 'line', '    1..0\\n' ],
      [ 'line', '        1..0 # no tests found\\n' ],
      [ 'line', '    1..0 # no tests found\\n' ],
      [ 'line', 'ok 1 - boom # time=5.26ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 5.26, name: 'boom' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', '# time=12.555ms\\n' ],
      [ 'comment', '# time=12.555ms\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: boom\\n' ],
  [ 'line', '    # package - Easy package.json exports.\\n' ],
  [ 'line', '    ## Intro\\n' ],
  [ 'line',
    '    This module provides an easy way to export package.json data.\\n' ],
  [ 'line',
    '    It contains auto-discovery functionality, which means that it will\\n' ],
  [ 'line',
    '    find your package.json file automatically. Cool, ugh?\\n' ],
  [ 'line', '    ## Installation\\n' ],
  [ 'line', '        # Subtest: npm install package line\\n' ],
  [ 'line', '            $ npm install package\\n' ],
  [ 'line', '    ## Usage\\n' ],
  [ 'line',
    "            var package = require('package')(); // contains package.json data.\\n" ],
  [ 'line', '            var yourAwesomeModule = {};\\n' ],
  [ 'line',
    '            yourAwesomeModule.version = package.version;\\n' ],
  [ 'line', '    ## Contribution\\n' ],
  [ 'line', '    Bug fixes and features are welcomed.\\n' ],
  [ 'line', '    ## Other similar modules\\n' ],
  [ 'line',
    '    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n' ],
  [ 'line', '    - JSON.parse + fs.readFile\\n' ],
  [ 'line', '    ## License\\n' ],
  [ 'line', '    MIT License\\n' ],
  [ 'line', '    Copyright (C) 2011 Veselin Todorov\\n' ],
  [ 'line',
    '    Permission is hereby granted, free of charge, to any person obtaining a copy of\\n' ],
  [ 'line',
    '    this software and associated documentation files (the "Software"), to deal in\\n' ],
  [ 'line',
    '    the Software without restriction, including without limitation the rights to\\n' ],
  [ 'line',
    '    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n' ],
  [ 'line',
    '    of the Software, and to permit persons to whom the Software is furnished to do\\n' ],
  [ 'line', '    so, subject to the following conditions:\\n' ],
  [ 'line',
    '    The above copyright notice and this permission notice shall be included in all\\n' ],
  [ 'line',
    '    copies or substantial portions of the Software.\\n' ],
  [ 'line',
    '    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n' ],
  [ 'line',
    '    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n' ],
  [ 'line',
    '    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n' ],
  [ 'line',
    '    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n' ],
  [ 'line',
    '    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n' ],
  [ 'line',
    '    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n' ],
  [ 'line', '    SOFTWARE.\\n' ],
  [ 'line', '        1..0\\n' ],
  [ 'line', '            1..0 # no tests found\\n' ],
  [ 'line', '        1..0 # no tests found\\n' ],
  [ 'line', '    ok 1 - boom # time=5.26ms\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    # time=12.555ms\\n' ],
  [ 'line', 'not ok 1 - index.js # time=201.609ms\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  arguments:\\n' ],
  [ 'line', '    - index.js\\n' ],
  [ 'line', '  timeout: 30000\\n' ],
  [ 'line', '  results:\\n' ],
  [ 'line', '    ok: false\\n' ],
  [ 'line', '    count: 1\\n' ],
  [ 'line', '    pass: 1\\n' ],
  [ 'line', '    plan:\\n' ],
  [ 'line', '      start: 1\\n' ],
  [ 'line', '      end: 1\\n' ],
  [ 'line', '  command: /usr/local/bin/iojs\\n' ],
  [ 'line', '  file: index.js\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      time: 201.609,
      name: 'index.js',
      diag:
       { arguments: [ 'index.js' ],
         timeout: 30000,
         results: { ok: false, count: 1, pass: 1, plan: { start: 1, end: 1 } },
         command: '/usr/local/bin/iojs',
         file: 'index.js' } } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# failed 1 of 1 tests\\n' ],
  [ 'comment', '# failed 1 of 1 tests\\n' ],
  [ 'line', '# time=209.666ms\\n' ],
  [ 'comment', '# time=209.666ms\\n' ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           time: 201.609,
           name: 'index.js',
           diag:
            { arguments: [ 'index.js' ],
              timeout: 30000,
              results: { ok: false, count: 1, pass: 1, plan: { start: 1, end: 1 } },
              command: '/usr/local/bin/iojs',
              file: 'index.js' } } ] } ] ]
`

exports[`test/parser.js TAP junk_before_plan.tap > output bail=true 1`] = `
[ [ 'line', 'this is junk\\n' ],
  [ 'extra', 'this is junk\\n' ],
  [ 'line', '# this is a comment\\n' ],
  [ 'comment', '# this is a comment\\n' ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP junk_before_plan.tap > output bail=false 1`] = `
[ [ 'line', 'this is junk\\n' ],
  [ 'extra', 'this is junk\\n' ],
  [ 'line', '# this is a comment\\n' ],
  [ 'comment', '# this is a comment\\n' ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP line-break.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: foo\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: foo\\n' ],
      [ 'line', 'not ok 1 - should be equivalent\\n' ],
      [ 'line', '  ---\\n' ],
      [ 'line', '  found:\\n' ],
      [ 'line',
        '    - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\n' ],
      [ 'line', '  wanted:\\n' ],
      [ 'line', '    - >-\\n' ],
      [ 'line',
        '      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\n' ],
      [ 'line', '  \\n' ],
      [ 'line',
        '      yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\n' ],
      [ 'line', '  ...\\n' ],
      [ 'assert',
        Result {
          ok: false,
          id: 1,
          name: 'should be equivalent',
          diag:
           { found:
              [ 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy' ],
             wanted:
              [ 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy' ] } } ],
      [ 'line', 'Bail out! # should be equivalent\\n' ],
      [ 'bailout', '# should be equivalent' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: '# should be equivalent',
          todo: 0,
          skip: 0,
          plan:
           FinalPlan {
             start: null,
             end: null,
             skipAll: false,
             skipReason: '',
             comment: '' },
          failures:
           [ Result {
               ok: false,
               id: 1,
               name: 'should be equivalent',
               diag:
                { found:
                   [ 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy' ],
                  wanted:
                   [ 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy' ] } } ] } ] ] ],
  [ 'line', '    not ok 1 - should be equivalent\\n' ],
  [ 'line', '      ---\\n' ],
  [ 'line', '      found:\\n' ],
  [ 'line',
    '        - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\n' ],
  [ 'line', '      wanted:\\n' ],
  [ 'line', '        - >-\\n' ],
  [ 'line',
    '          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\n' ],
  [ 'line', '  \\n' ],
  [ 'line',
    '          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\n' ],
  [ 'line', '      ...\\n' ],
  [ 'line', '    Bail out! # should be equivalent\\n' ],
  [ 'bailout', '# should be equivalent' ],
  [ 'line', 'Bail out! # should be equivalent\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: '# should be equivalent',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP line-break.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: foo\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: foo\\n' ],
      [ 'line', 'not ok 1 - should be equivalent\\n' ],
      [ 'line', '  ---\\n' ],
      [ 'line', '  found:\\n' ],
      [ 'line',
        '    - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\n' ],
      [ 'line', '  wanted:\\n' ],
      [ 'line', '    - >-\\n' ],
      [ 'line',
        '      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\n' ],
      [ 'line', '  \\n' ],
      [ 'line',
        '      yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\n' ],
      [ 'line', '  ...\\n' ],
      [ 'assert',
        Result {
          ok: false,
          id: 1,
          name: 'should be equivalent',
          diag:
           { found:
              [ 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy' ],
             wanted:
              [ 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy' ] } } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', '# failed 1 of 1 tests\\n' ],
      [ 'comment', '# failed 1 of 1 tests\\n' ],
      [ 'line', '# failed 1 test\\n' ],
      [ 'comment', '# failed 1 test\\n' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures:
           [ Result {
               ok: false,
               id: 1,
               name: 'should be equivalent',
               diag:
                { found:
                   [ 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy' ],
                  wanted:
                   [ 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy' ] } } ] } ] ] ],
  [ 'line', '    not ok 1 - should be equivalent\\n' ],
  [ 'line', '      ---\\n' ],
  [ 'line', '      found:\\n' ],
  [ 'line',
    '        - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\n' ],
  [ 'line', '      wanted:\\n' ],
  [ 'line', '        - >-\\n' ],
  [ 'line',
    '          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\n' ],
  [ 'line', '  \\n' ],
  [ 'line',
    '          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\n' ],
  [ 'line', '      ...\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    # failed 1 of 1 tests\\n' ],
  [ 'line', '    # failed 1 test\\n' ],
  [ 'line', 'not ok 1 - foo # time=13.457ms\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  results:\\n' ],
  [ 'line', '    plan:\\n' ],
  [ 'line', '      start: 1\\n' ],
  [ 'line', '      end: 1\\n' ],
  [ 'line', '    count: 1\\n' ],
  [ 'line', '    pass: 0\\n' ],
  [ 'line', '    ok: false\\n' ],
  [ 'line', '    fail: 1\\n' ],
  [ 'line', '    time: 13.457\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      time: 13.457,
      name: 'foo',
      diag:
       { results:
          { plan: { start: 1, end: 1 },
            count: 1,
            pass: 0,
            ok: false,
            fail: 1,
            time: 13.457 } } } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# failed 1 of 1 tests\\n' ],
  [ 'comment', '# failed 1 of 1 tests\\n' ],
  [ 'line', '# time=22.566ms\\n' ],
  [ 'comment', '# time=22.566ms\\n' ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           time: 13.457,
           name: 'foo',
           diag:
            { results:
               { plan: { start: 1, end: 1 },
                 count: 1,
                 pass: 0,
                 ok: false,
                 fail: 1,
                 time: 13.457 } } } ] } ] ]
`

exports[`test/parser.js TAP lone_not_bug.tap > output bail=true 1`] = `
[ [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP lone_not_bug.tap > output bail=false 1`] = `
[ [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP missing.tap > output bail=true 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..6\\n' ],
  [ 'plan', { start: 1, end: 6 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', '# test count(5) != plan(6)\\n' ],
  [ 'comment', '# test count(5) != plan(6)\\n' ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 6, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP missing.tap > output bail=false 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..6\\n' ],
  [ 'plan', { start: 1, end: 6 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', '# test count(5) != plan(6)\\n' ],
  [ 'comment', '# test count(5) != plan(6)\\n' ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 6, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP no_nums.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'not ok\\n' ],
  [ 'assert', Result { ok: false, id: 3 } ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 2,
      fail: 1,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 3 } ] } ] ]
`

exports[`test/parser.js TAP no_nums.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'not ok\\n' ],
  [ 'assert', Result { ok: false, id: 3 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 3 } ] } ] ]
`

exports[`test/parser.js TAP no-numbers.tap > output bail=true 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok we are good\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'we are good' } ],
  [ 'line', 'not ok 2 we are bad\\n' ],
  [ 'assert', Result { ok: false, id: 2, name: 'we are bad' } ],
  [ 'line', 'Bail out! # we are bad\\n' ],
  [ 'bailout', '# we are bad' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 1,
      bailout: '# we are bad',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 2, name: 'we are bad' } ] } ] ]
`

exports[`test/parser.js TAP no-numbers.tap > output bail=false 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok we are good\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'we are good' } ],
  [ 'line', 'not ok 2 we are bad\\n' ],
  [ 'assert', Result { ok: false, id: 2, name: 'we are bad' } ],
  [ 'line', 'ok we are zesty!\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'we are zesty!' } ],
  [ 'line', '# failed 1 of 3 tests\\n' ],
  [ 'comment', '# failed 1 of 3 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 2,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 2, name: 'we are bad' } ] } ] ]
`

exports[`test/parser.js TAP no-plan.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# before 1\\n' ],
  [ 'comment', '# before 1\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# before 3\\n' ],
  [ 'comment', '# before 3\\n' ],
  [ 'line', 'ok 3 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '# test count(4) != plan(null)\\n' ],
  [ 'comment', '# test count(4) != plan(null)\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ { tapError: 'no plan' } ] } ] ]
`

exports[`test/parser.js TAP no-plan.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# before 1\\n' ],
  [ 'comment', '# before 1\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# before 3\\n' ],
  [ 'comment', '# before 3\\n' ],
  [ 'line', 'ok 3 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '# test count(4) != plan(null)\\n' ],
  [ 'comment', '# test count(4) != plan(null)\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ { tapError: 'no plan' } ] } ] ]
`

exports[`test/parser.js TAP not-enough.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# before 1\\n' ],
  [ 'comment', '# before 1\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# before 3\\n' ],
  [ 'comment', '# before 3\\n' ],
  [ 'line', 'ok 3 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', '# test count(4) != plan(5)\\n' ],
  [ 'comment', '# test count(4) != plan(5)\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP not-enough.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# before 1\\n' ],
  [ 'comment', '# before 1\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# before 3\\n' ],
  [ 'comment', '# before 3\\n' ],
  [ 'line', 'ok 3 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', '# test count(4) != plan(5)\\n' ],
  [ 'comment', '# test count(4) != plan(5)\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP not-ok-todo.tap > output bail=true 1`] = `
[ [ 'line', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'comment', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'line', 'ok 1 - should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line',
    'not ok 2 - should be equivalent # TODO but we will fix it later\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 2,
      todo: 'but we will fix it later',
      name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 3 - should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 - (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# Looks like you failed 1 test of 4.\\n' ],
  [ 'comment', '# Looks like you failed 1 test of 4.\\n' ],
  [ 'line', '# todo: 1\\n' ],
  [ 'comment', '# todo: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 3,
      fail: 1,
      bailout: false,
      todo: 1,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP not-ok-todo.tap > output bail=false 1`] = `
[ [ 'line', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'comment', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'line', 'ok 1 - should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line',
    'not ok 2 - should be equivalent # TODO but we will fix it later\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 2,
      todo: 'but we will fix it later',
      name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 3 - should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 - (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# Looks like you failed 1 test of 4.\\n' ],
  [ 'comment', '# Looks like you failed 1 test of 4.\\n' ],
  [ 'line', '# todo: 1\\n' ],
  [ 'comment', '# todo: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 3,
      fail: 1,
      bailout: false,
      todo: 1,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP not-ok-with-trailing-comment.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'not ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: false, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'Bail out! # should be equivalent\\n' ],
  [ 'bailout', '# should be equivalent' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 1,
      bailout: '# should be equivalent',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result { ok: false, id: 2, name: 'should be equivalent' } ] } ] ]
`

exports[`test/parser.js TAP not-ok-with-trailing-comment.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'not ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: false, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 3 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  3\\n' ],
  [ 'comment', '# pass  3\\n' ],
  [ 'line', '# fail  1\\n' ],
  [ 'comment', '# fail  1\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 3,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result { ok: false, id: 2, name: 'should be equivalent' } ] } ] ]
`

exports[`test/parser.js TAP not-ok.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'not ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: false, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'Bail out! # should be equivalent\\n' ],
  [ 'bailout', '# should be equivalent' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 1,
      bailout: '# should be equivalent',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result { ok: false, id: 2, name: 'should be equivalent' } ] } ] ]
`

exports[`test/parser.js TAP not-ok.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'not ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: false, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 3 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  3\\n' ],
  [ 'comment', '# pass  3\\n' ],
  [ 'line', '# fail  1\\n' ],
  [ 'comment', '# fail  1\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 3,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result { ok: false, id: 2, name: 'should be equivalent' } ] } ] ]
`

exports[`test/parser.js TAP offset-mismatch.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 8 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 8, name: 'should be equal' } ],
  [ 'line', 'ok 9 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 10 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 10, name: 'should be equal' } ],
  [ 'line', 'ok 11 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 11, name: '(unnamed assert)' } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'first test id does not match plan start' } ] } ] ]
`

exports[`test/parser.js TAP offset-mismatch.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 8 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 8, name: 'should be equal' } ],
  [ 'line', 'ok 9 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 10 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 10, name: 'should be equal' } ],
  [ 'line', 'ok 11 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 11, name: '(unnamed assert)' } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'first test id does not match plan start' } ] } ] ]
`

exports[`test/parser.js TAP offset.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 8 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 8, name: 'should be equal' } ],
  [ 'line', 'ok 9 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 10 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 10, name: 'should be equal' } ],
  [ 'line', 'ok 11 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 11, name: '(unnamed assert)' } ],
  [ 'line', '8..11\\n' ],
  [ 'plan', { start: 8, end: 11 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', '# test count(4) != plan(11)\\n' ],
  [ 'comment', '# test count(4) != plan(11)\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 8, end: 11, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP offset.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 8 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 8, name: 'should be equal' } ],
  [ 'line', 'ok 9 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 10 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 10, name: 'should be equal' } ],
  [ 'line', 'ok 11 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 11, name: '(unnamed assert)' } ],
  [ 'line', '8..11\\n' ],
  [ 'plan', { start: 8, end: 11 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', '# test count(4) != plan(11)\\n' ],
  [ 'comment', '# test count(4) != plan(11)\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 8, end: 11, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP ok.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 3 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..4 # just some plan comment\\n' ],
  [ 'plan',
    { start: 1, end: 4, comment: 'just some plan comment' } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 4,
         skipAll: false,
         skipReason: '',
         comment: 'just some plan comment' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP ok.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 3 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..4 # just some plan comment\\n' ],
  [ 'plan',
    { start: 1, end: 4, comment: 'just some plan comment' } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 4,
         skipAll: false,
         skipReason: '',
         comment: 'just some plan comment' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP one-ok.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP one-ok.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP out_err_mix.tap > output bail=true 1`] = `
[ [ 'line', 'one\\n' ],
  [ 'extra', 'one\\n' ],
  [ 'line', 'three\\n' ],
  [ 'extra', 'three\\n' ],
  [ 'line', '1..0 # no tests found\\n' ],
  [ 'plan', { start: 1, end: 0, comment: 'no tests found' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'no tests found',
         comment: 'no tests found' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP out_err_mix.tap > output bail=false 1`] = `
[ [ 'line', 'one\\n' ],
  [ 'extra', 'one\\n' ],
  [ 'line', 'three\\n' ],
  [ 'extra', 'three\\n' ],
  [ 'line', '1..0 # no tests found\\n' ],
  [ 'plan', { start: 1, end: 0, comment: 'no tests found' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'no tests found',
         comment: 'no tests found' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP out_of_order.tap > output bail=true 1`] = `
[ [ 'line', 'ok 2 - Test that argument passing works\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Test that argument passing works' } ],
  [ 'line',
    'ok 3 - Test that passing arguments as references work\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 3,
      name: 'Test that passing arguments as references work' } ],
  [ 'line', 'ok 4 - Test a normal sub\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'Test a normal sub' } ],
  [ 'line', 'ok 6 - Detach test\\n' ],
  [ 'assert', Result { ok: true, id: 6, name: 'Detach test' } ],
  [ 'line', 'ok 8 - Nested thread test\\n' ],
  [ 'assert',
    Result { ok: true, id: 8, name: 'Nested thread test' } ],
  [ 'line', 'ok 9 - Nested thread test\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'Nested thread test' } ],
  [ 'line', 'ok 10 - Wanted 7, got 7\\n' ],
  [ 'assert',
    Result { ok: true, id: 10, name: 'Wanted 7, got 7' } ],
  [ 'line', 'ok 11 - Wanted 7, got 7\\n' ],
  [ 'assert',
    Result { ok: true, id: 11, name: 'Wanted 7, got 7' } ],
  [ 'line', 'ok 12 - Wanted 8, got 8\\n' ],
  [ 'assert',
    Result { ok: true, id: 12, name: 'Wanted 8, got 8' } ],
  [ 'line', 'ok 13 - Wanted 8, got 8\\n' ],
  [ 'assert',
    Result { ok: true, id: 13, name: 'Wanted 8, got 8' } ],
  [ 'line', '1..15\\n' ],
  [ 'plan', { start: 1, end: 15 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'extra', 'ok 1\\n' ],
  [ 'line', 'ok 5 - Check that Config::threads is true\\n' ],
  [ 'extra', 'ok 5 - Check that Config::threads is true\\n' ],
  [ 'line', 'ok 7 - Detach test\\n' ],
  [ 'extra', 'ok 7 - Detach test\\n' ],
  [ 'line',
    'ok 14 - Check so that tid for threads work for main thread\\n' ],
  [ 'extra',
    'ok 14 - Check so that tid for threads work for main thread\\n' ],
  [ 'line',
    'ok 15 - Check so that tid for threads work for main thread\\n' ],
  [ 'extra',
    'ok 15 - Check so that tid for threads work for main thread\\n' ],
  [ 'line', '# test count(10) != plan(15)\\n' ],
  [ 'comment', '# test count(10) != plan(15)\\n' ],
  [ 'line', '# failed 1 of 10 tests\\n' ],
  [ 'comment', '# failed 1 of 10 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 10,
      pass: 10,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 15, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP out_of_order.tap > output bail=false 1`] = `
[ [ 'line', 'ok 2 - Test that argument passing works\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Test that argument passing works' } ],
  [ 'line',
    'ok 3 - Test that passing arguments as references work\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 3,
      name: 'Test that passing arguments as references work' } ],
  [ 'line', 'ok 4 - Test a normal sub\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'Test a normal sub' } ],
  [ 'line', 'ok 6 - Detach test\\n' ],
  [ 'assert', Result { ok: true, id: 6, name: 'Detach test' } ],
  [ 'line', 'ok 8 - Nested thread test\\n' ],
  [ 'assert',
    Result { ok: true, id: 8, name: 'Nested thread test' } ],
  [ 'line', 'ok 9 - Nested thread test\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'Nested thread test' } ],
  [ 'line', 'ok 10 - Wanted 7, got 7\\n' ],
  [ 'assert',
    Result { ok: true, id: 10, name: 'Wanted 7, got 7' } ],
  [ 'line', 'ok 11 - Wanted 7, got 7\\n' ],
  [ 'assert',
    Result { ok: true, id: 11, name: 'Wanted 7, got 7' } ],
  [ 'line', 'ok 12 - Wanted 8, got 8\\n' ],
  [ 'assert',
    Result { ok: true, id: 12, name: 'Wanted 8, got 8' } ],
  [ 'line', 'ok 13 - Wanted 8, got 8\\n' ],
  [ 'assert',
    Result { ok: true, id: 13, name: 'Wanted 8, got 8' } ],
  [ 'line', '1..15\\n' ],
  [ 'plan', { start: 1, end: 15 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'extra', 'ok 1\\n' ],
  [ 'line', 'ok 5 - Check that Config::threads is true\\n' ],
  [ 'extra', 'ok 5 - Check that Config::threads is true\\n' ],
  [ 'line', 'ok 7 - Detach test\\n' ],
  [ 'extra', 'ok 7 - Detach test\\n' ],
  [ 'line',
    'ok 14 - Check so that tid for threads work for main thread\\n' ],
  [ 'extra',
    'ok 14 - Check so that tid for threads work for main thread\\n' ],
  [ 'line',
    'ok 15 - Check so that tid for threads work for main thread\\n' ],
  [ 'extra',
    'ok 15 - Check so that tid for threads work for main thread\\n' ],
  [ 'line', '# test count(10) != plan(15)\\n' ],
  [ 'comment', '# test count(10) != plan(15)\\n' ],
  [ 'line', '# failed 1 of 10 tests\\n' ],
  [ 'comment', '# failed 1 of 10 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 10,
      pass: 10,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 15, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP out-of-order.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'ok 3 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 2 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP out-of-order.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'ok 3 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 2 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP outside-plan.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 234 - pretty big\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 234,
      name: 'pretty big',
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', 'ok 5 - less big\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 5,
      name: 'less big',
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', 'ok 3 - three\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'three' } ],
  [ 'line', '# failed 2 of 3 tests\\n' ],
  [ 'comment', '# failed 2 of 3 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 3,
      fail: 2,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 234,
           name: 'pretty big',
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } },
         Result {
           ok: true,
           id: 5,
           name: 'less big',
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } } ] } ] ]
`

exports[`test/parser.js TAP outside-plan.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 234 - pretty big\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 234,
      name: 'pretty big',
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', 'ok 5 - less big\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 5,
      name: 'less big',
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', 'ok 3 - three\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'three' } ],
  [ 'line', '# failed 2 of 3 tests\\n' ],
  [ 'comment', '# failed 2 of 3 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 3,
      fail: 2,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 234,
           name: 'pretty big',
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } },
         Result {
           ok: true,
           id: 5,
           name: 'less big',
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } } ] } ] ]
`

exports[`test/parser.js TAP perl-test2-buffered.tap > output bail=true 1`] = `
[ [ 'line',
    "# Seeded srand with seed '20160810' from local date.\\n" ],
  [ 'comment',
    "# Seeded srand with seed '20160810' from local date.\\n" ],
  [ 'line', 'not ok 1 - empty {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: empty\\n' ],
      [ 'line', '1..0\\n' ],
      [ 'plan', { start: 1, end: 0 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 0,
          pass: 0,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 0, skipAll: true, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..0\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: false, id: 1, buffered: true, name: 'empty' } ],
  [ 'line', 'Bail out! # empty\\n' ],
  [ 'bailout', '# empty' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# empty',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result { ok: false, id: 1, buffered: true, name: 'empty' } ] } ] ]
`

exports[`test/parser.js TAP perl-test2-buffered.tap > output bail=false 1`] = `
[ [ 'line',
    "# Seeded srand with seed '20160810' from local date.\\n" ],
  [ 'comment',
    "# Seeded srand with seed '20160810' from local date.\\n" ],
  [ 'line', 'not ok 1 - empty {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: empty\\n' ],
      [ 'line', '1..0\\n' ],
      [ 'plan', { start: 1, end: 0 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 0,
          pass: 0,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 0, skipAll: true, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..0\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: false, id: 1, buffered: true, name: 'empty' } ],
  [ 'line', 'ok 2 - my_test {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my_test\\n' ],
      [ 'line', 'ok 1 - subtest event A\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, name: 'subtest event A' } ],
      [ 'line', 'ok 2 - subtest event B\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, name: 'subtest event B' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - subtest event A\\n' ],
  [ 'line', '    ok 2 - subtest event B\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, buffered: true, name: 'my_test' } ],
  [ 'line', 'ok 3 - my_test_plan {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my_test_plan\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', 'ok 1 - subtest event A\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, name: 'subtest event A' } ],
      [ 'line', 'ok 2 - subtest event B\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, name: 'subtest event B' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    ok 1 - subtest event A\\n' ],
  [ 'line', '    ok 2 - subtest event B\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, buffered: true, name: 'my_test_plan' } ],
  [ 'line', '# Subtest: my_streamy_test\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my_streamy_test\\n' ],
      [ 'line', 'ok 1 - subtest event A\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, name: 'subtest event A' } ],
      [ 'line', 'ok 2 - subtest event B\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, name: 'subtest event B' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - subtest event A\\n' ],
  [ 'line', '    ok 2 - subtest event B\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 4 - Subtest: my_streamy_test\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'Subtest: my_streamy_test' } ],
  [ 'line', '# Subtest: my_streamy_test_plan\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my_streamy_test_plan\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', 'ok 1 - subtest event A\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, name: 'subtest event A' } ],
      [ 'line', 'ok 2 - subtest event B\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, name: 'subtest event B' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    ok 1 - subtest event A\\n' ],
  [ 'line', '    ok 2 - subtest event B\\n' ],
  [ 'line', 'ok 5 - Subtest: my_streamy_test_plan\\n' ],
  [ 'assert',
    Result { ok: true, id: 5, name: 'Subtest: my_streamy_test_plan' } ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result { ok: false, id: 1, buffered: true, name: 'empty' } ] } ] ]
`

exports[`test/parser.js TAP perl-test2-streamed.tap > output bail=true 1`] = `
[ [ 'line',
    "# Seeded srand with seed '20160809' from local date.\\n" ],
  [ 'comment',
    "# Seeded srand with seed '20160809' from local date.\\n" ],
  [ 'line', '# Subtest: my_streamy_test\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my_streamy_test\\n' ],
      [ 'line', 'ok 1 - subtest event A\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, name: 'subtest event A' } ],
      [ 'line', 'ok 2 - subtest event B\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, name: 'subtest event B' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - subtest event A\\n' ],
  [ 'line', '    ok 2 - subtest event B\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - Subtest: my_streamy_test\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'Subtest: my_streamy_test' } ],
  [ 'line', '# Subtest: my_streamy_test_plan\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my_streamy_test_plan\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', 'ok 1 - subtest event A\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, name: 'subtest event A' } ],
      [ 'line', 'ok 2 - subtest event B\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, name: 'subtest event B' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    ok 1 - subtest event A\\n' ],
  [ 'line', '    ok 2 - subtest event B\\n' ],
  [ 'line', 'ok 2 - Subtest: my_streamy_test_plan\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Subtest: my_streamy_test_plan' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP perl-test2-streamed.tap > output bail=false 1`] = `
[ [ 'line',
    "# Seeded srand with seed '20160809' from local date.\\n" ],
  [ 'comment',
    "# Seeded srand with seed '20160809' from local date.\\n" ],
  [ 'line', '# Subtest: my_streamy_test\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my_streamy_test\\n' ],
      [ 'line', 'ok 1 - subtest event A\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, name: 'subtest event A' } ],
      [ 'line', 'ok 2 - subtest event B\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, name: 'subtest event B' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - subtest event A\\n' ],
  [ 'line', '    ok 2 - subtest event B\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - Subtest: my_streamy_test\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'Subtest: my_streamy_test' } ],
  [ 'line', '# Subtest: my_streamy_test_plan\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: my_streamy_test_plan\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', 'ok 1 - subtest event A\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, name: 'subtest event A' } ],
      [ 'line', 'ok 2 - subtest event B\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, name: 'subtest event B' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    ok 1 - subtest event A\\n' ],
  [ 'line', '    ok 2 - subtest event B\\n' ],
  [ 'line', 'ok 2 - Subtest: my_streamy_test_plan\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'Subtest: my_streamy_test_plan' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP plan-in-bad-places-post.tap > output bail=true 1`] = `
[ [ 'line', 'tap version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok subtest {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: subtest\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'subtest' } ],
  [ 'line', '1..99\\n' ],
  [ 'extra', '1..99\\n' ],
  [ 'line', 'ok yaml\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  ok: lamy\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'yaml' } ],
  [ 'extra', '  ---\\n  ok: lamy\\n' ],
  [ 'line', '1..99\\n' ],
  [ 'plan', { start: 1, end: 99 } ],
  [ 'line', '  ...\\n' ],
  [ 'extra', '  ...\\n' ],
  [ 'line', '1..2\\n' ],
  [ 'extra', '1..2\\n' ],
  [ 'line', '1..2\\n' ],
  [ 'extra', '1..2\\n' ],
  [ 'line', '# test count(2) != plan(99)\\n' ],
  [ 'comment', '# test count(2) != plan(99)\\n' ],
  [ 'line', '# failed 1 of 2 tests\\n' ],
  [ 'comment', '# failed 1 of 2 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 2,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 99, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP plan-in-bad-places-post.tap > output bail=false 1`] = `
[ [ 'line', 'tap version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok subtest {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: subtest\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'subtest' } ],
  [ 'line', '1..99\\n' ],
  [ 'extra', '1..99\\n' ],
  [ 'line', 'ok yaml\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  ok: lamy\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'yaml' } ],
  [ 'extra', '  ---\\n  ok: lamy\\n' ],
  [ 'line', '1..99\\n' ],
  [ 'plan', { start: 1, end: 99 } ],
  [ 'line', '  ...\\n' ],
  [ 'extra', '  ...\\n' ],
  [ 'line', '1..2\\n' ],
  [ 'extra', '1..2\\n' ],
  [ 'line', '1..2\\n' ],
  [ 'extra', '1..2\\n' ],
  [ 'line', '# test count(2) != plan(99)\\n' ],
  [ 'comment', '# test count(2) != plan(99)\\n' ],
  [ 'line', '# failed 1 of 2 tests\\n' ],
  [ 'comment', '# failed 1 of 2 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 2,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 99, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP plan-in-bad-places-pre.tap > output bail=true 1`] = `
[ [ 'line', 'tap version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '1..2\\n' ],
  [ 'extra', '1..2\\n' ],
  [ 'line', 'ok subtest {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: subtest\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'subtest' } ],
  [ 'line', '1..99\\n' ],
  [ 'extra', '1..99\\n' ],
  [ 'line', 'ok yaml\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  ok: lamy\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'yaml' } ],
  [ 'extra', '  ---\\n  ok: lamy\\n' ],
  [ 'line', '1..99\\n' ],
  [ 'extra', '1..99\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'extra', '  ...\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP plan-in-bad-places-pre.tap > output bail=false 1`] = `
[ [ 'line', 'tap version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '1..2\\n' ],
  [ 'extra', '1..2\\n' ],
  [ 'line', 'ok subtest {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: subtest\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'subtest' } ],
  [ 'line', '1..99\\n' ],
  [ 'extra', '1..99\\n' ],
  [ 'line', 'ok yaml\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  ok: lamy\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'yaml' } ],
  [ 'extra', '  ---\\n  ok: lamy\\n' ],
  [ 'line', '1..99\\n' ],
  [ 'extra', '1..99\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'extra', '  ...\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP plan-invalid-strict.tap > output bail=true 1`] = `
[ [ 'line', 'pragma +strict\\n' ],
  [ 'pragma', 'strict', true ],
  [ 'line', '100..1\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ { tapError: 'plan end cannot be less than plan start',
           plan: { start: 100, end: 1 } } ] } ] ]
`

exports[`test/parser.js TAP plan-invalid-strict.tap > output bail=false 1`] = `
[ [ 'line', 'pragma +strict\\n' ],
  [ 'pragma', 'strict', true ],
  [ 'line', '100..1\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ { tapError: 'plan end cannot be less than plan start',
           plan: { start: 100, end: 1 } } ] } ] ]
`

exports[`test/parser.js TAP plan-invalid.tap > output bail=true 1`] = `
[ [ 'line', '100..1\\n' ],
  [ 'extra', '100..1\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP plan-invalid.tap > output bail=false 1`] = `
[ [ 'line', '100..1\\n' ],
  [ 'extra', '100..1\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP pragma-after-failure.tap > output bail=true 1`] = `
[ [ 'line', 'not ok\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ Result { ok: false, id: 1 } ] } ] ]
`

exports[`test/parser.js TAP pragma-after-failure.tap > output bail=false 1`] = `
[ [ 'line', 'not ok\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', 'pragma +custom\\n' ],
  [ 'pragma', 'custom', true ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# failed 1 of 2 tests\\n' ],
  [ 'comment', '# failed 1 of 2 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 1 } ] } ] ]
`

exports[`test/parser.js TAP pragma-mid-child-strict.tap > output bail=true 1`] = `
[ [ 'line', 'tap version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'pragma +strict\\n' ],
  [ 'pragma', 'strict', true ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'pragma +strict\\n' ],
  [ 'extra', 'pragma +strict\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ { tapError: 'Non-TAP data encountered in strict mode',
           data: 'pragma +strict\\n' } ] } ] ]
`

exports[`test/parser.js TAP pragma-mid-child-strict.tap > output bail=false 1`] = `
[ [ 'line', 'tap version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'pragma +strict\\n' ],
  [ 'pragma', 'strict', true ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'pragma +strict\\n' ],
  [ 'extra', 'pragma +strict\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ { tapError: 'Non-TAP data encountered in strict mode',
           data: 'pragma +strict\\n' } ] } ] ]
`

exports[`test/parser.js TAP pragma-mid-child.tap > output bail=true 1`] = `
[ [ 'line', 'pragma +foo\\n' ],
  [ 'pragma', 'foo', true ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'pragma +foo\\n' ],
  [ 'extra', 'pragma +foo\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP pragma-mid-child.tap > output bail=false 1`] = `
[ [ 'line', 'pragma +foo\\n' ],
  [ 'pragma', 'foo', true ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'pragma +foo\\n' ],
  [ 'extra', 'pragma +foo\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP pragma-mid-yaml.tap > output bail=true 1`] = `
[ [ 'line', 'pragma +foo\\n' ],
  [ 'pragma', 'foo', true ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 - some yaml\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  ok: true\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'some yaml' } ],
  [ 'extra', '  ---\\n  ok: true\\n' ],
  [ 'line', 'pragma +foo\\n' ],
  [ 'pragma', 'foo', true ],
  [ 'line', '  name: some yaml\\n' ],
  [ 'extra', '  name: some yaml\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'extra', '  ...\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP pragma-mid-yaml.tap > output bail=false 1`] = `
[ [ 'line', 'pragma +foo\\n' ],
  [ 'pragma', 'foo', true ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 - some yaml\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  ok: true\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'some yaml' } ],
  [ 'extra', '  ---\\n  ok: true\\n' ],
  [ 'line', 'pragma +foo\\n' ],
  [ 'pragma', 'foo', true ],
  [ 'line', '  name: some yaml\\n' ],
  [ 'extra', '  name: some yaml\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'extra', '  ...\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP schwern-todo-quiet.tap > output bail=true 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'not ok 2\\n' ],
  [ 'assert', Result { ok: false, id: 2 } ],
  [ 'line',
    '#   Failed test at ../../andy/schwern.pl line 17.\\n' ],
  [ 'comment',
    '#   Failed test at ../../andy/schwern.pl line 17.\\n' ],
  [ 'line', "#          got: '23'\\n" ],
  [ 'comment', "#          got: '23'\\n" ],
  [ 'line', "#     expected: '42'\\n" ],
  [ 'comment', "#     expected: '42'\\n" ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 1,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 2 } ] } ] ]
`

exports[`test/parser.js TAP schwern-todo-quiet.tap > output bail=false 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'not ok 2\\n' ],
  [ 'assert', Result { ok: false, id: 2 } ],
  [ 'line',
    '#   Failed test at ../../andy/schwern.pl line 17.\\n' ],
  [ 'comment',
    '#   Failed test at ../../andy/schwern.pl line 17.\\n' ],
  [ 'line', "#          got: '23'\\n" ],
  [ 'comment', "#          got: '23'\\n" ],
  [ 'line', "#     expected: '42'\\n" ],
  [ 'comment', "#     expected: '42'\\n" ],
  [ 'line',
    'not ok 3 # TODO Roman numerials still not a built in type\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 3,
      todo: 'Roman numerials still not a built in type',
      name: '' } ],
  [ 'line',
    '#   Failed (TODO) test at ../../andy/schwern.pl line 20.\\n' ],
  [ 'comment',
    '#   Failed (TODO) test at ../../andy/schwern.pl line 20.\\n' ],
  [ 'line', "#          got: 'XXIII'\\n" ],
  [ 'comment', "#          got: 'XXIII'\\n" ],
  [ 'line', "#     expected: '23'\\n" ],
  [ 'comment', "#     expected: '23'\\n" ],
  [ 'line', '# Looks like you failed 1 test of 3.\\n' ],
  [ 'comment', '# Looks like you failed 1 test of 3.\\n' ],
  [ 'line', '# failed 2 of 3 tests\\n' ],
  [ 'comment', '# failed 2 of 3 tests\\n' ],
  [ 'line', '# todo: 1\\n' ],
  [ 'comment', '# todo: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 3,
      pass: 1,
      fail: 2,
      bailout: false,
      todo: 1,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 2 } ] } ] ]
`

exports[`test/parser.js TAP schwern.tap > output bail=true 1`] = `
[ [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 - 42\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: '42' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP schwern.tap > output bail=false 1`] = `
[ [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 - 42\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: '42' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP sequence_misparse.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3 # skipped on foobar system\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: '# skipped on foobar system' } ],
  [ 'line', '# 1234567890123456789012345678901234567890\\n' ],
  [ 'comment', '# 1234567890123456789012345678901234567890\\n' ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '# 1234567890123456789012345678901234567890\\n' ],
  [ 'comment', '# 1234567890123456789012345678901234567890\\n' ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP sequence_misparse.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3 # skipped on foobar system\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: '# skipped on foobar system' } ],
  [ 'line', '# 1234567890123456789012345678901234567890\\n' ],
  [ 'comment', '# 1234567890123456789012345678901234567890\\n' ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '# 1234567890123456789012345678901234567890\\n' ],
  [ 'comment', '# 1234567890123456789012345678901234567890\\n' ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP simple_fail.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'not ok 2\\n' ],
  [ 'assert', Result { ok: false, id: 2 } ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 1,
      fail: 1,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 2 } ] } ] ]
`

exports[`test/parser.js TAP simple_fail.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'not ok 2\\n' ],
  [ 'assert', Result { ok: false, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'not ok 5\\n' ],
  [ 'assert', Result { ok: false, id: 5 } ],
  [ 'line', '# failed 2 of 5 tests\\n' ],
  [ 'comment', '# failed 2 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 3,
      fail: 2,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 2 }, Result { ok: false, id: 5 } ] } ] ]
`

exports[`test/parser.js TAP simple_yaml_missing_version13.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  -\\n' ],
  [ 'line', '    fnurk: skib\\n' ],
  [ 'line', '    ponk: gleeb\\n' ],
  [ 'line', '  -\\n' ],
  [ 'line', '    bar: krup\\n' ],
  [ 'line', '    foo: plink\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 2,
      diag:
       [ { fnurk: 'skib', ponk: 'gleeb' },
         { bar: 'krup', foo: 'plink' } ] } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  expected:\\n' ],
  [ 'line', '    - 1\\n' ],
  [ 'line', '    - 2\\n' ],
  [ 'line', '    - 4\\n' ],
  [ 'line', '  got:\\n' ],
  [ 'line', '    - 1\\n' ],
  [ 'line', '    - pong\\n' ],
  [ 'line', '    - 4\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 4,
      diag: { expected: [ 1, 2, 4 ], got: [ 1, 'pong', 4 ] } } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP simple_yaml_missing_version13.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  -\\n' ],
  [ 'line', '    fnurk: skib\\n' ],
  [ 'line', '    ponk: gleeb\\n' ],
  [ 'line', '  -\\n' ],
  [ 'line', '    bar: krup\\n' ],
  [ 'line', '    foo: plink\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 2,
      diag:
       [ { fnurk: 'skib', ponk: 'gleeb' },
         { bar: 'krup', foo: 'plink' } ] } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  expected:\\n' ],
  [ 'line', '    - 1\\n' ],
  [ 'line', '    - 2\\n' ],
  [ 'line', '    - 4\\n' ],
  [ 'line', '  got:\\n' ],
  [ 'line', '    - 1\\n' ],
  [ 'line', '    - pong\\n' ],
  [ 'line', '    - 4\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 4,
      diag: { expected: [ 1, 2, 4 ], got: [ 1, 'pong', 4 ] } } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP simple_yaml.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  -\\n' ],
  [ 'line', '    fnurk: skib\\n' ],
  [ 'line', '    ponk: gleeb\\n' ],
  [ 'line', '  -\\n' ],
  [ 'line', '    bar: krup\\n' ],
  [ 'line', '    foo: plink\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 2,
      diag:
       [ { fnurk: 'skib', ponk: 'gleeb' },
         { bar: 'krup', foo: 'plink' } ] } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  expected:\\n' ],
  [ 'line', '    - 1\\n' ],
  [ 'line', '    - 2\\n' ],
  [ 'line', '    - 4\\n' ],
  [ 'line', '  got:\\n' ],
  [ 'line', '    - 1\\n' ],
  [ 'line', '    - pong\\n' ],
  [ 'line', '    - 4\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 4,
      diag: { expected: [ 1, 2, 4 ], got: [ 1, 'pong', 4 ] } } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP simple_yaml.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  -\\n' ],
  [ 'line', '    fnurk: skib\\n' ],
  [ 'line', '    ponk: gleeb\\n' ],
  [ 'line', '  -\\n' ],
  [ 'line', '    bar: krup\\n' ],
  [ 'line', '    foo: plink\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 2,
      diag:
       [ { fnurk: 'skib', ponk: 'gleeb' },
         { bar: 'krup', foo: 'plink' } ] } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  expected:\\n' ],
  [ 'line', '    - 1\\n' ],
  [ 'line', '    - 2\\n' ],
  [ 'line', '    - 4\\n' ],
  [ 'line', '  got:\\n' ],
  [ 'line', '    - 1\\n' ],
  [ 'line', '    - pong\\n' ],
  [ 'line', '    - 4\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 4,
      diag: { expected: [ 1, 2, 4 ], got: [ 1, 'pong', 4 ] } } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP simple.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP simple.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip_nomsg.tap > output bail=true 1`] = `
[ [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 # Skip\\n' ],
  [ 'assert', Result { ok: true, id: 1, skip: true, name: '' } ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip_nomsg.tap > output bail=false 1`] = `
[ [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok 1 # Skip\\n' ],
  [ 'assert', Result { ok: true, id: 1, skip: true, name: '' } ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip-all-nonempty.tap > output bail=true 1`] = `
[ [ 'line', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'comment', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'line', '1..1 # SKIP Insufficient positron flux\\n' ],
  [ 'plan',
    { start: 1, end: 1, comment: 'SKIP Insufficient positron flux' } ],
  [ 'line', 'ok 1 found some spare flux in bottom drawer\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      name: 'found some spare flux in bottom drawer' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 1,
         skipAll: false,
         skipReason: '',
         comment: 'SKIP Insufficient positron flux' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip-all-nonempty.tap > output bail=false 1`] = `
[ [ 'line', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'comment', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'line', '1..1 # SKIP Insufficient positron flux\\n' ],
  [ 'plan',
    { start: 1, end: 1, comment: 'SKIP Insufficient positron flux' } ],
  [ 'line', 'ok 1 found some spare flux in bottom drawer\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      name: 'found some spare flux in bottom drawer' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 1,
         skipAll: false,
         skipReason: '',
         comment: 'SKIP Insufficient positron flux' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip-all-with-assert.tap > output bail=true 1`] = `
[ [ 'line', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'comment', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'line', '1..0 # SKIP Insufficient skipping\\n' ],
  [ 'plan',
    { start: 1, end: 0, comment: 'SKIP Insufficient skipping' } ],
  [ 'line', 'ok 1 - should not be asserting\\n' ],
  [ 'extra', 'ok 1 - should not be asserting\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'SKIP Insufficient skipping',
         comment: 'SKIP Insufficient skipping' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip-all-with-assert.tap > output bail=false 1`] = `
[ [ 'line', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'comment', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'line', '1..0 # SKIP Insufficient skipping\\n' ],
  [ 'plan',
    { start: 1, end: 0, comment: 'SKIP Insufficient skipping' } ],
  [ 'line', 'ok 1 - should not be asserting\\n' ],
  [ 'extra', 'ok 1 - should not be asserting\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'SKIP Insufficient skipping',
         comment: 'SKIP Insufficient skipping' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip-all-with-test.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '1..0\\n' ],
  [ 'plan', { start: 1, end: 0 } ],
  [ 'line', '# test count(1) != plan(0)\\n' ],
  [ 'comment', '# test count(1) != plan(0)\\n' ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 0, skipAll: true, skipReason: '', comment: '' },
      failures:
       [ { tapError: 'Plan of 1..0, but test points encountered' } ] } ] ]
`

exports[`test/parser.js TAP skip-all-with-test.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '1..0\\n' ],
  [ 'plan', { start: 1, end: 0 } ],
  [ 'line', '# test count(1) != plan(0)\\n' ],
  [ 'comment', '# test count(1) != plan(0)\\n' ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 0, skipAll: true, skipReason: '', comment: '' },
      failures:
       [ { tapError: 'Plan of 1..0, but test points encountered' } ] } ] ]
`

exports[`test/parser.js TAP skip-all.tap > output bail=true 1`] = `
[ [ 'line', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'comment', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'line', '1..0 # SKIP Insufficient positron flux\\n' ],
  [ 'plan',
    { start: 1, end: 0, comment: 'SKIP Insufficient positron flux' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'SKIP Insufficient positron flux',
         comment: 'SKIP Insufficient positron flux' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip-all.tap > output bail=false 1`] = `
[ [ 'line', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'comment', '# TAP emitted by Test::More 0.98\\n' ],
  [ 'line', '1..0 # SKIP Insufficient positron flux\\n' ],
  [ 'plan',
    { start: 1, end: 0, comment: 'SKIP Insufficient positron flux' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'SKIP Insufficient positron flux',
         comment: 'SKIP Insufficient positron flux' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip-one-fail.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok 1 does not count as failure # SKIP\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      skip: true,
      name: 'does not count as failure' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip-one-fail.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok 1 does not count as failure # SKIP\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      skip: true,
      name: 'does not count as failure' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip-one-ok.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1 totally fine # SKIP\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, skip: true, name: 'totally fine' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip-one-ok.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1 totally fine # SKIP\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, skip: true, name: 'totally fine' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2    # skip rain delay\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, skip: 'rain delay', name: '' } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skip.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2    # skip rain delay\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, skip: 'rain delay', name: '' } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skipall_nomsg.tap > output bail=true 1`] = `
[ [ 'line', '1..0\\n' ],
  [ 'plan', { start: 1, end: 0 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 0, skipAll: true, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skipall_nomsg.tap > output bail=false 1`] = `
[ [ 'line', '1..0\\n' ],
  [ 'plan', { start: 1, end: 0 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 0, skipAll: true, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skipall_v13.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..0 # skipping: rope\\n' ],
  [ 'plan', { start: 1, end: 0, comment: 'skipping: rope' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'skipping: rope',
         comment: 'skipping: rope' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skipall_v13.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..0 # skipping: rope\\n' ],
  [ 'plan', { start: 1, end: 0, comment: 'skipping: rope' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'skipping: rope',
         comment: 'skipping: rope' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skipall.tap > output bail=true 1`] = `
[ [ 'line', '1..0 # skipping: rope\\n' ],
  [ 'plan', { start: 1, end: 0, comment: 'skipping: rope' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'skipping: rope',
         comment: 'skipping: rope' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skipall.tap > output bail=false 1`] = `
[ [ 'line', '1..0 # skipping: rope\\n' ],
  [ 'plan', { start: 1, end: 0, comment: 'skipping: rope' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: 1,
         end: 0,
         skipAll: true,
         skipReason: 'skipping: rope',
         comment: 'skipping: rope' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skipping-a-few.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1 - approved operating system\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'approved operating system' } ],
  [ 'line', '# $^0 is solaris\\n' ],
  [ 'comment', '# $^0 is solaris\\n' ],
  [ 'line', 'ok 2 - # SKIP no /sys directory\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, skip: 'no /sys directory', name: '' } ],
  [ 'line', 'ok 3 - # SKIP no /sys directory\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, skip: 'no /sys directory', name: '' } ],
  [ 'line', 'ok 4 - # SKIP no /sys directory\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, skip: 'no /sys directory', name: '' } ],
  [ 'line', 'ok 5 - # SKIP no /sys directory\\n' ],
  [ 'assert',
    Result { ok: true, id: 5, skip: 'no /sys directory', name: '' } ],
  [ 'line', '# skip: 4\\n' ],
  [ 'comment', '# skip: 4\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 4,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP skipping-a-few.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1 - approved operating system\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'approved operating system' } ],
  [ 'line', '# $^0 is solaris\\n' ],
  [ 'comment', '# $^0 is solaris\\n' ],
  [ 'line', 'ok 2 - # SKIP no /sys directory\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, skip: 'no /sys directory', name: '' } ],
  [ 'line', 'ok 3 - # SKIP no /sys directory\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, skip: 'no /sys directory', name: '' } ],
  [ 'line', 'ok 4 - # SKIP no /sys directory\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, skip: 'no /sys directory', name: '' } ],
  [ 'line', 'ok 5 - # SKIP no /sys directory\\n' ],
  [ 'assert',
    Result { ok: true, id: 5, skip: 'no /sys directory', name: '' } ],
  [ 'line', '# skip: 4\\n' ],
  [ 'comment', '# skip: 4\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 4,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP space_after_plan.tap > output bail=true 1`] = `
[ [ 'line', '1..5 \\n' ],
  [ 'extra', '1..5 \\n' ],
  [ 'line', 'ok 1 \\n' ],
  [ 'assert', Result { ok: true, id: 1, name: '' } ],
  [ 'line', 'ok 2 \\n' ],
  [ 'assert', Result { ok: true, id: 2, name: '' } ],
  [ 'line', 'ok 3 \\n' ],
  [ 'assert', Result { ok: true, id: 3, name: '' } ],
  [ 'line', 'ok 4 \\n' ],
  [ 'assert', Result { ok: true, id: 4, name: '' } ],
  [ 'line', 'ok 5 \\n' ],
  [ 'assert', Result { ok: true, id: 5, name: '' } ],
  [ 'line', '# test count(5) != plan(null)\\n' ],
  [ 'comment', '# test count(5) != plan(null)\\n' ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ { tapError: 'no plan' } ] } ] ]
`

exports[`test/parser.js TAP space_after_plan.tap > output bail=false 1`] = `
[ [ 'line', '1..5 \\n' ],
  [ 'extra', '1..5 \\n' ],
  [ 'line', 'ok 1 \\n' ],
  [ 'assert', Result { ok: true, id: 1, name: '' } ],
  [ 'line', 'ok 2 \\n' ],
  [ 'assert', Result { ok: true, id: 2, name: '' } ],
  [ 'line', 'ok 3 \\n' ],
  [ 'assert', Result { ok: true, id: 3, name: '' } ],
  [ 'line', 'ok 4 \\n' ],
  [ 'assert', Result { ok: true, id: 4, name: '' } ],
  [ 'line', 'ok 5 \\n' ],
  [ 'assert', Result { ok: true, id: 5, name: '' } ],
  [ 'line', '# test count(5) != plan(null)\\n' ],
  [ 'comment', '# test count(5) != plan(null)\\n' ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ { tapError: 'no plan' } ] } ] ]
`

exports[`test/parser.js TAP stdout_stderr.tap > output bail=true 1`] = `
[ [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP stdout_stderr.tap > output bail=false 1`] = `
[ [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 4,
      pass: 4,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP strict.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'pragma +strict\\n' ],
  [ 'pragma', 'strict', true ],
  [ 'line', 'Nonsense!\\n' ],
  [ 'extra', 'Nonsense!\\n' ],
  [ 'line', 'pragma -strict\\n' ],
  [ 'pragma', 'strict', false ],
  [ 'line', "Doesn't matter.\\n" ],
  [ 'extra', "Doesn't matter.\\n" ],
  [ 'line', 'ok 1 All OK\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'All OK' } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ { tapError: 'Non-TAP data encountered in strict mode',
           data: 'Nonsense!\\n' } ] } ] ]
`

exports[`test/parser.js TAP strict.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'pragma +strict\\n' ],
  [ 'pragma', 'strict', true ],
  [ 'line', 'Nonsense!\\n' ],
  [ 'extra', 'Nonsense!\\n' ],
  [ 'line', 'pragma -strict\\n' ],
  [ 'pragma', 'strict', false ],
  [ 'line', "Doesn't matter.\\n" ],
  [ 'extra', "Doesn't matter.\\n" ],
  [ 'line', 'ok 1 All OK\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'All OK' } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 1,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ { tapError: 'Non-TAP data encountered in strict mode',
           data: 'Nonsense!\\n' } ] } ] ]
`

exports[`test/parser.js TAP subtest-buffer-diags-time.tap > output bail=true 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1 - first # time=12.34ms {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: first\\n' ],
      [ 'line', 'ok x\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'x' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok x\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 12.34, buffered: true, name: 'first' } ],
  [ 'line', 'ok 2 - second { # time=12.34ms\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: second\\n' ],
      [ 'line', 'ok x\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'x' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok x\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, time: 12.34, buffered: true, name: 'second' } ],
  [ 'line', 'ok 3 - third # time=43.21ms\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  some: diagnostic\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'line', '{\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: third\\n' ],
      [ 'line', 'ok y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 3,
      time: 43.21,
      name: 'third',
      diag: { some: 'diagnostic' },
      buffered: true } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-buffer-diags-time.tap > output bail=false 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1 - first # time=12.34ms {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: first\\n' ],
      [ 'line', 'ok x\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'x' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok x\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 12.34, buffered: true, name: 'first' } ],
  [ 'line', 'ok 2 - second { # time=12.34ms\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: second\\n' ],
      [ 'line', 'ok x\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'x' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok x\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, time: 12.34, buffered: true, name: 'second' } ],
  [ 'line', 'ok 3 - third # time=43.21ms\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  some: diagnostic\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'line', '{\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: third\\n' ],
      [ 'line', 'ok y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 3,
      time: 43.21,
      name: 'third',
      diag: { some: 'diagnostic' },
      buffered: true } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-buffer-todo.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1 - tbd # TODO foo {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: tbd\\n' ],
      [ 'line', 'ok 1\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, todo: 'foo', buffered: true, name: 'tbd' } ],
  [ 'line', 'ok 2 - skippy # skip {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: skippy\\n' ],
      [ 'line', 'ok 1\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, skip: true, buffered: true, name: 'skippy' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# todo: 1\\n' ],
  [ 'comment', '# todo: 1\\n' ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 1,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-buffer-todo.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1 - tbd # TODO foo {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: tbd\\n' ],
      [ 'line', 'ok 1\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, todo: 'foo', buffered: true, name: 'tbd' } ],
  [ 'line', 'ok 2 - skippy # skip {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: skippy\\n' ],
      [ 'line', 'ok 1\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, skip: true, buffered: true, name: 'skippy' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# todo: 1\\n' ],
  [ 'comment', '# todo: 1\\n' ],
  [ 'line', '# skip: 1\\n' ],
  [ 'comment', '# skip: 1\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 1,
      skip: 1,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-buffer.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1 - nesting {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: nesting\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', 'ok 1 - first {\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: first\\n' ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'line', 'ok 1 - true is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
          [ 'line', 'ok 2 - doag is also okay\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'doag is also okay' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..2\\n' ],
      [ 'line', '    ok 1 - true is ok\\n' ],
      [ 'line', '    ok 2 - doag is also okay\\n' ],
      [ 'line', '}\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, buffered: true, name: 'first' } ],
      [ 'line', 'ok 2 - second {\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: second\\n' ],
          [ 'line', 'ok 1 - but that is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
          [ 'line', 'ok 2 - this passes\\n' ],
          [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
          [ 'line', 'ok 3 - nested ok\\n' ],
          [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - but that is ok\\n' ],
      [ 'line', '    ok 2 - this passes\\n' ],
      [ 'line', '    ok 3 - nested ok\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', '}\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, buffered: true, name: 'second' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    ok 1 - first {\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '        ok 1 - true is ok\\n' ],
  [ 'line', '        ok 2 - doag is also okay\\n' ],
  [ 'line', '    }\\n' ],
  [ 'line', '    ok 2 - second {\\n' ],
  [ 'line', '        ok 1 - but that is ok\\n' ],
  [ 'line', '        ok 2 - this passes\\n' ],
  [ 'line', '        ok 3 - nested ok\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '    }\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'nesting' } ],
  [ 'line', 'ok 2 - this passes\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# time=66.857ms\\n' ],
  [ 'comment', '# time=66.857ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-buffer.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1 - nesting {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: nesting\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', 'ok 1 - first {\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: first\\n' ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'line', 'ok 1 - true is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
          [ 'line', 'ok 2 - doag is also okay\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'doag is also okay' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..2\\n' ],
      [ 'line', '    ok 1 - true is ok\\n' ],
      [ 'line', '    ok 2 - doag is also okay\\n' ],
      [ 'line', '}\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, buffered: true, name: 'first' } ],
      [ 'line', 'ok 2 - second {\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: second\\n' ],
          [ 'line', 'ok 1 - but that is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
          [ 'line', 'ok 2 - this passes\\n' ],
          [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
          [ 'line', 'ok 3 - nested ok\\n' ],
          [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - but that is ok\\n' ],
      [ 'line', '    ok 2 - this passes\\n' ],
      [ 'line', '    ok 3 - nested ok\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', '}\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, buffered: true, name: 'second' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    ok 1 - first {\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '        ok 1 - true is ok\\n' ],
  [ 'line', '        ok 2 - doag is also okay\\n' ],
  [ 'line', '    }\\n' ],
  [ 'line', '    ok 2 - second {\\n' ],
  [ 'line', '        ok 1 - but that is ok\\n' ],
  [ 'line', '        ok 2 - this passes\\n' ],
  [ 'line', '        ok 3 - nested ok\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '    }\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'nesting' } ],
  [ 'line', 'ok 2 - this passes\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# time=66.857ms\\n' ],
  [ 'comment', '# time=66.857ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-comment-indent.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: ../tap/test/test/ok.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: ../tap/test/test/ok.js\\n' ],
      [ 'line', '# Subtest: nesting\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: nesting\\n' ],
          [ 'line', '# Subtest: first\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: first\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest: second\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: second\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest: first\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest: second\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# time=55.292ms\\n' ],
      [ 'comment', '# time=55.292ms\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: nesting\\n' ],
  [ 'line', '        # Subtest: first\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest: second\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # time=55.292ms\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# time=223.468ms\\n' ],
  [ 'comment', '# time=223.468ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-comment-indent.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: ../tap/test/test/ok.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: ../tap/test/test/ok.js\\n' ],
      [ 'line', '# Subtest: nesting\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: nesting\\n' ],
          [ 'line', '# Subtest: first\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: first\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest: second\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: second\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest: first\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest: second\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# time=55.292ms\\n' ],
      [ 'comment', '# time=55.292ms\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: nesting\\n' ],
  [ 'line', '        # Subtest: first\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest: second\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # time=55.292ms\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# time=223.468ms\\n' ],
  [ 'comment', '# time=223.468ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-comment-leading.tap > output bail=true 1`] = `
[ [ 'line', '# Subtest: test/test/ok.js\\n' ],
  [ 'comment', '# Subtest: test/test/ok.js\\n' ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: nesting\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: nesting\\n' ],
      [ 'line', '# Subtest: first\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: first\\n' ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'line', 'ok 1 - true is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
          [ 'line', 'ok 2 - doag is also okay\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'doag is also okay' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..2\\n' ],
      [ 'line', '    ok 1 - true is ok\\n' ],
      [ 'line', '    ok 2 - doag is also okay\\n' ],
      [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
      [ 'line', '# Subtest: second\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: second\\n' ],
          [ 'line', 'ok 1 - but that is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
          [ 'line', 'ok 2 - this passes\\n' ],
          [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
          [ 'line', 'ok 3 - nested ok\\n' ],
          [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - but that is ok\\n' ],
      [ 'line', '    ok 2 - this passes\\n' ],
      [ 'line', '    ok 3 - nested ok\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: first\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '        ok 1 - true is ok\\n' ],
  [ 'line', '        ok 2 - doag is also okay\\n' ],
  [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '    # Subtest: second\\n' ],
  [ 'line', '        ok 1 - but that is ok\\n' ],
  [ 'line', '        ok 2 - this passes\\n' ],
  [ 'line', '        ok 3 - nested ok\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
  [ 'line', 'ok 2 - this passes\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# time=55.292ms\\n' ],
  [ 'comment', '# time=55.292ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-comment-leading.tap > output bail=false 1`] = `
[ [ 'line', '# Subtest: test/test/ok.js\\n' ],
  [ 'comment', '# Subtest: test/test/ok.js\\n' ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: nesting\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: nesting\\n' ],
      [ 'line', '# Subtest: first\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: first\\n' ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'line', 'ok 1 - true is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
          [ 'line', 'ok 2 - doag is also okay\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'doag is also okay' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..2\\n' ],
      [ 'line', '    ok 1 - true is ok\\n' ],
      [ 'line', '    ok 2 - doag is also okay\\n' ],
      [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
      [ 'line', '# Subtest: second\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: second\\n' ],
          [ 'line', 'ok 1 - but that is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
          [ 'line', 'ok 2 - this passes\\n' ],
          [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
          [ 'line', 'ok 3 - nested ok\\n' ],
          [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - but that is ok\\n' ],
      [ 'line', '    ok 2 - this passes\\n' ],
      [ 'line', '    ok 3 - nested ok\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: first\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '        ok 1 - true is ok\\n' ],
  [ 'line', '        ok 2 - doag is also okay\\n' ],
  [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '    # Subtest: second\\n' ],
  [ 'line', '        ok 1 - but that is ok\\n' ],
  [ 'line', '        ok 2 - this passes\\n' ],
  [ 'line', '        ok 3 - nested ok\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
  [ 'line', 'ok 2 - this passes\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# time=55.292ms\\n' ],
  [ 'comment', '# time=55.292ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-comment-mixed-indent.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: ../tap/test/test/ok.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: ../tap/test/test/ok.js\\n' ],
      [ 'line', '# Subtest: nesting\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: nesting\\n' ],
          [ 'line', '# Subtest: first\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: first\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest: second\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: second\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest: first\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest: second\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# time=55.292ms\\n' ],
      [ 'comment', '# time=55.292ms\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: nesting\\n' ],
  [ 'line', '        # Subtest: first\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest: second\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # time=55.292ms\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# time=223.468ms\\n' ],
  [ 'comment', '# time=223.468ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-comment-mixed-indent.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: ../tap/test/test/ok.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: ../tap/test/test/ok.js\\n' ],
      [ 'line', '# Subtest: nesting\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: nesting\\n' ],
          [ 'line', '# Subtest: first\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: first\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest: second\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: second\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest: first\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest: second\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# time=55.292ms\\n' ],
      [ 'comment', '# time=55.292ms\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: nesting\\n' ],
  [ 'line', '        # Subtest: first\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest: second\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # time=55.292ms\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# time=223.468ms\\n' ],
  [ 'comment', '# time=223.468ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-comment-noindent.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: ../tap/test/test/ok.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: ../tap/test/test/ok.js\\n' ],
      [ 'line', '# Subtest: nesting\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: nesting\\n' ],
          [ 'line', '# Subtest: first\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: first\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest: second\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: second\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest: first\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest: second\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# time=55.292ms\\n' ],
      [ 'comment', '# time=55.292ms\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: nesting\\n' ],
  [ 'line', '        # Subtest: first\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest: second\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # time=55.292ms\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# time=223.468ms\\n' ],
  [ 'comment', '# time=223.468ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-comment-noindent.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: ../tap/test/test/ok.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: ../tap/test/test/ok.js\\n' ],
      [ 'line', '# Subtest: nesting\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: nesting\\n' ],
          [ 'line', '# Subtest: first\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: first\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest: second\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: second\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest: first\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest: second\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# time=55.292ms\\n' ],
      [ 'comment', '# time=55.292ms\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: nesting\\n' ],
  [ 'line', '        # Subtest: first\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest: second\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # time=55.292ms\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# time=223.468ms\\n' ],
  [ 'comment', '# time=223.468ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-confusing.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1 - a brace looks like this {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: a brace looks like this\\n' ],
      [ 'line', '# Subtest: x\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: x\\n' ],
          [ 'line', '# Subtest: y\\n' ],
          [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest: y\\n' ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: x\\n' ],
  [ 'line', '        # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      buffered: true,
      name: 'a brace looks like this' } ],
  [ 'line', 'ok 2 - x\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'x' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-confusing.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1 - a brace looks like this {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: a brace looks like this\\n' ],
      [ 'line', '# Subtest: x\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: x\\n' ],
          [ 'line', '# Subtest: y\\n' ],
          [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest: y\\n' ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: x\\n' ],
  [ 'line', '        # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      buffered: true,
      name: 'a brace looks like this' } ],
  [ 'line', 'ok 2 - x\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'x' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-heading.tap > output bail=true 1`] = `
[ [ 'line', '# Subtest: heading.js\\n' ],
  [ 'comment', '# Subtest: heading.js\\n' ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: x\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 1 - x\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'x' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-heading.tap > output bail=false 1`] = `
[ [ 'line', '# Subtest: heading.js\\n' ],
  [ 'comment', '# Subtest: heading.js\\n' ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: x\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 1 - x\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'x' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-maybe-child-unfulfilled.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# just a comment\\n' ],
  [ 'comment', '# just a comment\\n' ],
  [ 'line', '# Subtest: x\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x\\n' ],
      [ 'line', '# Subtest: fake\\n' ],
      [ 'comment', '# Subtest: fake\\n' ],
      [ 'line', 'ok 1 - not a subtest\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'not a subtest' } ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 2 - y\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'y' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: fake\\n' ],
  [ 'line', '    ok 1 - not a subtest\\n' ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 2 - y\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - x\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'x' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-maybe-child-unfulfilled.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# just a comment\\n' ],
  [ 'comment', '# just a comment\\n' ],
  [ 'line', '# Subtest: x\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x\\n' ],
      [ 'line', '# Subtest: fake\\n' ],
      [ 'comment', '# Subtest: fake\\n' ],
      [ 'line', 'ok 1 - not a subtest\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'not a subtest' } ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 2 - y\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'y' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: fake\\n' ],
  [ 'line', '    ok 1 - not a subtest\\n' ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 2 - y\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - x\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'x' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-mixing.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# All of these should be semantically equivalent\\n' ],
  [ 'comment',
    '# All of these should be semantically equivalent\\n' ],
  [ 'line', 'ok 1 - x1 {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x1\\n' ],
      [ 'line', 'ok 1 - y {\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', '}\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, buffered: true, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - y {\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    }\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'x1' } ],
  [ 'line', 'ok 2 - x2 {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x2\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, buffered: true, name: 'x2' } ],
  [ 'line', 'ok 3 - x3 {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x3\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, buffered: true, name: 'x3' } ],
  [ 'line', '# Subtest: x4\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x4\\n' ],
      [ 'line', 'ok 1 - y {\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', '}\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, buffered: true, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - y {\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    }\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 4 - x4\\n' ],
  [ 'assert', Result { ok: true, id: 4, name: 'x4' } ],
  [ 'line', '# Subtest: x5\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x5\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 5 - x5\\n' ],
  [ 'assert', Result { ok: true, id: 5, name: 'x5' } ],
  [ 'line', '# Subtest: x6\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x6\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 6 - x6\\n' ],
  [ 'assert', Result { ok: true, id: 6, name: 'x6' } ],
  [ 'line', '# Subtest: x7\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x7\\n' ],
      [ 'line', 'ok 1 - y {\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', '}\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, buffered: true, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - y {\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    }\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 7 - x7\\n' ],
  [ 'assert', Result { ok: true, id: 7, name: 'x7' } ],
  [ 'line', '# Subtest: x8\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x8\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 8 - x8\\n' ],
  [ 'assert', Result { ok: true, id: 8, name: 'x8' } ],
  [ 'line', '# Subtest: x9\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x9\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 9 - x9\\n' ],
  [ 'assert', Result { ok: true, id: 9, name: 'x9' } ],
  [ 'line', '1..9\\n' ],
  [ 'plan', { start: 1, end: 9 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 9,
      pass: 9,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 9, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-mixing.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# All of these should be semantically equivalent\\n' ],
  [ 'comment',
    '# All of these should be semantically equivalent\\n' ],
  [ 'line', 'ok 1 - x1 {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x1\\n' ],
      [ 'line', 'ok 1 - y {\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', '}\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, buffered: true, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - y {\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    }\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, buffered: true, name: 'x1' } ],
  [ 'line', 'ok 2 - x2 {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x2\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, buffered: true, name: 'x2' } ],
  [ 'line', 'ok 3 - x3 {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x3\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, buffered: true, name: 'x3' } ],
  [ 'line', '# Subtest: x4\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x4\\n' ],
      [ 'line', 'ok 1 - y {\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', '}\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, buffered: true, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - y {\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    }\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 4 - x4\\n' ],
  [ 'assert', Result { ok: true, id: 4, name: 'x4' } ],
  [ 'line', '# Subtest: x5\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x5\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 5 - x5\\n' ],
  [ 'assert', Result { ok: true, id: 5, name: 'x5' } ],
  [ 'line', '# Subtest: x6\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x6\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 6 - x6\\n' ],
  [ 'assert', Result { ok: true, id: 6, name: 'x6' } ],
  [ 'line', '# Subtest: x7\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x7\\n' ],
      [ 'line', 'ok 1 - y {\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', '}\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, buffered: true, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - y {\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    }\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 7 - x7\\n' ],
  [ 'assert', Result { ok: true, id: 7, name: 'x7' } ],
  [ 'line', '# Subtest: x8\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x8\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 8 - x8\\n' ],
  [ 'assert', Result { ok: true, id: 8, name: 'x8' } ],
  [ 'line', '# Subtest: x9\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: x9\\n' ],
      [ 'line', '# Subtest: y\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: y\\n' ],
          [ 'line', 'ok 1 - ypoint\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'ypoint' } ],
          [ 'line', '1..1\\n' ],
          [ 'plan', { start: 1, end: 1 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 1,
              pass: 1,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - ypoint\\n' ],
      [ 'line', '    1..1\\n' ],
      [ 'line', 'ok 1 - y\\n' ],
      [ 'assert', Result { ok: true, id: 1, name: 'y' } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: y\\n' ],
  [ 'line', '        ok 1 - ypoint\\n' ],
  [ 'line', '        1..1\\n' ],
  [ 'line', '    ok 1 - y\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', 'ok 9 - x9\\n' ],
  [ 'assert', Result { ok: true, id: 9, name: 'x9' } ],
  [ 'line', '1..9\\n' ],
  [ 'plan', { start: 1, end: 9 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 9,
      pass: 9,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 9, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-no-comment-leading-comment.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: ../tap/test/test/ok.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: ../tap/test/test/ok.js\\n' ],
      [ 'line', '# Subtest\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest\\n' ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-no-comment-leading-comment.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: ../tap/test/test/ok.js\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: ../tap/test/test/ok.js\\n' ],
      [ 'line', '# Subtest\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest\\n' ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-no-comment-mid-comment-indent.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '# Subtest: nesting\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: nesting\\n' ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: nesting\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-no-comment-mid-comment-indent.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '# Subtest: nesting\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: nesting\\n' ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: nesting\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-no-comment-mid-comment.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '# Subtest: first\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: first\\n' ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: first\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-no-comment-mid-comment.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '# Subtest: first\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: first\\n' ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest: first\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-no-comment.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '# Subtest\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest\\n' ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-no-comment.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '# Subtest\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest\\n' ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'line', 'ok 1 - true is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
              [ 'line', 'ok 2 - doag is also okay\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'doag is also okay' } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    1..2\\n' ],
          [ 'line', '    ok 1 - true is ok\\n' ],
          [ 'line', '    ok 2 - doag is also okay\\n' ],
          [ 'line', 'ok 1 - first # time=8.987ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, time: 8.987, name: 'first' } ],
          [ 'line', '# Subtest\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest\\n' ],
              [ 'line', 'ok 1 - but that is ok\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
              [ 'line', 'ok 2 - this passes\\n' ],
              [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
              [ 'line', 'ok 3 - nested ok\\n' ],
              [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
              [ 'line', '1..3\\n' ],
              [ 'plan', { start: 1, end: 3 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 3,
                  pass: 3,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - but that is ok\\n' ],
          [ 'line', '    ok 2 - this passes\\n' ],
          [ 'line', '    ok 3 - nested ok\\n' ],
          [ 'line', '    1..3\\n' ],
          [ 'line', 'ok 2 - second # time=5.988ms\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, time: 5.988, name: 'second' } ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '        ok 1 - true is ok\\n' ],
      [ 'line', '        ok 2 - doag is also okay\\n' ],
      [ 'line', '    ok 1 - first # time=8.987ms\\n' ],
      [ 'line', '    # Subtest\\n' ],
      [ 'line', '        ok 1 - but that is ok\\n' ],
      [ 'line', '        ok 2 - this passes\\n' ],
      [ 'line', '        ok 3 - nested ok\\n' ],
      [ 'line', '        1..3\\n' ],
      [ 'line', '    ok 2 - second # time=5.988ms\\n' ],
      [ 'line', '    1..2\\n' ],
      [ 'line', 'ok 1 - nesting # time=28.647ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 28.647, name: 'nesting' } ],
      [ 'line', 'ok 2 - this passes\\n' ],
      [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    # Subtest\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '            ok 1 - true is ok\\n' ],
  [ 'line', '            ok 2 - doag is also okay\\n' ],
  [ 'line', '        ok 1 - first # time=8.987ms\\n' ],
  [ 'line', '        # Subtest\\n' ],
  [ 'line', '            ok 1 - but that is ok\\n' ],
  [ 'line', '            ok 2 - this passes\\n' ],
  [ 'line', '            ok 3 - nested ok\\n' ],
  [ 'line', '            1..3\\n' ],
  [ 'line', '        ok 2 - second # time=5.988ms\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '    ok 1 - nesting # time=28.647ms\\n' ],
  [ 'line', '    ok 2 - this passes\\n' ],
  [ 'line', '    1..2\\n' ],
  [ 'line', 'ok 1 - ../tap/test/test/ok.js # time=205.826ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 205.826, name: '../tap/test/test/ok.js' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-stream-comment-indent.tap > output bail=true 1`] = `
[ [ 'line', '# Subtest: ok.js\\n' ],
  [ 'comment', '# Subtest: ok.js\\n' ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: nesting\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: nesting\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# Subtest: first\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: first\\n' ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'line', 'ok 1 - true is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
          [ 'line', 'ok 2 - doag is also okay\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'doag is also okay' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..2\\n' ],
      [ 'line', '    ok 1 - true is ok\\n' ],
      [ 'line', '    ok 2 - doag is also okay\\n' ],
      [ 'line', 'ok 1 - first # time=11.345ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 11.345, name: 'first' } ],
      [ 'line', '# Subtest: second\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: second\\n' ],
          [ 'line', 'ok 1 - but that is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
          [ 'line', 'ok 2 - this passes\\n' ],
          [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
          [ 'line', 'ok 3 - nested ok\\n' ],
          [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - but that is ok\\n' ],
      [ 'line', '    ok 2 - this passes\\n' ],
      [ 'line', '    ok 3 - nested ok\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', 'ok 2 - second # time=3.613ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 3.613, name: 'second' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # Subtest: first\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '        ok 1 - true is ok\\n' ],
  [ 'line', '        ok 2 - doag is also okay\\n' ],
  [ 'line', '    ok 1 - first # time=11.345ms\\n' ],
  [ 'line', '    # Subtest: second\\n' ],
  [ 'line', '        ok 1 - but that is ok\\n' ],
  [ 'line', '        ok 2 - this passes\\n' ],
  [ 'line', '        ok 3 - nested ok\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '    ok 2 - second # time=3.613ms\\n' ],
  [ 'line', 'ok 1 - nesting # time=36.045ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 36.045, name: 'nesting' } ],
  [ 'line', 'ok 2 - this passes\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# time=66.857ms\\n' ],
  [ 'comment', '# time=66.857ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-stream-comment-indent.tap > output bail=false 1`] = `
[ [ 'line', '# Subtest: ok.js\\n' ],
  [ 'comment', '# Subtest: ok.js\\n' ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: nesting\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: nesting\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# Subtest: first\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: first\\n' ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'line', 'ok 1 - true is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
          [ 'line', 'ok 2 - doag is also okay\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'doag is also okay' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..2\\n' ],
      [ 'line', '    ok 1 - true is ok\\n' ],
      [ 'line', '    ok 2 - doag is also okay\\n' ],
      [ 'line', 'ok 1 - first # time=11.345ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 11.345, name: 'first' } ],
      [ 'line', '# Subtest: second\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: second\\n' ],
          [ 'line', 'ok 1 - but that is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
          [ 'line', 'ok 2 - this passes\\n' ],
          [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
          [ 'line', 'ok 3 - nested ok\\n' ],
          [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - but that is ok\\n' ],
      [ 'line', '    ok 2 - this passes\\n' ],
      [ 'line', '    ok 3 - nested ok\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', 'ok 2 - second # time=3.613ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 3.613, name: 'second' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # Subtest: first\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '        ok 1 - true is ok\\n' ],
  [ 'line', '        ok 2 - doag is also okay\\n' ],
  [ 'line', '    ok 1 - first # time=11.345ms\\n' ],
  [ 'line', '    # Subtest: second\\n' ],
  [ 'line', '        ok 1 - but that is ok\\n' ],
  [ 'line', '        ok 2 - this passes\\n' ],
  [ 'line', '        ok 3 - nested ok\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '    ok 2 - second # time=3.613ms\\n' ],
  [ 'line', 'ok 1 - nesting # time=36.045ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 36.045, name: 'nesting' } ],
  [ 'line', 'ok 2 - this passes\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# time=66.857ms\\n' ],
  [ 'comment', '# time=66.857ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-stream-comment.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: nesting\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: nesting\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# Subtest: first\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: first\\n' ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'line', 'ok 1 - true is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
          [ 'line', 'ok 2 - doag is also okay\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'doag is also okay' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..2\\n' ],
      [ 'line', '    ok 1 - true is ok\\n' ],
      [ 'line', '    ok 2 - doag is also okay\\n' ],
      [ 'line', 'ok 1 - first # time=11.345ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 11.345, name: 'first' } ],
      [ 'line', '# Subtest: second\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: second\\n' ],
          [ 'line', 'ok 1 - but that is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
          [ 'line', 'ok 2 - this passes\\n' ],
          [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
          [ 'line', 'ok 3 - nested ok\\n' ],
          [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - but that is ok\\n' ],
      [ 'line', '    ok 2 - this passes\\n' ],
      [ 'line', '    ok 3 - nested ok\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', 'ok 2 - second # time=3.613ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 3.613, name: 'second' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # Subtest: first\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '        ok 1 - true is ok\\n' ],
  [ 'line', '        ok 2 - doag is also okay\\n' ],
  [ 'line', '    ok 1 - first # time=11.345ms\\n' ],
  [ 'line', '    # Subtest: second\\n' ],
  [ 'line', '        ok 1 - but that is ok\\n' ],
  [ 'line', '        ok 2 - this passes\\n' ],
  [ 'line', '        ok 3 - nested ok\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '    ok 2 - second # time=3.613ms\\n' ],
  [ 'line', 'ok 1 - nesting # time=36.045ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 36.045, name: 'nesting' } ],
  [ 'line', 'ok 2 - this passes\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# time=66.857ms\\n' ],
  [ 'comment', '# time=66.857ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-stream-comment.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: nesting\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: nesting\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# Subtest: first\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: first\\n' ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'line', 'ok 1 - true is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
          [ 'line', 'ok 2 - doag is also okay\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'doag is also okay' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..2\\n' ],
      [ 'line', '    ok 1 - true is ok\\n' ],
      [ 'line', '    ok 2 - doag is also okay\\n' ],
      [ 'line', 'ok 1 - first # time=11.345ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 11.345, name: 'first' } ],
      [ 'line', '# Subtest: second\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: second\\n' ],
          [ 'line', 'ok 1 - but that is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
          [ 'line', 'ok 2 - this passes\\n' ],
          [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
          [ 'line', 'ok 3 - nested ok\\n' ],
          [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - but that is ok\\n' ],
      [ 'line', '    ok 2 - this passes\\n' ],
      [ 'line', '    ok 3 - nested ok\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', 'ok 2 - second # time=3.613ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 3.613, name: 'second' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # Subtest: first\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '        ok 1 - true is ok\\n' ],
  [ 'line', '        ok 2 - doag is also okay\\n' ],
  [ 'line', '    ok 1 - first # time=11.345ms\\n' ],
  [ 'line', '    # Subtest: second\\n' ],
  [ 'line', '        ok 1 - but that is ok\\n' ],
  [ 'line', '        ok 2 - this passes\\n' ],
  [ 'line', '        ok 3 - nested ok\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '    ok 2 - second # time=3.613ms\\n' ],
  [ 'line', 'ok 1 - nesting # time=36.045ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 36.045, name: 'nesting' } ],
  [ 'line', 'ok 2 - this passes\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', '# time=66.857ms\\n' ],
  [ 'comment', '# time=66.857ms\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-stream-no-comment.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# Subtest\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest\\n' ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'line', 'ok 1 - true is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
          [ 'line', 'ok 2 - doag is also okay\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'doag is also okay' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..2\\n' ],
      [ 'line', '    ok 1 - true is ok\\n' ],
      [ 'line', '    ok 2 - doag is also okay\\n' ],
      [ 'line', 'ok 1 - first # time=11.345ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 11.345, name: 'first' } ],
      [ 'line', '# Subtest\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest\\n' ],
          [ 'line', 'ok 1 - but that is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
          [ 'line', 'ok 2 - this passes\\n' ],
          [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
          [ 'line', 'ok 3 - nested ok\\n' ],
          [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - but that is ok\\n' ],
      [ 'line', '    ok 2 - this passes\\n' ],
      [ 'line', '    ok 3 - nested ok\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', 'ok 2 - second # time=3.613ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 3.613, name: 'second' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # Subtest\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '        ok 1 - true is ok\\n' ],
  [ 'line', '        ok 2 - doag is also okay\\n' ],
  [ 'line', '    ok 1 - first # time=11.345ms\\n' ],
  [ 'line', '    # Subtest\\n' ],
  [ 'line', '        ok 1 - but that is ok\\n' ],
  [ 'line', '        ok 2 - this passes\\n' ],
  [ 'line', '        ok 3 - nested ok\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '    ok 2 - second # time=3.613ms\\n' ],
  [ 'line', 'ok 1 - nesting # time=36.045ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 36.045, name: 'nesting' } ],
  [ 'line', 'ok 2 - this passes\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-stream-no-comment.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', '1..2\\n' ],
      [ 'plan', { start: 1, end: 2 } ],
      [ 'line', '# Subtest\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest\\n' ],
          [ 'line', '1..2\\n' ],
          [ 'plan', { start: 1, end: 2 } ],
          [ 'line', 'ok 1 - true is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'true is ok' } ],
          [ 'line', 'ok 2 - doag is also okay\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, name: 'doag is also okay' } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 2,
              pass: 2,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    1..2\\n' ],
      [ 'line', '    ok 1 - true is ok\\n' ],
      [ 'line', '    ok 2 - doag is also okay\\n' ],
      [ 'line', 'ok 1 - first # time=11.345ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, time: 11.345, name: 'first' } ],
      [ 'line', '# Subtest\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest\\n' ],
          [ 'line', 'ok 1 - but that is ok\\n' ],
          [ 'assert', Result { ok: true, id: 1, name: 'but that is ok' } ],
          [ 'line', 'ok 2 - this passes\\n' ],
          [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
          [ 'line', 'ok 3 - nested ok\\n' ],
          [ 'assert', Result { ok: true, id: 3, name: 'nested ok' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 0,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - but that is ok\\n' ],
      [ 'line', '    ok 2 - this passes\\n' ],
      [ 'line', '    ok 3 - nested ok\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', 'ok 2 - second # time=3.613ms\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, time: 3.613, name: 'second' } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 2,
          pass: 2,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..2\\n' ],
  [ 'line', '    # Subtest\\n' ],
  [ 'line', '        1..2\\n' ],
  [ 'line', '        ok 1 - true is ok\\n' ],
  [ 'line', '        ok 2 - doag is also okay\\n' ],
  [ 'line', '    ok 1 - first # time=11.345ms\\n' ],
  [ 'line', '    # Subtest\\n' ],
  [ 'line', '        ok 1 - but that is ok\\n' ],
  [ 'line', '        ok 2 - this passes\\n' ],
  [ 'line', '        ok 3 - nested ok\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '    ok 2 - second # time=3.613ms\\n' ],
  [ 'line', 'ok 1 - nesting # time=36.045ms\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, time: 36.045, name: 'nesting' } ],
  [ 'line', 'ok 2 - this passes\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'this passes' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-unfinished.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '# Subtest: unfinished\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: unfinished\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP subtest-unfinished.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'ok\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', '# Subtest: unfinished\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: unfinished\\n' ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', 'ok\\n' ],
      [ 'assert', Result { ok: true, id: 1 } ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 1,
          pass: 1,
          fail: 0,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    ok\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP switches.tap > output bail=true 1`] = `
[ [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'not ok 1\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 1 } ] } ] ]
`

exports[`test/parser.js TAP switches.tap > output bail=false 1`] = `
[ [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'not ok 1\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [ Result { ok: false, id: 1 } ] } ] ]
`

exports[`test/parser.js TAP tap-tests-stdout.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# buffer_compare.js\\n' ],
  [ 'comment', '# buffer_compare.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# same buffers\\n' ],
  [ 'comment', '# same buffers\\n' ],
  [ 'line', 'ok 1 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equivalent' } ],
  [ 'line', '# not same buffers\\n' ],
  [ 'comment', '# not same buffers\\n' ],
  [ 'line', 'ok 2 should not be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should not be equivalent' } ],
  [ 'line', '# tests 2\\n' ],
  [ 'comment', '# tests 2\\n' ],
  [ 'line', '# pass  2\\n' ],
  [ 'comment', '# pass  2\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 3 test/buffer_compare.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'test/buffer_compare.js' } ],
  [ 'line', '# common.js\\n' ],
  [ 'comment', '# common.js\\n' ],
  [ 'line', 'ok 4 just setup, nothing relevant\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'just setup, nothing relevant' } ],
  [ 'line', 'ok 5 test/common.js\\n' ],
  [ 'assert', Result { ok: true, id: 5, name: 'test/common.js' } ],
  [ 'line', '# consumer.js\\n' ],
  [ 'comment', '# consumer.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# basic.tap\\n' ],
  [ 'comment', '# basic.tap\\n' ],
  [ 'line', 'ok 6 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 6, name: 'should be equivalent' } ],
  [ 'line', '# indent.tap\\n' ],
  [ 'comment', '# indent.tap\\n' ],
  [ 'line', 'ok 7 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 7, name: 'should be equivalent' } ],
  [ 'line', '# missing.tap\\n' ],
  [ 'comment', '# missing.tap\\n' ],
  [ 'line', 'ok 8 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 8, name: 'should be equivalent' } ],
  [ 'line', '# skip-all.tap\\n' ],
  [ 'comment', '# skip-all.tap\\n' ],
  [ 'line', 'ok 9 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'should be equivalent' } ],
  [ 'line', '# tap-tests.tap\\n' ],
  [ 'comment', '# tap-tests.tap\\n' ],
  [ 'line', 'ok 10 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 10, name: 'should be equivalent' } ],
  [ 'line', '# yamlish.tap\\n' ],
  [ 'comment', '# yamlish.tap\\n' ],
  [ 'line', 'ok 11 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 11, name: 'should be equivalent' } ],
  [ 'line', '# tests 6\\n' ],
  [ 'comment', '# tests 6\\n' ],
  [ 'line', '# pass  6\\n' ],
  [ 'comment', '# pass  6\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 12 test/consumer.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 12, name: 'test/consumer.js' } ],
  [ 'line', '# debug-test.js\\n' ],
  [ 'comment', '# debug-test.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# debug test\\n' ],
  [ 'comment', '# debug test\\n' ],
  [ 'line', 'ok 13 Should output debugger message\\n' ],
  [ 'assert',
    Result { ok: true, id: 13, name: 'Should output debugger message' } ],
  [ 'line', '# tests 1\\n' ],
  [ 'comment', '# tests 1\\n' ],
  [ 'line', '# pass  1\\n' ],
  [ 'comment', '# pass  1\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 14 test/debug-test.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 14, name: 'test/debug-test.js' } ],
  [ 'line', '# deep-strict.js\\n' ],
  [ 'comment', '# deep-strict.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line',
    "# strictDeepEquals shouldn't care about key order\\n" ],
  [ 'comment',
    "# strictDeepEquals shouldn't care about key order\\n" ],
  [ 'line', 'ok 15 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 15, name: 'should be strictly equal' } ],
  [ 'line',
    "# strictDeepEquals shouldn't care about key order recursively\\n" ],
  [ 'comment',
    "# strictDeepEquals shouldn't care about key order recursively\\n" ],
  [ 'line', 'ok 16 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 16, name: 'should be strictly equal' } ],
  [ 'line',
    "# strictDeepEquals shoudn't care about key order (but still might)\\n" ],
  [ 'comment',
    "# strictDeepEquals shoudn't care about key order (but still might)\\n" ],
  [ 'line', 'ok 17 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 17, name: 'should be strictly equal' } ],
  [ 'line', '# tests 3\\n' ],
  [ 'comment', '# tests 3\\n' ],
  [ 'line', '# pass  3\\n' ],
  [ 'comment', '# pass  3\\n' ],
  ... 489 more items ]
`

exports[`test/parser.js TAP tap-tests-stdout.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# buffer_compare.js\\n' ],
  [ 'comment', '# buffer_compare.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# same buffers\\n' ],
  [ 'comment', '# same buffers\\n' ],
  [ 'line', 'ok 1 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equivalent' } ],
  [ 'line', '# not same buffers\\n' ],
  [ 'comment', '# not same buffers\\n' ],
  [ 'line', 'ok 2 should not be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should not be equivalent' } ],
  [ 'line', '# tests 2\\n' ],
  [ 'comment', '# tests 2\\n' ],
  [ 'line', '# pass  2\\n' ],
  [ 'comment', '# pass  2\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 3 test/buffer_compare.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'test/buffer_compare.js' } ],
  [ 'line', '# common.js\\n' ],
  [ 'comment', '# common.js\\n' ],
  [ 'line', 'ok 4 just setup, nothing relevant\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'just setup, nothing relevant' } ],
  [ 'line', 'ok 5 test/common.js\\n' ],
  [ 'assert', Result { ok: true, id: 5, name: 'test/common.js' } ],
  [ 'line', '# consumer.js\\n' ],
  [ 'comment', '# consumer.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# basic.tap\\n' ],
  [ 'comment', '# basic.tap\\n' ],
  [ 'line', 'ok 6 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 6, name: 'should be equivalent' } ],
  [ 'line', '# indent.tap\\n' ],
  [ 'comment', '# indent.tap\\n' ],
  [ 'line', 'ok 7 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 7, name: 'should be equivalent' } ],
  [ 'line', '# missing.tap\\n' ],
  [ 'comment', '# missing.tap\\n' ],
  [ 'line', 'ok 8 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 8, name: 'should be equivalent' } ],
  [ 'line', '# skip-all.tap\\n' ],
  [ 'comment', '# skip-all.tap\\n' ],
  [ 'line', 'ok 9 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'should be equivalent' } ],
  [ 'line', '# tap-tests.tap\\n' ],
  [ 'comment', '# tap-tests.tap\\n' ],
  [ 'line', 'ok 10 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 10, name: 'should be equivalent' } ],
  [ 'line', '# yamlish.tap\\n' ],
  [ 'comment', '# yamlish.tap\\n' ],
  [ 'line', 'ok 11 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 11, name: 'should be equivalent' } ],
  [ 'line', '# tests 6\\n' ],
  [ 'comment', '# tests 6\\n' ],
  [ 'line', '# pass  6\\n' ],
  [ 'comment', '# pass  6\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 12 test/consumer.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 12, name: 'test/consumer.js' } ],
  [ 'line', '# debug-test.js\\n' ],
  [ 'comment', '# debug-test.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# debug test\\n' ],
  [ 'comment', '# debug test\\n' ],
  [ 'line', 'ok 13 Should output debugger message\\n' ],
  [ 'assert',
    Result { ok: true, id: 13, name: 'Should output debugger message' } ],
  [ 'line', '# tests 1\\n' ],
  [ 'comment', '# tests 1\\n' ],
  [ 'line', '# pass  1\\n' ],
  [ 'comment', '# pass  1\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 14 test/debug-test.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 14, name: 'test/debug-test.js' } ],
  [ 'line', '# deep-strict.js\\n' ],
  [ 'comment', '# deep-strict.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line',
    "# strictDeepEquals shouldn't care about key order\\n" ],
  [ 'comment',
    "# strictDeepEquals shouldn't care about key order\\n" ],
  [ 'line', 'ok 15 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 15, name: 'should be strictly equal' } ],
  [ 'line',
    "# strictDeepEquals shouldn't care about key order recursively\\n" ],
  [ 'comment',
    "# strictDeepEquals shouldn't care about key order recursively\\n" ],
  [ 'line', 'ok 16 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 16, name: 'should be strictly equal' } ],
  [ 'line',
    "# strictDeepEquals shoudn't care about key order (but still might)\\n" ],
  [ 'comment',
    "# strictDeepEquals shoudn't care about key order (but still might)\\n" ],
  [ 'line', 'ok 17 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 17, name: 'should be strictly equal' } ],
  [ 'line', '# tests 3\\n' ],
  [ 'comment', '# tests 3\\n' ],
  [ 'line', '# pass  3\\n' ],
  [ 'comment', '# pass  3\\n' ],
  ... 1059 more items ]
`

exports[`test/parser.js TAP tap-tests.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# buffer_compare.js\\n' ],
  [ 'comment', '# buffer_compare.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# same buffers\\n' ],
  [ 'comment', '# same buffers\\n' ],
  [ 'line', 'ok 1 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equivalent' } ],
  [ 'line', '# not same buffers\\n' ],
  [ 'comment', '# not same buffers\\n' ],
  [ 'line', 'ok 2 should not be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should not be equivalent' } ],
  [ 'line', '# tests 2\\n' ],
  [ 'comment', '# tests 2\\n' ],
  [ 'line', '# pass  2\\n' ],
  [ 'comment', '# pass  2\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 3 test/buffer_compare.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'test/buffer_compare.js' } ],
  [ 'line', '# common.js\\n' ],
  [ 'comment', '# common.js\\n' ],
  [ 'line', 'ok 4 just setup, nothing relevant\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'just setup, nothing relevant' } ],
  [ 'line', 'ok 5 test/common.js\\n' ],
  [ 'assert', Result { ok: true, id: 5, name: 'test/common.js' } ],
  [ 'line', '# consumer.js\\n' ],
  [ 'comment', '# consumer.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# basic.tap\\n' ],
  [ 'comment', '# basic.tap\\n' ],
  [ 'line', 'ok 6 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 6, name: 'should be equivalent' } ],
  [ 'line', '# indent.tap\\n' ],
  [ 'comment', '# indent.tap\\n' ],
  [ 'line', 'ok 7 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 7, name: 'should be equivalent' } ],
  [ 'line', '# missing.tap\\n' ],
  [ 'comment', '# missing.tap\\n' ],
  [ 'line', 'ok 8 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 8, name: 'should be equivalent' } ],
  [ 'line', '# skip-all.tap\\n' ],
  [ 'comment', '# skip-all.tap\\n' ],
  [ 'line', 'ok 9 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'should be equivalent' } ],
  [ 'line', '# yamlish.tap\\n' ],
  [ 'comment', '# yamlish.tap\\n' ],
  [ 'line', 'ok 10 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 10, name: 'should be equivalent' } ],
  [ 'line', '# tests 5\\n' ],
  [ 'comment', '# tests 5\\n' ],
  [ 'line', '# pass  5\\n' ],
  [ 'comment', '# pass  5\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 11 test/consumer.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 11, name: 'test/consumer.js' } ],
  [ 'line', '# debug-test.js\\n' ],
  [ 'comment', '# debug-test.js\\n' ],
  [ 'line', 'debug test\\n' ],
  [ 'extra', 'debug test\\n' ],
  [ 'line', 't.plan=1\\n' ],
  [ 'extra', 't.plan=1\\n' ],
  [ 'line', "'Debugger listening on port 5858\\\\n'\\n" ],
  [ 'extra', "'Debugger listening on port 5858\\\\n'\\n" ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# debug test\\n' ],
  [ 'comment', '# debug test\\n' ],
  [ 'line', 'ok 12 Should output debugger message\\n' ],
  [ 'assert',
    Result { ok: true, id: 12, name: 'Should output debugger message' } ],
  [ 'line', '# tests 1\\n' ],
  [ 'comment', '# tests 1\\n' ],
  [ 'line', '# pass  1\\n' ],
  [ 'comment', '# pass  1\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 13 test/debug-test.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 13, name: 'test/debug-test.js' } ],
  [ 'line', '# deep-strict.js\\n' ],
  [ 'comment', '# deep-strict.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line',
    "# strictDeepEquals shouldn't care about key order\\n" ],
  [ 'comment',
    "# strictDeepEquals shouldn't care about key order\\n" ],
  [ 'line', 'ok 14 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 14, name: 'should be strictly equal' } ],
  [ 'line',
    "# strictDeepEquals shouldn't care about key order recursively\\n" ],
  [ 'comment',
    "# strictDeepEquals shouldn't care about key order recursively\\n" ],
  [ 'line', 'ok 15 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 15, name: 'should be strictly equal' } ],
  [ 'line',
    "# strictDeepEquals shoudn't care about key order (but still might)\\n" ],
  [ 'comment',
    "# strictDeepEquals shoudn't care about key order (but still might)\\n" ],
  [ 'line', 'ok 16 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 16, name: 'should be strictly equal' } ],
  [ 'line', '# tests 3\\n' ],
  [ 'comment', '# tests 3\\n' ],
  ... 513 more items ]
`

exports[`test/parser.js TAP tap-tests.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# buffer_compare.js\\n' ],
  [ 'comment', '# buffer_compare.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# same buffers\\n' ],
  [ 'comment', '# same buffers\\n' ],
  [ 'line', 'ok 1 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equivalent' } ],
  [ 'line', '# not same buffers\\n' ],
  [ 'comment', '# not same buffers\\n' ],
  [ 'line', 'ok 2 should not be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should not be equivalent' } ],
  [ 'line', '# tests 2\\n' ],
  [ 'comment', '# tests 2\\n' ],
  [ 'line', '# pass  2\\n' ],
  [ 'comment', '# pass  2\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 3 test/buffer_compare.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'test/buffer_compare.js' } ],
  [ 'line', '# common.js\\n' ],
  [ 'comment', '# common.js\\n' ],
  [ 'line', 'ok 4 just setup, nothing relevant\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: 'just setup, nothing relevant' } ],
  [ 'line', 'ok 5 test/common.js\\n' ],
  [ 'assert', Result { ok: true, id: 5, name: 'test/common.js' } ],
  [ 'line', '# consumer.js\\n' ],
  [ 'comment', '# consumer.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# basic.tap\\n' ],
  [ 'comment', '# basic.tap\\n' ],
  [ 'line', 'ok 6 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 6, name: 'should be equivalent' } ],
  [ 'line', '# indent.tap\\n' ],
  [ 'comment', '# indent.tap\\n' ],
  [ 'line', 'ok 7 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 7, name: 'should be equivalent' } ],
  [ 'line', '# missing.tap\\n' ],
  [ 'comment', '# missing.tap\\n' ],
  [ 'line', 'ok 8 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 8, name: 'should be equivalent' } ],
  [ 'line', '# skip-all.tap\\n' ],
  [ 'comment', '# skip-all.tap\\n' ],
  [ 'line', 'ok 9 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 9, name: 'should be equivalent' } ],
  [ 'line', '# yamlish.tap\\n' ],
  [ 'comment', '# yamlish.tap\\n' ],
  [ 'line', 'ok 10 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 10, name: 'should be equivalent' } ],
  [ 'line', '# tests 5\\n' ],
  [ 'comment', '# tests 5\\n' ],
  [ 'line', '# pass  5\\n' ],
  [ 'comment', '# pass  5\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 11 test/consumer.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 11, name: 'test/consumer.js' } ],
  [ 'line', '# debug-test.js\\n' ],
  [ 'comment', '# debug-test.js\\n' ],
  [ 'line', 'debug test\\n' ],
  [ 'extra', 'debug test\\n' ],
  [ 'line', 't.plan=1\\n' ],
  [ 'extra', 't.plan=1\\n' ],
  [ 'line', "'Debugger listening on port 5858\\\\n'\\n" ],
  [ 'extra', "'Debugger listening on port 5858\\\\n'\\n" ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line', '# debug test\\n' ],
  [ 'comment', '# debug test\\n' ],
  [ 'line', 'ok 12 Should output debugger message\\n' ],
  [ 'assert',
    Result { ok: true, id: 12, name: 'Should output debugger message' } ],
  [ 'line', '# tests 1\\n' ],
  [ 'comment', '# tests 1\\n' ],
  [ 'line', '# pass  1\\n' ],
  [ 'comment', '# pass  1\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', 'ok 13 test/debug-test.js\\n' ],
  [ 'assert',
    Result { ok: true, id: 13, name: 'test/debug-test.js' } ],
  [ 'line', '# deep-strict.js\\n' ],
  [ 'comment', '# deep-strict.js\\n' ],
  [ 'line', '# TAP version 13\\n' ],
  [ 'comment', '# TAP version 13\\n' ],
  [ 'line',
    "# strictDeepEquals shouldn't care about key order\\n" ],
  [ 'comment',
    "# strictDeepEquals shouldn't care about key order\\n" ],
  [ 'line', 'ok 14 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 14, name: 'should be strictly equal' } ],
  [ 'line',
    "# strictDeepEquals shouldn't care about key order recursively\\n" ],
  [ 'comment',
    "# strictDeepEquals shouldn't care about key order recursively\\n" ],
  [ 'line', 'ok 15 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 15, name: 'should be strictly equal' } ],
  [ 'line',
    "# strictDeepEquals shoudn't care about key order (but still might)\\n" ],
  [ 'comment',
    "# strictDeepEquals shoudn't care about key order (but still might)\\n" ],
  [ 'line', 'ok 16 should be strictly equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 16, name: 'should be strictly equal' } ],
  [ 'line', '# tests 3\\n' ],
  [ 'comment', '# tests 3\\n' ],
  ... 1099 more items ]
`

exports[`test/parser.js TAP todo_inline.tap > output bail=true 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line',
    'not ok 1 - Foo # TODO Just testing the todo interface.\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      todo: 'Just testing the todo interface.',
      name: 'Foo' } ],
  [ 'line',
    'ok 2 - Unexpected success # TODO Just testing the todo interface.\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 2,
      todo: 'Just testing the todo interface.',
      name: 'Unexpected success' } ],
  [ 'line', 'ok 3 - This is not todo\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'This is not todo' } ],
  [ 'line', '# todo: 2\\n' ],
  [ 'comment', '# todo: 2\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 2,
      fail: 1,
      bailout: false,
      todo: 2,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP todo_inline.tap > output bail=false 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line',
    'not ok 1 - Foo # TODO Just testing the todo interface.\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      todo: 'Just testing the todo interface.',
      name: 'Foo' } ],
  [ 'line',
    'ok 2 - Unexpected success # TODO Just testing the todo interface.\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 2,
      todo: 'Just testing the todo interface.',
      name: 'Unexpected success' } ],
  [ 'line', 'ok 3 - This is not todo\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'This is not todo' } ],
  [ 'line', '# todo: 2\\n' ],
  [ 'comment', '# todo: 2\\n' ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 2,
      fail: 1,
      bailout: false,
      todo: 2,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP todo_misparse.tap > output bail=true 1`] = `
[ [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'not ok 1 Hamlette # TODOORNOTTODO\\n' ],
  [ 'assert',
    Result { ok: false, id: 1, name: 'Hamlette # TODOORNOTTODO' } ],
  [ 'line', 'Bail out! # Hamlette # TODOORNOTTODO\\n' ],
  [ 'bailout', '# Hamlette # TODOORNOTTODO' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# Hamlette # TODOORNOTTODO',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result { ok: false, id: 1, name: 'Hamlette # TODOORNOTTODO' } ] } ] ]
`

exports[`test/parser.js TAP todo_misparse.tap > output bail=false 1`] = `
[ [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', 'not ok 1 Hamlette # TODOORNOTTODO\\n' ],
  [ 'assert',
    Result { ok: false, id: 1, name: 'Hamlette # TODOORNOTTODO' } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result { ok: false, id: 1, name: 'Hamlette # TODOORNOTTODO' } ] } ] ]
`

exports[`test/parser.js TAP todo.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 14\\n' ],
  [ 'version', 14 ],
  [ 'line', '# Subtest: a set of tests to be done later\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: a set of tests to be done later\\n' ],
      [ 'line', 'ok 1 - should have a thingie # TODO\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, todo: true, name: 'should have a thingie' } ],
      [ 'line', 'ok 2 - should have a second whoosits also # TODO\\n' ],
      [ 'assert',
        Result {
          ok: true,
          id: 2,
          todo: true,
          name: 'should have a second whoosits also' } ],
      [ 'line', '# Subtest: the subset\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: the subset\\n' ],
          [ 'line', 'ok 1 - should be a child thingie # TODO\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, todo: true, name: 'should be a child thingie' } ],
          [ 'line', 'ok 2 - should also be a whoosits # TODO\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, todo: true, name: 'should also be a whoosits' } ],
          [ 'line', '# Subtest: has some of these things\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: has some of these things\\n' ],
              [ 'line', 'ok 1 - true is truthy\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is truthy' } ],
              [ 'line', 'ok 2 - ten is also truthy\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'ten is also truthy' } ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - true is truthy\\n' ],
          [ 'line', '    ok 2 - ten is also truthy\\n' ],
          [ 'line', '    1..2\\n' ],
          [ 'line', 'ok 3 - has some of these things\\n' ],
          [ 'assert',
            Result { ok: true, id: 3, name: 'has some of these things' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'line', '# todo: 2\\n' ],
          [ 'comment', '# todo: 2\\n' ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 2,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - should be a child thingie # TODO\\n' ],
      [ 'line', '    ok 2 - should also be a whoosits # TODO\\n' ],
      [ 'line', '    # Subtest: has some of these things\\n' ],
      [ 'line', '        ok 1 - true is truthy\\n' ],
      [ 'line', '        ok 2 - ten is also truthy\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '    ok 3 - has some of these things\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', '    # todo: 2\\n' ],
      [ 'line', 'ok 3 - the subset\\n' ],
      [ 'assert', Result { ok: true, id: 3, name: 'the subset' } ],
      [ 'line', '1..3\\n' ],
      [ 'plan', { start: 1, end: 3 } ],
      [ 'line', '# todo: 2\\n' ],
      [ 'comment', '# todo: 2\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 3,
          pass: 3,
          fail: 0,
          bailout: false,
          todo: 2,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - should have a thingie # TODO\\n' ],
  [ 'line',
    '    ok 2 - should have a second whoosits also # TODO\\n' ],
  [ 'line', '    # Subtest: the subset\\n' ],
  [ 'line', '        ok 1 - should be a child thingie # TODO\\n' ],
  [ 'line', '        ok 2 - should also be a whoosits # TODO\\n' ],
  [ 'line', '        # Subtest: has some of these things\\n' ],
  [ 'line', '            ok 1 - true is truthy\\n' ],
  [ 'line', '            ok 2 - ten is also truthy\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '        ok 3 - has some of these things\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '        # todo: 2\\n' ],
  [ 'line', '    ok 3 - the subset\\n' ],
  [ 'line', '    1..3\\n' ],
  [ 'line', '    # todo: 2\\n' ],
  [ 'line', 'ok 1 - a set of tests to be done later\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'a set of tests to be done later' } ],
  [ 'line', '# Subtest: another set of tests\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: another set of tests\\n' ],
      [ 'line', 'ok 1 - is a second set # TODO\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, todo: true, name: 'is a second set' } ],
      [ 'line', 'ok 2 - looks like english # TODO\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, todo: true, name: 'looks like english' } ],
      [ 'line', 'ok 3 - is marked TODO # TODO\\n' ],
      [ 'assert',
        Result { ok: true, id: 3, todo: true, name: 'is marked TODO' } ],
      [ 'line', '1..3\\n' ],
      [ 'plan', { start: 1, end: 3 } ],
      [ 'line', '# todo: 3\\n' ],
      [ 'comment', '# todo: 3\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 3,
          pass: 3,
          fail: 0,
          bailout: false,
          todo: 3,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - is a second set # TODO\\n' ],
  [ 'line', '    ok 2 - looks like english # TODO\\n' ],
  [ 'line', '    ok 3 - is marked TODO # TODO\\n' ],
  [ 'line', '    1..3\\n' ],
  [ 'line', '    # todo: 3\\n' ],
  [ 'line', 'ok 2 - another set of tests\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'another set of tests' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP todo.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 14\\n' ],
  [ 'version', 14 ],
  [ 'line', '# Subtest: a set of tests to be done later\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: a set of tests to be done later\\n' ],
      [ 'line', 'ok 1 - should have a thingie # TODO\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, todo: true, name: 'should have a thingie' } ],
      [ 'line', 'ok 2 - should have a second whoosits also # TODO\\n' ],
      [ 'assert',
        Result {
          ok: true,
          id: 2,
          todo: true,
          name: 'should have a second whoosits also' } ],
      [ 'line', '# Subtest: the subset\\n' ],
      [ 'child',
        [ [ 'comment', '# Subtest: the subset\\n' ],
          [ 'line', 'ok 1 - should be a child thingie # TODO\\n' ],
          [ 'assert',
            Result { ok: true, id: 1, todo: true, name: 'should be a child thingie' } ],
          [ 'line', 'ok 2 - should also be a whoosits # TODO\\n' ],
          [ 'assert',
            Result { ok: true, id: 2, todo: true, name: 'should also be a whoosits' } ],
          [ 'line', '# Subtest: has some of these things\\n' ],
          [ 'child',
            [ [ 'comment', '# Subtest: has some of these things\\n' ],
              [ 'line', 'ok 1 - true is truthy\\n' ],
              [ 'assert', Result { ok: true, id: 1, name: 'true is truthy' } ],
              [ 'line', 'ok 2 - ten is also truthy\\n' ],
              [ 'assert',
                Result { ok: true, id: 2, name: 'ten is also truthy' } ],
              [ 'line', '1..2\\n' ],
              [ 'plan', { start: 1, end: 2 } ],
              [ 'complete',
                FinalResults {
                  ok: true,
                  count: 2,
                  pass: 2,
                  fail: 0,
                  bailout: false,
                  todo: 0,
                  skip: 0,
                  plan:
                   FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
                  failures: [] } ] ] ],
          [ 'line', '    ok 1 - true is truthy\\n' ],
          [ 'line', '    ok 2 - ten is also truthy\\n' ],
          [ 'line', '    1..2\\n' ],
          [ 'line', 'ok 3 - has some of these things\\n' ],
          [ 'assert',
            Result { ok: true, id: 3, name: 'has some of these things' } ],
          [ 'line', '1..3\\n' ],
          [ 'plan', { start: 1, end: 3 } ],
          [ 'line', '# todo: 2\\n' ],
          [ 'comment', '# todo: 2\\n' ],
          [ 'complete',
            FinalResults {
              ok: true,
              count: 3,
              pass: 3,
              fail: 0,
              bailout: false,
              todo: 2,
              skip: 0,
              plan:
               FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
              failures: [] } ] ] ],
      [ 'line', '    ok 1 - should be a child thingie # TODO\\n' ],
      [ 'line', '    ok 2 - should also be a whoosits # TODO\\n' ],
      [ 'line', '    # Subtest: has some of these things\\n' ],
      [ 'line', '        ok 1 - true is truthy\\n' ],
      [ 'line', '        ok 2 - ten is also truthy\\n' ],
      [ 'line', '        1..2\\n' ],
      [ 'line', '    ok 3 - has some of these things\\n' ],
      [ 'line', '    1..3\\n' ],
      [ 'line', '    # todo: 2\\n' ],
      [ 'line', 'ok 3 - the subset\\n' ],
      [ 'assert', Result { ok: true, id: 3, name: 'the subset' } ],
      [ 'line', '1..3\\n' ],
      [ 'plan', { start: 1, end: 3 } ],
      [ 'line', '# todo: 2\\n' ],
      [ 'comment', '# todo: 2\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 3,
          pass: 3,
          fail: 0,
          bailout: false,
          todo: 2,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - should have a thingie # TODO\\n' ],
  [ 'line',
    '    ok 2 - should have a second whoosits also # TODO\\n' ],
  [ 'line', '    # Subtest: the subset\\n' ],
  [ 'line', '        ok 1 - should be a child thingie # TODO\\n' ],
  [ 'line', '        ok 2 - should also be a whoosits # TODO\\n' ],
  [ 'line', '        # Subtest: has some of these things\\n' ],
  [ 'line', '            ok 1 - true is truthy\\n' ],
  [ 'line', '            ok 2 - ten is also truthy\\n' ],
  [ 'line', '            1..2\\n' ],
  [ 'line', '        ok 3 - has some of these things\\n' ],
  [ 'line', '        1..3\\n' ],
  [ 'line', '        # todo: 2\\n' ],
  [ 'line', '    ok 3 - the subset\\n' ],
  [ 'line', '    1..3\\n' ],
  [ 'line', '    # todo: 2\\n' ],
  [ 'line', 'ok 1 - a set of tests to be done later\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'a set of tests to be done later' } ],
  [ 'line', '# Subtest: another set of tests\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: another set of tests\\n' ],
      [ 'line', 'ok 1 - is a second set # TODO\\n' ],
      [ 'assert',
        Result { ok: true, id: 1, todo: true, name: 'is a second set' } ],
      [ 'line', 'ok 2 - looks like english # TODO\\n' ],
      [ 'assert',
        Result { ok: true, id: 2, todo: true, name: 'looks like english' } ],
      [ 'line', 'ok 3 - is marked TODO # TODO\\n' ],
      [ 'assert',
        Result { ok: true, id: 3, todo: true, name: 'is marked TODO' } ],
      [ 'line', '1..3\\n' ],
      [ 'plan', { start: 1, end: 3 } ],
      [ 'line', '# todo: 3\\n' ],
      [ 'comment', '# todo: 3\\n' ],
      [ 'complete',
        FinalResults {
          ok: true,
          count: 3,
          pass: 3,
          fail: 0,
          bailout: false,
          todo: 3,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
          failures: [] } ] ] ],
  [ 'line', '    ok 1 - is a second set # TODO\\n' ],
  [ 'line', '    ok 2 - looks like english # TODO\\n' ],
  [ 'line', '    ok 3 - is marked TODO # TODO\\n' ],
  [ 'line', '    1..3\\n' ],
  [ 'line', '    # todo: 3\\n' ],
  [ 'line', 'ok 2 - another set of tests\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'another set of tests' } ],
  [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP too_many.tap > output bail=true 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 4,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 5,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', 'ok 6\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 6,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', 'ok 7\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 7,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', '# test count(7) != plan(3)\\n' ],
  [ 'comment', '# test count(7) != plan(3)\\n' ],
  [ 'line', '# failed 4 of 7 tests\\n' ],
  [ 'comment', '# failed 4 of 7 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 7,
      pass: 7,
      fail: 4,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 4,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } },
         Result {
           ok: true,
           id: 5,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } },
         Result {
           ok: true,
           id: 6,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } },
         Result {
           ok: true,
           id: 7,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } } ] } ] ]
`

exports[`test/parser.js TAP too_many.tap > output bail=false 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 4,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 5,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', 'ok 6\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 6,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', 'ok 7\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 7,
      tapError: 'id greater than plan end',
      plan: { start: 1, end: 3 } } ],
  [ 'line', '# test count(7) != plan(3)\\n' ],
  [ 'comment', '# test count(7) != plan(3)\\n' ],
  [ 'line', '# failed 4 of 7 tests\\n' ],
  [ 'comment', '# failed 4 of 7 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 7,
      pass: 7,
      fail: 4,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 4,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } },
         Result {
           ok: true,
           id: 5,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } },
         Result {
           ok: true,
           id: 6,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } },
         Result {
           ok: true,
           id: 7,
           tapError: 'id greater than plan end',
           plan: { start: 1, end: 3 } } ] } ] ]
`

exports[`test/parser.js TAP too-many.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 3 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', '# test count(4) != plan(3)\\n' ],
  [ 'comment', '# test count(4) != plan(3)\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP too-many.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# beep\\n' ],
  [ 'comment', '# beep\\n' ],
  [ 'line', 'ok 1 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'should be equal' } ],
  [ 'line', 'ok 2 should be equivalent\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'should be equivalent' } ],
  [ 'line', '# boop\\n' ],
  [ 'comment', '# boop\\n' ],
  [ 'line', 'ok 3 should be equal\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should be equal' } ],
  [ 'line', 'ok 4 (unnamed assert)\\n' ],
  [ 'assert',
    Result { ok: true, id: 4, name: '(unnamed assert)' } ],
  [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', '# tests 4\\n' ],
  [ 'comment', '# tests 4\\n' ],
  [ 'line', '# pass  4\\n' ],
  [ 'comment', '# pass  4\\n' ],
  [ 'line', '# ok\\n' ],
  [ 'comment', '# ok\\n' ],
  [ 'line', '# test count(4) != plan(3)\\n' ],
  [ 'comment', '# test count(4) != plan(3)\\n' ],
  [ 'line', '# failed 1 of 4 tests\\n' ],
  [ 'comment', '# failed 1 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 4,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP unfinished.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', '# test count(2) != plan(5)\\n' ],
  [ 'comment', '# test count(2) != plan(5)\\n' ],
  [ 'line', '# failed 1 of 2 tests\\n' ],
  [ 'comment', '# failed 1 of 2 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 2,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP unfinished.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', '# test count(2) != plan(5)\\n' ],
  [ 'comment', '# test count(2) != plan(5)\\n' ],
  [ 'line', '# failed 1 of 2 tests\\n' ],
  [ 'comment', '# failed 1 of 2 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 2,
      pass: 2,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'incorrect number of tests' } ] } ] ]
`

exports[`test/parser.js TAP unknown-amount-and-failures.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1 - retrieving servers from the database\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'retrieving servers from the database' } ],
  [ 'line', '# need to ping 6 servers\\n' ],
  [ 'comment', '# need to ping 6 servers\\n' ],
  [ 'line', 'ok 2 - pinged diamond\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'pinged diamond' } ],
  [ 'line', 'ok 3 - pinged ruby\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'pinged ruby' } ],
  [ 'line', 'not ok 4 - pinged saphire\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', \`  message: 'hostname "saphire" unknown'\\n\` ],
  [ 'line', '  severity: fail\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 4,
      name: 'pinged saphire',
      diag: { message: 'hostname "saphire" unknown', severity: 'fail' } } ],
  [ 'line', 'Bail out! # pinged saphire\\n' ],
  [ 'bailout', '# pinged saphire' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 3,
      fail: 1,
      bailout: '# pinged saphire',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 4,
           name: 'pinged saphire',
           diag: { message: 'hostname "saphire" unknown', severity: 'fail' } } ] } ] ]
`

exports[`test/parser.js TAP unknown-amount-and-failures.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok 1 - retrieving servers from the database\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'retrieving servers from the database' } ],
  [ 'line', '# need to ping 6 servers\\n' ],
  [ 'comment', '# need to ping 6 servers\\n' ],
  [ 'line', 'ok 2 - pinged diamond\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'pinged diamond' } ],
  [ 'line', 'ok 3 - pinged ruby\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'pinged ruby' } ],
  [ 'line', 'not ok 4 - pinged saphire\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', \`  message: 'hostname "saphire" unknown'\\n\` ],
  [ 'line', '  severity: fail\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 4,
      name: 'pinged saphire',
      diag: { message: 'hostname "saphire" unknown', severity: 'fail' } } ],
  [ 'line', 'ok 5 - pinged onyx\\n' ],
  [ 'assert', Result { ok: true, id: 5, name: 'pinged onyx' } ],
  [ 'line', 'not ok 6 - pinged quartz\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', "  message: 'timeout'\\n" ],
  [ 'line', '  severity: fail\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 6,
      name: 'pinged quartz',
      diag: { message: 'timeout', severity: 'fail' } } ],
  [ 'line', 'ok 7 - pinged gold\\n' ],
  [ 'assert', Result { ok: true, id: 7, name: 'pinged gold' } ],
  [ 'line', '1..7\\n' ],
  [ 'plan', { start: 1, end: 7 } ],
  [ 'line', '# failed 2 of 7 tests\\n' ],
  [ 'comment', '# failed 2 of 7 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 7,
      pass: 5,
      fail: 2,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 7, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 4,
           name: 'pinged saphire',
           diag: { message: 'hostname "saphire" unknown', severity: 'fail' } },
         Result {
           ok: false,
           id: 6,
           name: 'pinged quartz',
           diag: { message: 'timeout', severity: 'fail' } } ] } ] ]
`

exports[`test/parser.js TAP version_good.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP version_good.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP version_late.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'extra', 'TAP version 13\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP version_late.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'TAP version 13\\n' ],
  [ 'extra', 'TAP version 13\\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP version_old-strict.tap > output bail=true 1`] = `
[ [ 'line', 'pragma +strict\\n' ],
  [ 'pragma', 'strict', true ],
  [ 'line', 'TAP version 12\\n' ],
  [ 'extra', 'TAP version 12\\n' ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ { tapError: 'Non-TAP data encountered in strict mode',
           data: 'TAP version 12\\n' } ] } ] ]
`

exports[`test/parser.js TAP version_old-strict.tap > output bail=false 1`] = `
[ [ 'line', 'pragma +strict\\n' ],
  [ 'pragma', 'strict', true ],
  [ 'line', 'TAP version 12\\n' ],
  [ 'extra', 'TAP version 12\\n' ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ { tapError: 'Non-TAP data encountered in strict mode',
           data: 'TAP version 12\\n' } ] } ] ]
`

exports[`test/parser.js TAP version_old.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 12\\n' ],
  [ 'extra', 'TAP version 12\\n' ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP version_old.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 12\\n' ],
  [ 'extra', 'TAP version 12\\n' ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 5\\n' ],
  [ 'assert', Result { ok: true, id: 5 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 5,
      pass: 5,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP version-in-yaml.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: child indented\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child indented\\n' ],
      [ 'line', 'not ok - some yaml\\n' ],
      [ 'line', '  ---\\n' ],
      [ 'line', '  version: |-\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '    TAP version 13\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '  ...\\n' ],
      [ 'assert',
        Result {
          ok: false,
          id: 1,
          name: 'some yaml',
          diag: { version: '\\nTAP version 13' } } ],
      [ 'line', 'Bail out! # some yaml\\n' ],
      [ 'bailout', '# some yaml' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: '# some yaml',
          todo: 0,
          skip: 0,
          plan:
           FinalPlan {
             start: null,
             end: null,
             skipAll: false,
             skipReason: '',
             comment: '' },
          failures:
           [ Result {
               ok: false,
               id: 1,
               name: 'some yaml',
               diag: { version: '\\nTAP version 13' } } ] } ] ] ],
  [ 'line', '    not ok - some yaml\\n' ],
  [ 'line', '      ---\\n' ],
  [ 'line', '      version: |-\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '        TAP version 13\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '      ...\\n' ],
  [ 'line', '    Bail out! # some yaml\\n' ],
  [ 'bailout', '# some yaml' ],
  [ 'line', 'Bail out! # some yaml\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 0,
      pass: 0,
      fail: 0,
      bailout: '# some yaml',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP version-in-yaml.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '# Subtest: child indented\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child indented\\n' ],
      [ 'line', 'not ok - some yaml\\n' ],
      [ 'line', '  ---\\n' ],
      [ 'line', '  version: |-\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '    TAP version 13\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '  ...\\n' ],
      [ 'assert',
        Result {
          ok: false,
          id: 1,
          name: 'some yaml',
          diag: { version: '\\nTAP version 13' } } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', '# failed 1 test\\n' ],
      [ 'comment', '# failed 1 test\\n' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures:
           [ Result {
               ok: false,
               id: 1,
               name: 'some yaml',
               diag: { version: '\\nTAP version 13' } } ] } ] ] ],
  [ 'line', '    not ok - some yaml\\n' ],
  [ 'line', '      ---\\n' ],
  [ 'line', '      version: |-\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '        TAP version 13\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '      ...\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    # failed 1 test\\n' ],
  [ 'line', 'not ok 1 - child indented\\n' ],
  [ 'assert',
    Result { ok: false, id: 1, name: 'child indented' } ],
  [ 'line', '# Subtest: child unindented\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child unindented\\n' ],
      [ 'line', 'not ok - some yaml\\n' ],
      [ 'line', '  ---\\n' ],
      [ 'line', '  version: |-\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '    TAP version 13\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '  ...\\n' ],
      [ 'assert',
        Result {
          ok: false,
          id: 1,
          name: 'some yaml',
          diag: { version: '\\nTAP version 13' } } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', '# failed 1 test\\n' ],
      [ 'comment', '# failed 1 test\\n' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures:
           [ Result {
               ok: false,
               id: 1,
               name: 'some yaml',
               diag: { version: '\\nTAP version 13' } } ] } ] ] ],
  [ 'line', '    not ok - some yaml\\n' ],
  [ 'line', '      ---\\n' ],
  [ 'line', '      version: |-\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '        TAP version 13\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '      ...\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    # failed 1 test\\n' ],
  [ 'line', 'not ok 2 - child unindented\\n' ],
  [ 'assert',
    Result { ok: false, id: 2, name: 'child unindented' } ],
  [ 'line', '# Subtest\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest\\n' ],
      [ 'line', 'not ok - some yaml\\n' ],
      [ 'line', '  ---\\n' ],
      [ 'line', '  version: |-\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '    TAP version 13\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '  ...\\n' ],
      [ 'assert',
        Result {
          ok: false,
          id: 1,
          name: 'some yaml',
          diag: { version: '\\nTAP version 13' } } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', '# failed 1 test\\n' ],
      [ 'comment', '# failed 1 test\\n' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures:
           [ Result {
               ok: false,
               id: 1,
               name: 'some yaml',
               diag: { version: '\\nTAP version 13' } } ] } ] ] ],
  [ 'line', '    not ok - some yaml\\n' ],
  [ 'line', '      ---\\n' ],
  [ 'line', '      version: |-\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '        TAP version 13\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '      ...\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    # failed 1 test\\n' ],
  [ 'line', 'not ok 3 - child unnamed\\n' ],
  [ 'assert', Result { ok: false, id: 3, name: 'child unnamed' } ],
  [ 'line', 'not ok 4 - child buffered {\\n' ],
  [ 'child',
    [ [ 'comment', '# Subtest: child buffered\\n' ],
      [ 'line', 'not ok - some yaml\\n' ],
      [ 'line', '  ---\\n' ],
      [ 'line', '  version: |-\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '    TAP version 13\\n' ],
      [ 'line', '  \\n' ],
      [ 'line', '  ...\\n' ],
      [ 'assert',
        Result {
          ok: false,
          id: 1,
          name: 'some yaml',
          diag: { version: '\\nTAP version 13' } } ],
      [ 'line', '1..1\\n' ],
      [ 'plan', { start: 1, end: 1 } ],
      [ 'line', '# failed 1 test\\n' ],
      [ 'comment', '# failed 1 test\\n' ],
      [ 'complete',
        FinalResults {
          ok: false,
          count: 1,
          pass: 0,
          fail: 1,
          bailout: false,
          todo: 0,
          skip: 0,
          plan:
           FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
          failures:
           [ Result {
               ok: false,
               id: 1,
               name: 'some yaml',
               diag: { version: '\\nTAP version 13' } } ] } ] ] ],
  [ 'line', '    not ok - some yaml\\n' ],
  [ 'line', '      ---\\n' ],
  [ 'line', '      version: |-\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '        TAP version 13\\n' ],
  [ 'line', '  \\n' ],
  [ 'line', '      ...\\n' ],
  [ 'line', '    1..1\\n' ],
  [ 'line', '    # failed 1 test\\n' ],
  [ 'line', '}\\n' ],
  [ 'assert',
    Result { ok: false, id: 4, buffered: true, name: 'child buffered' } ],
  [ 'line', '1..4\\n' ],
  [ 'plan', { start: 1, end: 4 } ],
  [ 'line', '# failed 4 of 4 tests\\n' ],
  [ 'comment', '# failed 4 of 4 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 4,
      pass: 0,
      fail: 4,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 4, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result { ok: false, id: 1, name: 'child indented' },
         Result { ok: false, id: 2, name: 'child unindented' },
         Result { ok: false, id: 3, name: 'child unnamed' },
         Result { ok: false, id: 4, buffered: true, name: 'child buffered' } ] } ] ]
`

exports[`test/parser.js TAP vms_nit.tap > output bail=true 1`] = `
[ [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', 'not \\n' ],
  [ 'extra', 'not \\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP vms_nit.tap > output bail=false 1`] = `
[ [ 'line', '1..2\\n' ],
  [ 'plan', { start: 1, end: 2 } ],
  [ 'line', 'not \\n' ],
  [ 'extra', 'not \\n' ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 2,
      pass: 2,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 2, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP with_comments.tap > output bail=true 1`] = `
[ [ 'line', '# and stuff\\n' ],
  [ 'comment', '# and stuff\\n' ],
  [ 'line', '1..5 todo 1 2 4 5;\\n' ],
  [ 'extra', '1..5 todo 1 2 4 5;\\n' ],
  [ 'line', '# yeah, that\\n' ],
  [ 'comment', '# yeah, that\\n' ],
  [ 'line', 'not ok 1\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', '# Failed test 1 in t/todo.t at line 9 *TODO*\\n' ],
  [ 'comment', '# Failed test 1 in t/todo.t at line 9 *TODO*\\n' ],
  [ 'line', 'Bail out!\\n' ],
  [ 'bailout', '' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: true,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures: [ Result { ok: false, id: 1 } ] } ] ]
`

exports[`test/parser.js TAP with_comments.tap > output bail=false 1`] = `
[ [ 'line', '# and stuff\\n' ],
  [ 'comment', '# and stuff\\n' ],
  [ 'line', '1..5 todo 1 2 4 5;\\n' ],
  [ 'extra', '1..5 todo 1 2 4 5;\\n' ],
  [ 'line', '# yeah, that\\n' ],
  [ 'comment', '# yeah, that\\n' ],
  [ 'line', 'not ok 1\\n' ],
  [ 'assert', Result { ok: false, id: 1 } ],
  [ 'line', '# Failed test 1 in t/todo.t at line 9 *TODO*\\n' ],
  [ 'comment', '# Failed test 1 in t/todo.t at line 9 *TODO*\\n' ],
  [ 'line', 'ok 2 # (t/todo.t at line 10 TODO?!)\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: '# (t/todo.t at line 10 TODO?!)' } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'not ok 4\\n' ],
  [ 'assert', Result { ok: false, id: 4 } ],
  [ 'line', "# Test 4 got: '0' (t/todo.t at line 12 *TODO*)\\n" ],
  [ 'comment',
    "# Test 4 got: '0' (t/todo.t at line 12 *TODO*)\\n" ],
  [ 'line', "#   Expected: '1' (need more tuits)\\n" ],
  [ 'comment', "#   Expected: '1' (need more tuits)\\n" ],
  [ 'line', 'ok 5 # (t/todo.t at line 13 TODO?!)\\n' ],
  [ 'assert',
    Result { ok: true, id: 5, name: '# (t/todo.t at line 13 TODO?!)' } ],
  [ 'line', '# woo\\n' ],
  [ 'comment', '# woo\\n' ],
  [ 'line', '# test count(5) != plan(null)\\n' ],
  [ 'comment', '# test count(5) != plan(null)\\n' ],
  [ 'line', '# failed 3 of 5 tests\\n' ],
  [ 'comment', '# failed 3 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 3,
      fail: 3,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result { ok: false, id: 1 },
         Result { ok: false, id: 4 },
         { tapError: 'no plan' } ] } ] ]
`

exports[`test/parser.js TAP wrong-last.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'last test id does not match plan end' } ] } ] ]
`

exports[`test/parser.js TAP wrong-last.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1\\n' ],
  [ 'assert', Result { ok: true, id: 1 } ],
  [ 'line', 'ok 2\\n' ],
  [ 'assert', Result { ok: true, id: 2 } ],
  [ 'line', 'ok 3\\n' ],
  [ 'assert', Result { ok: true, id: 3 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', 'ok 4\\n' ],
  [ 'assert', Result { ok: true, id: 4 } ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures: [ { tapError: 'last test id does not match plan end' } ] } ] ]
`

exports[`test/parser.js TAP yaml_late_plan.tap > output bail=true 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok - test suite started\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'test suite started' } ],
  [ 'line', 'ok - bogomips\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  Bogomips: 5226.88\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'bogomips', diag: { Bogomips: 5226.88 } } ],
  [ 'line', 'ok - test suite finished\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'test suite finished' } ],
  [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP yaml_late_plan.tap > output bail=false 1`] = `
[ [ 'line', 'TAP version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'ok - test suite started\\n' ],
  [ 'assert',
    Result { ok: true, id: 1, name: 'test suite started' } ],
  [ 'line', 'ok - bogomips\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  Bogomips: 5226.88\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result { ok: true, id: 2, name: 'bogomips', diag: { Bogomips: 5226.88 } } ],
  [ 'line', 'ok - test suite finished\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'test suite finished' } ],
  [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP yamlish-looks-like-child.tap > output bail=true 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1 -  callback happened\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  ok:\\n' ],
  [ 'line', '    - I wished for a bailout!\\n' ],
  [ 'line',
    '    - lots of other shapes here can look like valid tap\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      name: 'callback happened',
      diag:
       { ok:
          [ 'I wished for a bailout!',
            'lots of other shapes here can look like valid tap' ] } } ],
  [ 'line', 'ok 2 -  child test\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'child test' } ],
  [ 'line', 'ok 3 -  should come last\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should come last' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP yamlish-looks-like-child.tap > output bail=false 1`] = `
[ [ 'line', '1..3\\n' ],
  [ 'plan', { start: 1, end: 3 } ],
  [ 'line', 'ok 1 -  callback happened\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  ok:\\n' ],
  [ 'line', '    - I wished for a bailout!\\n' ],
  [ 'line',
    '    - lots of other shapes here can look like valid tap\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 1,
      name: 'callback happened',
      diag:
       { ok:
          [ 'I wished for a bailout!',
            'lots of other shapes here can look like valid tap' ] } } ],
  [ 'line', 'ok 2 -  child test\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'child test' } ],
  [ 'line', 'ok 3 -  should come last\\n' ],
  [ 'assert',
    Result { ok: true, id: 3, name: 'should come last' } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 3,
      pass: 3,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 3, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP yamlish-that-is-not-yaml.tap > output bail=true 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok 1 - expected yaml, got a sea turtle\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  this is not yaml\\n' ],
  [ 'line', '  "In fact, it": : : :%%% <@!<\\n' ],
  [ 'line', '  is not \\n' ],
  [ 'line', '                anything\\n' ],
  [ 'line', '      but a peaceful\\n' ],
  [ 'line', '        Sea Turtle\\n' ],
  [ 'line', '                      _,.---.---.---.--.._ \\n' ],
  [ 'line', "                  _.-' \`--.\`---.\`---'-. _,\`--.._\\n" ],
  [ 'line',
    "                 /\`--._ .'.     \`.     \`,\`-.\`-._\\\\\\n" ],
  [ 'line',
    "                ||   \\\\  \`.\`---.__\`__..-\`. ,'\`-._/\\n" ],
  [ 'line',
    '           _  ,\`\\\\ \`-._\\\\   \\\\    \`.    \`_.-\`-._,\`\`-.\\n' ],
  [ 'line',
    "        ,\`   \`-_ \\\\/ \`-.\`--.\\\\    _\\\\_.-'\\\\__.-\`-.\`-._\`.\\n" ],
  [ 'line',
    "       (_.o> ,--. \`._/'--.-\`,--\`  \\\\_.-'       \\\\\`-._ \\\\\\n" ],
  [ 'line',
    "        \`---'    \`._ \`---._/__,----\`           \`-. \`-\\\\\\n" ],
  [ 'line',
    "                  /_, ,  _..-'                    \`-._\\\\\\n" ],
  [ 'line', '                  \\\\_, \\\\/ ._(\\n' ],
  [ 'line', '                   \\\\_, \\\\/ ._\\\\\\n' ],
  [ 'line', '                    \`._,\\\\/ ._\\\\\\n' ],
  [ 'line', '                      \`._// ./\`-._\\n' ],
  [ 'line', "               LGB      \`-._-_-_.-'\\n" ],
  [ 'line',
    '                   http://www.ascii-art.de/ascii/t/turtle.txt\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result { ok: false, id: 1, name: 'expected yaml, got a sea turtle' } ],
  [ 'extra',
    '---\\n  this is not yaml\\n  "In fact, it": : : :%%% <@!<\\n  is not \\n                anything\\n      but a peaceful\\n        Sea Turtle\\n                      _,.---.---.---.--.._ \\n                  _.-\\' \`--.\`---.\`---\\'-. _,\`--.._\\n                 /\`--._ .\\'.     \`.     \`,\`-.\`-._\\\\\\n                ||   \\\\  \`.\`---.__\`__..-\`. ,\\'\`-._/\\n           _  ,\`\\\\ \`-._\\\\   \\\\    \`.    \`_.-\`-._,\`\`-.\\n        ,\`   \`-_ \\\\/ \`-.\`--.\\\\    _\\\\_.-\\'\\\\__.-\`-.\`-._\`.\\n       (_.o> ,--. \`._/\\'--.-\`,--\`  \\\\_.-\\'       \\\\\`-._ \\\\\\n        \`---\\'    \`._ \`---._/__,----\`           \`-. \`-\\\\\\n                  /_, ,  _..-\\'                    \`-._\\\\\\n                  \\\\_, \\\\/ ._(\\n                   \\\\_, \\\\/ ._\\\\\\n                    \`._,\\\\/ ._\\\\\\n                      \`._// ./\`-._\\n               LGB      \`-._-_-_.-\\'\\n                   http://www.ascii-art.de/ascii/t/turtle.txt\\n...\\n' ],
  [ 'line', 'Bail out! # expected yaml, got a sea turtle\\n' ],
  [ 'bailout', '# expected yaml, got a sea turtle' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# expected yaml, got a sea turtle',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result { ok: false, id: 1, name: 'expected yaml, got a sea turtle' } ] } ] ]
`

exports[`test/parser.js TAP yamlish-that-is-not-yaml.tap > output bail=false 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok 1 - expected yaml, got a sea turtle\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line', '  this is not yaml\\n' ],
  [ 'line', '  "In fact, it": : : :%%% <@!<\\n' ],
  [ 'line', '  is not \\n' ],
  [ 'line', '                anything\\n' ],
  [ 'line', '      but a peaceful\\n' ],
  [ 'line', '        Sea Turtle\\n' ],
  [ 'line', '                      _,.---.---.---.--.._ \\n' ],
  [ 'line', "                  _.-' \`--.\`---.\`---'-. _,\`--.._\\n" ],
  [ 'line',
    "                 /\`--._ .'.     \`.     \`,\`-.\`-._\\\\\\n" ],
  [ 'line',
    "                ||   \\\\  \`.\`---.__\`__..-\`. ,'\`-._/\\n" ],
  [ 'line',
    '           _  ,\`\\\\ \`-._\\\\   \\\\    \`.    \`_.-\`-._,\`\`-.\\n' ],
  [ 'line',
    "        ,\`   \`-_ \\\\/ \`-.\`--.\\\\    _\\\\_.-'\\\\__.-\`-.\`-._\`.\\n" ],
  [ 'line',
    "       (_.o> ,--. \`._/'--.-\`,--\`  \\\\_.-'       \\\\\`-._ \\\\\\n" ],
  [ 'line',
    "        \`---'    \`._ \`---._/__,----\`           \`-. \`-\\\\\\n" ],
  [ 'line',
    "                  /_, ,  _..-'                    \`-._\\\\\\n" ],
  [ 'line', '                  \\\\_, \\\\/ ._(\\n' ],
  [ 'line', '                   \\\\_, \\\\/ ._\\\\\\n' ],
  [ 'line', '                    \`._,\\\\/ ._\\\\\\n' ],
  [ 'line', '                      \`._// ./\`-._\\n' ],
  [ 'line', "               LGB      \`-._-_-_.-'\\n" ],
  [ 'line',
    '                   http://www.ascii-art.de/ascii/t/turtle.txt\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result { ok: false, id: 1, name: 'expected yaml, got a sea turtle' } ],
  [ 'extra',
    '---\\n  this is not yaml\\n  "In fact, it": : : :%%% <@!<\\n  is not \\n                anything\\n      but a peaceful\\n        Sea Turtle\\n                      _,.---.---.---.--.._ \\n                  _.-\\' \`--.\`---.\`---\\'-. _,\`--.._\\n                 /\`--._ .\\'.     \`.     \`,\`-.\`-._\\\\\\n                ||   \\\\  \`.\`---.__\`__..-\`. ,\\'\`-._/\\n           _  ,\`\\\\ \`-._\\\\   \\\\    \`.    \`_.-\`-._,\`\`-.\\n        ,\`   \`-_ \\\\/ \`-.\`--.\\\\    _\\\\_.-\\'\\\\__.-\`-.\`-._\`.\\n       (_.o> ,--. \`._/\\'--.-\`,--\`  \\\\_.-\\'       \\\\\`-._ \\\\\\n        \`---\\'    \`._ \`---._/__,----\`           \`-. \`-\\\\\\n                  /_, ,  _..-\\'                    \`-._\\\\\\n                  \\\\_, \\\\/ ._(\\n                   \\\\_, \\\\/ ._\\\\\\n                    \`._,\\\\/ ._\\\\\\n                      \`._// ./\`-._\\n               LGB      \`-._-_-_.-\\'\\n                   http://www.ascii-art.de/ascii/t/turtle.txt\\n...\\n' ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result { ok: false, id: 1, name: 'expected yaml, got a sea turtle' } ] } ] ]
`

exports[`test/parser.js TAP yamlish-without-test.tap > output bail=true 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '  ---\\n' ],
  [ 'extra', '  ---\\n' ],
  [ 'line', '  this: is yaml\\n' ],
  [ 'extra', '  this: is yaml\\n' ],
  [ 'line', '  but: no test here\\n' ],
  [ 'extra', '  but: no test here\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'extra', '  ...\\n' ],
  [ 'line', 'ok - this is fine\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'this is fine' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP yamlish-without-test.tap > output bail=false 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', '  ---\\n' ],
  [ 'extra', '  ---\\n' ],
  [ 'line', '  this: is yaml\\n' ],
  [ 'extra', '  this: is yaml\\n' ],
  [ 'line', '  but: no test here\\n' ],
  [ 'extra', '  but: no test here\\n' ],
  [ 'line', '  ...\\n' ],
  [ 'extra', '  ...\\n' ],
  [ 'line', 'ok - this is fine\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'this is fine' } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'complete',
    FinalResults {
      ok: true,
      count: 1,
      pass: 1,
      fail: 0,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures: [] } ] ]
`

exports[`test/parser.js TAP yamlish.tap > output bail=true 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok 1 Resolve address\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line',
    \`  message: "Failed with error 'hostname peebles.example.com not found'"\\n\` ],
  [ 'line', '  severity: fail\\n' ],
  [ 'line', '  data:\\n' ],
  [ 'line', '    got:\\n' ],
  [ 'line', "      hostname: 'peebles.example.com'\\n" ],
  [ 'line', '      address: ~\\n' ],
  [ 'line', '    expected:\\n' ],
  [ 'line', "      hostname: 'peebles.example.com'\\n" ],
  [ 'line', "      address: '85.193.201.85'\\n" ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      name: 'Resolve address',
      diag:
       { message: "Failed with error 'hostname peebles.example.com not found'",
         severity: 'fail',
         data:
          { got: { hostname: 'peebles.example.com', address: null },
            expected:
             { hostname: 'peebles.example.com', address: '85.193.201.85' } } } } ],
  [ 'line', 'Bail out! # Resolve address\\n' ],
  [ 'bailout', '# Resolve address' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: '# Resolve address',
      todo: 0,
      skip: 0,
      plan:
       FinalPlan {
         start: null,
         end: null,
         skipAll: false,
         skipReason: '',
         comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           name: 'Resolve address',
           diag:
            { message: "Failed with error 'hostname peebles.example.com not found'",
              severity: 'fail',
              data:
               { got: { hostname: 'peebles.example.com', address: null },
                 expected:
                  { hostname: 'peebles.example.com', address: '85.193.201.85' } } } } ] } ] ]
`

exports[`test/parser.js TAP yamlish.tap > output bail=false 1`] = `
[ [ 'line', 'TAP Version 13\\n' ],
  [ 'version', 13 ],
  [ 'line', 'not ok 1 Resolve address\\n' ],
  [ 'line', '  ---\\n' ],
  [ 'line',
    \`  message: "Failed with error 'hostname peebles.example.com not found'"\\n\` ],
  [ 'line', '  severity: fail\\n' ],
  [ 'line', '  data:\\n' ],
  [ 'line', '    got:\\n' ],
  [ 'line', "      hostname: 'peebles.example.com'\\n" ],
  [ 'line', '      address: ~\\n' ],
  [ 'line', '    expected:\\n' ],
  [ 'line', "      hostname: 'peebles.example.com'\\n" ],
  [ 'line', "      address: '85.193.201.85'\\n" ],
  [ 'line', '  ...\\n' ],
  [ 'assert',
    Result {
      ok: false,
      id: 1,
      name: 'Resolve address',
      diag:
       { message: "Failed with error 'hostname peebles.example.com not found'",
         severity: 'fail',
         data:
          { got: { hostname: 'peebles.example.com', address: null },
            expected:
             { hostname: 'peebles.example.com', address: '85.193.201.85' } } } } ],
  [ 'line', '1..1\\n' ],
  [ 'plan', { start: 1, end: 1 } ],
  [ 'line', '# failed 1 test\\n' ],
  [ 'comment', '# failed 1 test\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 1,
      pass: 0,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 1, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: false,
           id: 1,
           name: 'Resolve address',
           diag:
            { message: "Failed with error 'hostname peebles.example.com not found'",
              severity: 'fail',
              data:
               { got: { hostname: 'peebles.example.com', address: null },
                 expected:
                  { hostname: 'peebles.example.com', address: '85.193.201.85' } } } } ] } ] ]
`

exports[`test/parser.js TAP zero_valid.tap > output bail=true 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1 - One\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'One' } ],
  [ 'line', 'ok 2 - Two\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'Two' } ],
  [ 'line', 'ok - Three\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'Three' } ],
  [ 'line', 'ok 0 - Four\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 0,
      name: 'Four',
      tapError: 'id less than plan start',
      plan: { start: 1, end: 5 } } ],
  [ 'line', 'ok 5 - Five\\n' ],
  [ 'assert', Result { ok: true, id: 5, name: 'Five' } ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 0,
           name: 'Four',
           tapError: 'id less than plan start',
           plan: { start: 1, end: 5 } } ] } ] ]
`

exports[`test/parser.js TAP zero_valid.tap > output bail=false 1`] = `
[ [ 'line', '1..5\\n' ],
  [ 'plan', { start: 1, end: 5 } ],
  [ 'line', 'ok 1 - One\\n' ],
  [ 'assert', Result { ok: true, id: 1, name: 'One' } ],
  [ 'line', 'ok 2 - Two\\n' ],
  [ 'assert', Result { ok: true, id: 2, name: 'Two' } ],
  [ 'line', 'ok - Three\\n' ],
  [ 'assert', Result { ok: true, id: 3, name: 'Three' } ],
  [ 'line', 'ok 0 - Four\\n' ],
  [ 'assert',
    Result {
      ok: true,
      id: 0,
      name: 'Four',
      tapError: 'id less than plan start',
      plan: { start: 1, end: 5 } } ],
  [ 'line', 'ok 5 - Five\\n' ],
  [ 'assert', Result { ok: true, id: 5, name: 'Five' } ],
  [ 'line', '# failed 1 of 5 tests\\n' ],
  [ 'comment', '# failed 1 of 5 tests\\n' ],
  [ 'complete',
    FinalResults {
      ok: false,
      count: 5,
      pass: 5,
      fail: 1,
      bailout: false,
      todo: 0,
      skip: 0,
      plan:
       FinalPlan { start: 1, end: 5, skipAll: false, skipReason: '', comment: '' },
      failures:
       [ Result {
           ok: true,
           id: 0,
           name: 'Four',
           tapError: 'id less than plan start',
           plan: { start: 1, end: 5 } } ] } ] ]
`
